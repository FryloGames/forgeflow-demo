
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model JobPhase
 * 
 */
export type JobPhase = $Result.DefaultSelection<Prisma.$JobPhasePayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Drawing
 * 
 */
export type Drawing = $Result.DefaultSelection<Prisma.$DrawingPayload>
/**
 * Model BomItem
 * 
 */
export type BomItem = $Result.DefaultSelection<Prisma.$BomItemPayload>
/**
 * Model Material
 * 
 */
export type Material = $Result.DefaultSelection<Prisma.$MaterialPayload>
/**
 * Model HeatBatch
 * 
 */
export type HeatBatch = $Result.DefaultSelection<Prisma.$HeatBatchPayload>
/**
 * Model StockLocation
 * 
 */
export type StockLocation = $Result.DefaultSelection<Prisma.$StockLocationPayload>
/**
 * Model StockMovement
 * 
 */
export type StockMovement = $Result.DefaultSelection<Prisma.$StockMovementPayload>
/**
 * Model Timecard
 * 
 */
export type Timecard = $Result.DefaultSelection<Prisma.$TimecardPayload>
/**
 * Model WeldPass
 * 
 */
export type WeldPass = $Result.DefaultSelection<Prisma.$WeldPassPayload>
/**
 * Model WpsSpec
 * 
 */
export type WpsSpec = $Result.DefaultSelection<Prisma.$WpsSpecPayload>
/**
 * Model PqrTest
 * 
 */
export type PqrTest = $Result.DefaultSelection<Prisma.$PqrTestPayload>
/**
 * Model WelderCert
 * 
 */
export type WelderCert = $Result.DefaultSelection<Prisma.$WelderCertPayload>
/**
 * Model Inspection
 * 
 */
export type Inspection = $Result.DefaultSelection<Prisma.$InspectionPayload>
/**
 * Model WeldLog
 * 
 */
export type WeldLog = $Result.DefaultSelection<Prisma.$WeldLogPayload>
/**
 * Model RepairLog
 * 
 */
export type RepairLog = $Result.DefaultSelection<Prisma.$RepairLogPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model PurchaseOrder
 * 
 */
export type PurchaseOrder = $Result.DefaultSelection<Prisma.$PurchaseOrderPayload>
/**
 * Model PurchaseOrderItem
 * 
 */
export type PurchaseOrderItem = $Result.DefaultSelection<Prisma.$PurchaseOrderItemPayload>
/**
 * Model Quote
 * 
 */
export type Quote = $Result.DefaultSelection<Prisma.$QuotePayload>
/**
 * Model QuoteItem
 * 
 */
export type QuoteItem = $Result.DefaultSelection<Prisma.$QuoteItemPayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model InvoiceItem
 * 
 */
export type InvoiceItem = $Result.DefaultSelection<Prisma.$InvoiceItemPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Equipment
 * 
 */
export type Equipment = $Result.DefaultSelection<Prisma.$EquipmentPayload>
/**
 * Model ServiceLog
 * 
 */
export type ServiceLog = $Result.DefaultSelection<Prisma.$ServiceLogPayload>
/**
 * Model WorkOrder
 * 
 */
export type WorkOrder = $Result.DefaultSelection<Prisma.$WorkOrderPayload>
/**
 * Model TruckTrip
 * 
 */
export type TruckTrip = $Result.DefaultSelection<Prisma.$TruckTripPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const JobStatus: {
  QUOTED: 'QUOTED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const PhaseStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD'
};

export type PhaseStatus = (typeof PhaseStatus)[keyof typeof PhaseStatus]


export const TaskStatus: {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  BLOCKED: 'BLOCKED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const Priority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const InspectionType: {
  VT: 'VT',
  UT: 'UT',
  RT: 'RT',
  PT: 'PT',
  MT: 'MT'
};

export type InspectionType = (typeof InspectionType)[keyof typeof InspectionType]


export const PoStatus: {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  CONFIRMED: 'CONFIRMED',
  PARTIAL: 'PARTIAL',
  RECEIVED: 'RECEIVED',
  CANCELLED: 'CANCELLED'
};

export type PoStatus = (typeof PoStatus)[keyof typeof PoStatus]


export const QuoteStatus: {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

export type QuoteStatus = (typeof QuoteStatus)[keyof typeof QuoteStatus]


export const InvoiceStatus: {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  PARTIAL: 'PARTIAL',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus]


export const PaymentMethod: {
  CASH: 'CASH',
  CHEQUE: 'CHEQUE',
  CREDIT_CARD: 'CREDIT_CARD',
  ACH: 'ACH',
  WIRE: 'WIRE'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const EquipmentType: {
  WELDER: 'WELDER',
  CRANE: 'CRANE',
  TRUCK: 'TRUCK',
  COMPRESSOR: 'COMPRESSOR',
  GRINDER: 'GRINDER',
  TORCH: 'TORCH'
};

export type EquipmentType = (typeof EquipmentType)[keyof typeof EquipmentType]


export const ServiceType: {
  MAINTENANCE: 'MAINTENANCE',
  REPAIR: 'REPAIR',
  INSPECTION: 'INSPECTION',
  CALIBRATION: 'CALIBRATION'
};

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType]


export const WorkOrderStatus: {
  ASSIGNED: 'ASSIGNED',
  EN_ROUTE: 'EN_ROUTE',
  ON_SITE: 'ON_SITE',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type WorkOrderStatus = (typeof WorkOrderStatus)[keyof typeof WorkOrderStatus]

}

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type PhaseStatus = $Enums.PhaseStatus

export const PhaseStatus: typeof $Enums.PhaseStatus

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type InspectionType = $Enums.InspectionType

export const InspectionType: typeof $Enums.InspectionType

export type PoStatus = $Enums.PoStatus

export const PoStatus: typeof $Enums.PoStatus

export type QuoteStatus = $Enums.QuoteStatus

export const QuoteStatus: typeof $Enums.QuoteStatus

export type InvoiceStatus = $Enums.InvoiceStatus

export const InvoiceStatus: typeof $Enums.InvoiceStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type EquipmentType = $Enums.EquipmentType

export const EquipmentType: typeof $Enums.EquipmentType

export type ServiceType = $Enums.ServiceType

export const ServiceType: typeof $Enums.ServiceType

export type WorkOrderStatus = $Enums.WorkOrderStatus

export const WorkOrderStatus: typeof $Enums.WorkOrderStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobPhase`: Exposes CRUD operations for the **JobPhase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobPhases
    * const jobPhases = await prisma.jobPhase.findMany()
    * ```
    */
  get jobPhase(): Prisma.JobPhaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.drawing`: Exposes CRUD operations for the **Drawing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drawings
    * const drawings = await prisma.drawing.findMany()
    * ```
    */
  get drawing(): Prisma.DrawingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bomItem`: Exposes CRUD operations for the **BomItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BomItems
    * const bomItems = await prisma.bomItem.findMany()
    * ```
    */
  get bomItem(): Prisma.BomItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.material`: Exposes CRUD operations for the **Material** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Materials
    * const materials = await prisma.material.findMany()
    * ```
    */
  get material(): Prisma.MaterialDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.heatBatch`: Exposes CRUD operations for the **HeatBatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HeatBatches
    * const heatBatches = await prisma.heatBatch.findMany()
    * ```
    */
  get heatBatch(): Prisma.HeatBatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stockLocation`: Exposes CRUD operations for the **StockLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StockLocations
    * const stockLocations = await prisma.stockLocation.findMany()
    * ```
    */
  get stockLocation(): Prisma.StockLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stockMovement`: Exposes CRUD operations for the **StockMovement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StockMovements
    * const stockMovements = await prisma.stockMovement.findMany()
    * ```
    */
  get stockMovement(): Prisma.StockMovementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.timecard`: Exposes CRUD operations for the **Timecard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Timecards
    * const timecards = await prisma.timecard.findMany()
    * ```
    */
  get timecard(): Prisma.TimecardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.weldPass`: Exposes CRUD operations for the **WeldPass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeldPasses
    * const weldPasses = await prisma.weldPass.findMany()
    * ```
    */
  get weldPass(): Prisma.WeldPassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wpsSpec`: Exposes CRUD operations for the **WpsSpec** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WpsSpecs
    * const wpsSpecs = await prisma.wpsSpec.findMany()
    * ```
    */
  get wpsSpec(): Prisma.WpsSpecDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pqrTest`: Exposes CRUD operations for the **PqrTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PqrTests
    * const pqrTests = await prisma.pqrTest.findMany()
    * ```
    */
  get pqrTest(): Prisma.PqrTestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.welderCert`: Exposes CRUD operations for the **WelderCert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WelderCerts
    * const welderCerts = await prisma.welderCert.findMany()
    * ```
    */
  get welderCert(): Prisma.WelderCertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inspection`: Exposes CRUD operations for the **Inspection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inspections
    * const inspections = await prisma.inspection.findMany()
    * ```
    */
  get inspection(): Prisma.InspectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.weldLog`: Exposes CRUD operations for the **WeldLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeldLogs
    * const weldLogs = await prisma.weldLog.findMany()
    * ```
    */
  get weldLog(): Prisma.WeldLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repairLog`: Exposes CRUD operations for the **RepairLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RepairLogs
    * const repairLogs = await prisma.repairLog.findMany()
    * ```
    */
  get repairLog(): Prisma.RepairLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.purchaseOrder`: Exposes CRUD operations for the **PurchaseOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseOrders
    * const purchaseOrders = await prisma.purchaseOrder.findMany()
    * ```
    */
  get purchaseOrder(): Prisma.PurchaseOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.purchaseOrderItem`: Exposes CRUD operations for the **PurchaseOrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseOrderItems
    * const purchaseOrderItems = await prisma.purchaseOrderItem.findMany()
    * ```
    */
  get purchaseOrderItem(): Prisma.PurchaseOrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quote`: Exposes CRUD operations for the **Quote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quotes
    * const quotes = await prisma.quote.findMany()
    * ```
    */
  get quote(): Prisma.QuoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quoteItem`: Exposes CRUD operations for the **QuoteItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuoteItems
    * const quoteItems = await prisma.quoteItem.findMany()
    * ```
    */
  get quoteItem(): Prisma.QuoteItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoiceItem`: Exposes CRUD operations for the **InvoiceItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceItems
    * const invoiceItems = await prisma.invoiceItem.findMany()
    * ```
    */
  get invoiceItem(): Prisma.InvoiceItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipment`: Exposes CRUD operations for the **Equipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipment
    * const equipment = await prisma.equipment.findMany()
    * ```
    */
  get equipment(): Prisma.EquipmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceLog`: Exposes CRUD operations for the **ServiceLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceLogs
    * const serviceLogs = await prisma.serviceLog.findMany()
    * ```
    */
  get serviceLog(): Prisma.ServiceLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workOrder`: Exposes CRUD operations for the **WorkOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrders
    * const workOrders = await prisma.workOrder.findMany()
    * ```
    */
  get workOrder(): Prisma.WorkOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.truckTrip`: Exposes CRUD operations for the **TruckTrip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TruckTrips
    * const truckTrips = await prisma.truckTrip.findMany()
    * ```
    */
  get truckTrip(): Prisma.TruckTripDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.0
   * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    Session: 'Session',
    Company: 'Company',
    Job: 'Job',
    JobPhase: 'JobPhase',
    Task: 'Task',
    Drawing: 'Drawing',
    BomItem: 'BomItem',
    Material: 'Material',
    HeatBatch: 'HeatBatch',
    StockLocation: 'StockLocation',
    StockMovement: 'StockMovement',
    Timecard: 'Timecard',
    WeldPass: 'WeldPass',
    WpsSpec: 'WpsSpec',
    PqrTest: 'PqrTest',
    WelderCert: 'WelderCert',
    Inspection: 'Inspection',
    WeldLog: 'WeldLog',
    RepairLog: 'RepairLog',
    Customer: 'Customer',
    Vendor: 'Vendor',
    PurchaseOrder: 'PurchaseOrder',
    PurchaseOrderItem: 'PurchaseOrderItem',
    Quote: 'Quote',
    QuoteItem: 'QuoteItem',
    Invoice: 'Invoice',
    InvoiceItem: 'InvoiceItem',
    Payment: 'Payment',
    Equipment: 'Equipment',
    ServiceLog: 'ServiceLog',
    WorkOrder: 'WorkOrder',
    TruckTrip: 'TruckTrip'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "role" | "session" | "company" | "job" | "jobPhase" | "task" | "drawing" | "bomItem" | "material" | "heatBatch" | "stockLocation" | "stockMovement" | "timecard" | "weldPass" | "wpsSpec" | "pqrTest" | "welderCert" | "inspection" | "weldLog" | "repairLog" | "customer" | "vendor" | "purchaseOrder" | "purchaseOrderItem" | "quote" | "quoteItem" | "invoice" | "invoiceItem" | "payment" | "equipment" | "serviceLog" | "workOrder" | "truckTrip"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      JobPhase: {
        payload: Prisma.$JobPhasePayload<ExtArgs>
        fields: Prisma.JobPhaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobPhaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobPhaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>
          }
          findFirst: {
            args: Prisma.JobPhaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobPhaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>
          }
          findMany: {
            args: Prisma.JobPhaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>[]
          }
          create: {
            args: Prisma.JobPhaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>
          }
          createMany: {
            args: Prisma.JobPhaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobPhaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>[]
          }
          delete: {
            args: Prisma.JobPhaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>
          }
          update: {
            args: Prisma.JobPhaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>
          }
          deleteMany: {
            args: Prisma.JobPhaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobPhaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobPhaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>[]
          }
          upsert: {
            args: Prisma.JobPhaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPhasePayload>
          }
          aggregate: {
            args: Prisma.JobPhaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobPhase>
          }
          groupBy: {
            args: Prisma.JobPhaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobPhaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobPhaseCountArgs<ExtArgs>
            result: $Utils.Optional<JobPhaseCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Drawing: {
        payload: Prisma.$DrawingPayload<ExtArgs>
        fields: Prisma.DrawingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DrawingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DrawingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>
          }
          findFirst: {
            args: Prisma.DrawingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DrawingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>
          }
          findMany: {
            args: Prisma.DrawingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>[]
          }
          create: {
            args: Prisma.DrawingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>
          }
          createMany: {
            args: Prisma.DrawingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DrawingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>[]
          }
          delete: {
            args: Prisma.DrawingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>
          }
          update: {
            args: Prisma.DrawingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>
          }
          deleteMany: {
            args: Prisma.DrawingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DrawingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DrawingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>[]
          }
          upsert: {
            args: Prisma.DrawingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawingPayload>
          }
          aggregate: {
            args: Prisma.DrawingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDrawing>
          }
          groupBy: {
            args: Prisma.DrawingGroupByArgs<ExtArgs>
            result: $Utils.Optional<DrawingGroupByOutputType>[]
          }
          count: {
            args: Prisma.DrawingCountArgs<ExtArgs>
            result: $Utils.Optional<DrawingCountAggregateOutputType> | number
          }
        }
      }
      BomItem: {
        payload: Prisma.$BomItemPayload<ExtArgs>
        fields: Prisma.BomItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BomItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BomItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          findFirst: {
            args: Prisma.BomItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BomItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          findMany: {
            args: Prisma.BomItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>[]
          }
          create: {
            args: Prisma.BomItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          createMany: {
            args: Prisma.BomItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BomItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>[]
          }
          delete: {
            args: Prisma.BomItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          update: {
            args: Prisma.BomItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          deleteMany: {
            args: Prisma.BomItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BomItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BomItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>[]
          }
          upsert: {
            args: Prisma.BomItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          aggregate: {
            args: Prisma.BomItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBomItem>
          }
          groupBy: {
            args: Prisma.BomItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BomItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.BomItemCountArgs<ExtArgs>
            result: $Utils.Optional<BomItemCountAggregateOutputType> | number
          }
        }
      }
      Material: {
        payload: Prisma.$MaterialPayload<ExtArgs>
        fields: Prisma.MaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findFirst: {
            args: Prisma.MaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findMany: {
            args: Prisma.MaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          create: {
            args: Prisma.MaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          createMany: {
            args: Prisma.MaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          delete: {
            args: Prisma.MaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          update: {
            args: Prisma.MaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          deleteMany: {
            args: Prisma.MaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaterialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          upsert: {
            args: Prisma.MaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          aggregate: {
            args: Prisma.MaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterial>
          }
          groupBy: {
            args: Prisma.MaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialCountAggregateOutputType> | number
          }
        }
      }
      HeatBatch: {
        payload: Prisma.$HeatBatchPayload<ExtArgs>
        fields: Prisma.HeatBatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HeatBatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HeatBatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>
          }
          findFirst: {
            args: Prisma.HeatBatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HeatBatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>
          }
          findMany: {
            args: Prisma.HeatBatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>[]
          }
          create: {
            args: Prisma.HeatBatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>
          }
          createMany: {
            args: Prisma.HeatBatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HeatBatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>[]
          }
          delete: {
            args: Prisma.HeatBatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>
          }
          update: {
            args: Prisma.HeatBatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>
          }
          deleteMany: {
            args: Prisma.HeatBatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HeatBatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HeatBatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>[]
          }
          upsert: {
            args: Prisma.HeatBatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeatBatchPayload>
          }
          aggregate: {
            args: Prisma.HeatBatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHeatBatch>
          }
          groupBy: {
            args: Prisma.HeatBatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<HeatBatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.HeatBatchCountArgs<ExtArgs>
            result: $Utils.Optional<HeatBatchCountAggregateOutputType> | number
          }
        }
      }
      StockLocation: {
        payload: Prisma.$StockLocationPayload<ExtArgs>
        fields: Prisma.StockLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>
          }
          findFirst: {
            args: Prisma.StockLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>
          }
          findMany: {
            args: Prisma.StockLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>[]
          }
          create: {
            args: Prisma.StockLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>
          }
          createMany: {
            args: Prisma.StockLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>[]
          }
          delete: {
            args: Prisma.StockLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>
          }
          update: {
            args: Prisma.StockLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>
          }
          deleteMany: {
            args: Prisma.StockLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StockLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>[]
          }
          upsert: {
            args: Prisma.StockLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockLocationPayload>
          }
          aggregate: {
            args: Prisma.StockLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStockLocation>
          }
          groupBy: {
            args: Prisma.StockLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockLocationCountArgs<ExtArgs>
            result: $Utils.Optional<StockLocationCountAggregateOutputType> | number
          }
        }
      }
      StockMovement: {
        payload: Prisma.$StockMovementPayload<ExtArgs>
        fields: Prisma.StockMovementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockMovementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockMovementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          findFirst: {
            args: Prisma.StockMovementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockMovementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          findMany: {
            args: Prisma.StockMovementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>[]
          }
          create: {
            args: Prisma.StockMovementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          createMany: {
            args: Prisma.StockMovementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockMovementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>[]
          }
          delete: {
            args: Prisma.StockMovementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          update: {
            args: Prisma.StockMovementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          deleteMany: {
            args: Prisma.StockMovementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockMovementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StockMovementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>[]
          }
          upsert: {
            args: Prisma.StockMovementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          aggregate: {
            args: Prisma.StockMovementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStockMovement>
          }
          groupBy: {
            args: Prisma.StockMovementGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockMovementGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockMovementCountArgs<ExtArgs>
            result: $Utils.Optional<StockMovementCountAggregateOutputType> | number
          }
        }
      }
      Timecard: {
        payload: Prisma.$TimecardPayload<ExtArgs>
        fields: Prisma.TimecardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimecardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimecardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>
          }
          findFirst: {
            args: Prisma.TimecardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimecardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>
          }
          findMany: {
            args: Prisma.TimecardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>[]
          }
          create: {
            args: Prisma.TimecardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>
          }
          createMany: {
            args: Prisma.TimecardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimecardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>[]
          }
          delete: {
            args: Prisma.TimecardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>
          }
          update: {
            args: Prisma.TimecardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>
          }
          deleteMany: {
            args: Prisma.TimecardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimecardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TimecardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>[]
          }
          upsert: {
            args: Prisma.TimecardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimecardPayload>
          }
          aggregate: {
            args: Prisma.TimecardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimecard>
          }
          groupBy: {
            args: Prisma.TimecardGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimecardGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimecardCountArgs<ExtArgs>
            result: $Utils.Optional<TimecardCountAggregateOutputType> | number
          }
        }
      }
      WeldPass: {
        payload: Prisma.$WeldPassPayload<ExtArgs>
        fields: Prisma.WeldPassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeldPassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeldPassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>
          }
          findFirst: {
            args: Prisma.WeldPassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeldPassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>
          }
          findMany: {
            args: Prisma.WeldPassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>[]
          }
          create: {
            args: Prisma.WeldPassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>
          }
          createMany: {
            args: Prisma.WeldPassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeldPassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>[]
          }
          delete: {
            args: Prisma.WeldPassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>
          }
          update: {
            args: Prisma.WeldPassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>
          }
          deleteMany: {
            args: Prisma.WeldPassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeldPassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WeldPassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>[]
          }
          upsert: {
            args: Prisma.WeldPassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldPassPayload>
          }
          aggregate: {
            args: Prisma.WeldPassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeldPass>
          }
          groupBy: {
            args: Prisma.WeldPassGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeldPassGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeldPassCountArgs<ExtArgs>
            result: $Utils.Optional<WeldPassCountAggregateOutputType> | number
          }
        }
      }
      WpsSpec: {
        payload: Prisma.$WpsSpecPayload<ExtArgs>
        fields: Prisma.WpsSpecFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WpsSpecFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WpsSpecFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>
          }
          findFirst: {
            args: Prisma.WpsSpecFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WpsSpecFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>
          }
          findMany: {
            args: Prisma.WpsSpecFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>[]
          }
          create: {
            args: Prisma.WpsSpecCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>
          }
          createMany: {
            args: Prisma.WpsSpecCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WpsSpecCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>[]
          }
          delete: {
            args: Prisma.WpsSpecDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>
          }
          update: {
            args: Prisma.WpsSpecUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>
          }
          deleteMany: {
            args: Prisma.WpsSpecDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WpsSpecUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WpsSpecUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>[]
          }
          upsert: {
            args: Prisma.WpsSpecUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WpsSpecPayload>
          }
          aggregate: {
            args: Prisma.WpsSpecAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWpsSpec>
          }
          groupBy: {
            args: Prisma.WpsSpecGroupByArgs<ExtArgs>
            result: $Utils.Optional<WpsSpecGroupByOutputType>[]
          }
          count: {
            args: Prisma.WpsSpecCountArgs<ExtArgs>
            result: $Utils.Optional<WpsSpecCountAggregateOutputType> | number
          }
        }
      }
      PqrTest: {
        payload: Prisma.$PqrTestPayload<ExtArgs>
        fields: Prisma.PqrTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PqrTestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PqrTestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>
          }
          findFirst: {
            args: Prisma.PqrTestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PqrTestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>
          }
          findMany: {
            args: Prisma.PqrTestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>[]
          }
          create: {
            args: Prisma.PqrTestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>
          }
          createMany: {
            args: Prisma.PqrTestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PqrTestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>[]
          }
          delete: {
            args: Prisma.PqrTestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>
          }
          update: {
            args: Prisma.PqrTestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>
          }
          deleteMany: {
            args: Prisma.PqrTestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PqrTestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PqrTestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>[]
          }
          upsert: {
            args: Prisma.PqrTestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PqrTestPayload>
          }
          aggregate: {
            args: Prisma.PqrTestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePqrTest>
          }
          groupBy: {
            args: Prisma.PqrTestGroupByArgs<ExtArgs>
            result: $Utils.Optional<PqrTestGroupByOutputType>[]
          }
          count: {
            args: Prisma.PqrTestCountArgs<ExtArgs>
            result: $Utils.Optional<PqrTestCountAggregateOutputType> | number
          }
        }
      }
      WelderCert: {
        payload: Prisma.$WelderCertPayload<ExtArgs>
        fields: Prisma.WelderCertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WelderCertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WelderCertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>
          }
          findFirst: {
            args: Prisma.WelderCertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WelderCertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>
          }
          findMany: {
            args: Prisma.WelderCertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>[]
          }
          create: {
            args: Prisma.WelderCertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>
          }
          createMany: {
            args: Prisma.WelderCertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WelderCertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>[]
          }
          delete: {
            args: Prisma.WelderCertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>
          }
          update: {
            args: Prisma.WelderCertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>
          }
          deleteMany: {
            args: Prisma.WelderCertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WelderCertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WelderCertUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>[]
          }
          upsert: {
            args: Prisma.WelderCertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelderCertPayload>
          }
          aggregate: {
            args: Prisma.WelderCertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWelderCert>
          }
          groupBy: {
            args: Prisma.WelderCertGroupByArgs<ExtArgs>
            result: $Utils.Optional<WelderCertGroupByOutputType>[]
          }
          count: {
            args: Prisma.WelderCertCountArgs<ExtArgs>
            result: $Utils.Optional<WelderCertCountAggregateOutputType> | number
          }
        }
      }
      Inspection: {
        payload: Prisma.$InspectionPayload<ExtArgs>
        fields: Prisma.InspectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InspectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InspectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>
          }
          findFirst: {
            args: Prisma.InspectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InspectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>
          }
          findMany: {
            args: Prisma.InspectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>[]
          }
          create: {
            args: Prisma.InspectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>
          }
          createMany: {
            args: Prisma.InspectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InspectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>[]
          }
          delete: {
            args: Prisma.InspectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>
          }
          update: {
            args: Prisma.InspectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>
          }
          deleteMany: {
            args: Prisma.InspectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InspectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InspectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>[]
          }
          upsert: {
            args: Prisma.InspectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InspectionPayload>
          }
          aggregate: {
            args: Prisma.InspectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInspection>
          }
          groupBy: {
            args: Prisma.InspectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InspectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InspectionCountArgs<ExtArgs>
            result: $Utils.Optional<InspectionCountAggregateOutputType> | number
          }
        }
      }
      WeldLog: {
        payload: Prisma.$WeldLogPayload<ExtArgs>
        fields: Prisma.WeldLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeldLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeldLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>
          }
          findFirst: {
            args: Prisma.WeldLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeldLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>
          }
          findMany: {
            args: Prisma.WeldLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>[]
          }
          create: {
            args: Prisma.WeldLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>
          }
          createMany: {
            args: Prisma.WeldLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeldLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>[]
          }
          delete: {
            args: Prisma.WeldLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>
          }
          update: {
            args: Prisma.WeldLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>
          }
          deleteMany: {
            args: Prisma.WeldLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeldLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WeldLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>[]
          }
          upsert: {
            args: Prisma.WeldLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeldLogPayload>
          }
          aggregate: {
            args: Prisma.WeldLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeldLog>
          }
          groupBy: {
            args: Prisma.WeldLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeldLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeldLogCountArgs<ExtArgs>
            result: $Utils.Optional<WeldLogCountAggregateOutputType> | number
          }
        }
      }
      RepairLog: {
        payload: Prisma.$RepairLogPayload<ExtArgs>
        fields: Prisma.RepairLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepairLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepairLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>
          }
          findFirst: {
            args: Prisma.RepairLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepairLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>
          }
          findMany: {
            args: Prisma.RepairLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>[]
          }
          create: {
            args: Prisma.RepairLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>
          }
          createMany: {
            args: Prisma.RepairLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RepairLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>[]
          }
          delete: {
            args: Prisma.RepairLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>
          }
          update: {
            args: Prisma.RepairLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>
          }
          deleteMany: {
            args: Prisma.RepairLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RepairLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RepairLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>[]
          }
          upsert: {
            args: Prisma.RepairLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairLogPayload>
          }
          aggregate: {
            args: Prisma.RepairLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepairLog>
          }
          groupBy: {
            args: Prisma.RepairLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepairLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepairLogCountArgs<ExtArgs>
            result: $Utils.Optional<RepairLogCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      PurchaseOrder: {
        payload: Prisma.$PurchaseOrderPayload<ExtArgs>
        fields: Prisma.PurchaseOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          findFirst: {
            args: Prisma.PurchaseOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          findMany: {
            args: Prisma.PurchaseOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>[]
          }
          create: {
            args: Prisma.PurchaseOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          createMany: {
            args: Prisma.PurchaseOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>[]
          }
          delete: {
            args: Prisma.PurchaseOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          update: {
            args: Prisma.PurchaseOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PurchaseOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>[]
          }
          upsert: {
            args: Prisma.PurchaseOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          aggregate: {
            args: Prisma.PurchaseOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchaseOrder>
          }
          groupBy: {
            args: Prisma.PurchaseOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderCountAggregateOutputType> | number
          }
        }
      }
      PurchaseOrderItem: {
        payload: Prisma.$PurchaseOrderItemPayload<ExtArgs>
        fields: Prisma.PurchaseOrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseOrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseOrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          findFirst: {
            args: Prisma.PurchaseOrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseOrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          findMany: {
            args: Prisma.PurchaseOrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>[]
          }
          create: {
            args: Prisma.PurchaseOrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          createMany: {
            args: Prisma.PurchaseOrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseOrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>[]
          }
          delete: {
            args: Prisma.PurchaseOrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          update: {
            args: Prisma.PurchaseOrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseOrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseOrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PurchaseOrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>[]
          }
          upsert: {
            args: Prisma.PurchaseOrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          aggregate: {
            args: Prisma.PurchaseOrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchaseOrderItem>
          }
          groupBy: {
            args: Prisma.PurchaseOrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseOrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderItemCountAggregateOutputType> | number
          }
        }
      }
      Quote: {
        payload: Prisma.$QuotePayload<ExtArgs>
        fields: Prisma.QuoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          findFirst: {
            args: Prisma.QuoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          findMany: {
            args: Prisma.QuoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          create: {
            args: Prisma.QuoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          createMany: {
            args: Prisma.QuoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          delete: {
            args: Prisma.QuoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          update: {
            args: Prisma.QuoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          deleteMany: {
            args: Prisma.QuoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          upsert: {
            args: Prisma.QuoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          aggregate: {
            args: Prisma.QuoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuote>
          }
          groupBy: {
            args: Prisma.QuoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuoteCountArgs<ExtArgs>
            result: $Utils.Optional<QuoteCountAggregateOutputType> | number
          }
        }
      }
      QuoteItem: {
        payload: Prisma.$QuoteItemPayload<ExtArgs>
        fields: Prisma.QuoteItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuoteItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuoteItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>
          }
          findFirst: {
            args: Prisma.QuoteItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuoteItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>
          }
          findMany: {
            args: Prisma.QuoteItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>[]
          }
          create: {
            args: Prisma.QuoteItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>
          }
          createMany: {
            args: Prisma.QuoteItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuoteItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>[]
          }
          delete: {
            args: Prisma.QuoteItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>
          }
          update: {
            args: Prisma.QuoteItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>
          }
          deleteMany: {
            args: Prisma.QuoteItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuoteItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuoteItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>[]
          }
          upsert: {
            args: Prisma.QuoteItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuoteItemPayload>
          }
          aggregate: {
            args: Prisma.QuoteItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuoteItem>
          }
          groupBy: {
            args: Prisma.QuoteItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuoteItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuoteItemCountArgs<ExtArgs>
            result: $Utils.Optional<QuoteItemCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      InvoiceItem: {
        payload: Prisma.$InvoiceItemPayload<ExtArgs>
        fields: Prisma.InvoiceItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findFirst: {
            args: Prisma.InvoiceItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findMany: {
            args: Prisma.InvoiceItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          create: {
            args: Prisma.InvoiceItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          createMany: {
            args: Prisma.InvoiceItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          delete: {
            args: Prisma.InvoiceItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          update: {
            args: Prisma.InvoiceItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          deleteMany: {
            args: Prisma.InvoiceItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          upsert: {
            args: Prisma.InvoiceItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          aggregate: {
            args: Prisma.InvoiceItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoiceItem>
          }
          groupBy: {
            args: Prisma.InvoiceItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceItemCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Equipment: {
        payload: Prisma.$EquipmentPayload<ExtArgs>
        fields: Prisma.EquipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          findFirst: {
            args: Prisma.EquipmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          findMany: {
            args: Prisma.EquipmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          create: {
            args: Prisma.EquipmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          createMany: {
            args: Prisma.EquipmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          delete: {
            args: Prisma.EquipmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          update: {
            args: Prisma.EquipmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          deleteMany: {
            args: Prisma.EquipmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          upsert: {
            args: Prisma.EquipmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          aggregate: {
            args: Prisma.EquipmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipment>
          }
          groupBy: {
            args: Prisma.EquipmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipmentCountArgs<ExtArgs>
            result: $Utils.Optional<EquipmentCountAggregateOutputType> | number
          }
        }
      }
      ServiceLog: {
        payload: Prisma.$ServiceLogPayload<ExtArgs>
        fields: Prisma.ServiceLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>
          }
          findFirst: {
            args: Prisma.ServiceLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>
          }
          findMany: {
            args: Prisma.ServiceLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>[]
          }
          create: {
            args: Prisma.ServiceLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>
          }
          createMany: {
            args: Prisma.ServiceLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>[]
          }
          delete: {
            args: Prisma.ServiceLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>
          }
          update: {
            args: Prisma.ServiceLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>
          }
          deleteMany: {
            args: Prisma.ServiceLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>[]
          }
          upsert: {
            args: Prisma.ServiceLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceLogPayload>
          }
          aggregate: {
            args: Prisma.ServiceLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceLog>
          }
          groupBy: {
            args: Prisma.ServiceLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceLogCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceLogCountAggregateOutputType> | number
          }
        }
      }
      WorkOrder: {
        payload: Prisma.$WorkOrderPayload<ExtArgs>
        fields: Prisma.WorkOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findMany: {
            args: Prisma.WorkOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          create: {
            args: Prisma.WorkOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          createMany: {
            args: Prisma.WorkOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          update: {
            args: Prisma.WorkOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          upsert: {
            args: Prisma.WorkOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrder>
          }
          groupBy: {
            args: Prisma.WorkOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderCountAggregateOutputType> | number
          }
        }
      }
      TruckTrip: {
        payload: Prisma.$TruckTripPayload<ExtArgs>
        fields: Prisma.TruckTripFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TruckTripFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TruckTripFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>
          }
          findFirst: {
            args: Prisma.TruckTripFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TruckTripFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>
          }
          findMany: {
            args: Prisma.TruckTripFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>[]
          }
          create: {
            args: Prisma.TruckTripCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>
          }
          createMany: {
            args: Prisma.TruckTripCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TruckTripCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>[]
          }
          delete: {
            args: Prisma.TruckTripDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>
          }
          update: {
            args: Prisma.TruckTripUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>
          }
          deleteMany: {
            args: Prisma.TruckTripDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TruckTripUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TruckTripUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>[]
          }
          upsert: {
            args: Prisma.TruckTripUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckTripPayload>
          }
          aggregate: {
            args: Prisma.TruckTripAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTruckTrip>
          }
          groupBy: {
            args: Prisma.TruckTripGroupByArgs<ExtArgs>
            result: $Utils.Optional<TruckTripGroupByOutputType>[]
          }
          count: {
            args: Prisma.TruckTripCountArgs<ExtArgs>
            result: $Utils.Optional<TruckTripCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    role?: RoleOmit
    session?: SessionOmit
    company?: CompanyOmit
    job?: JobOmit
    jobPhase?: JobPhaseOmit
    task?: TaskOmit
    drawing?: DrawingOmit
    bomItem?: BomItemOmit
    material?: MaterialOmit
    heatBatch?: HeatBatchOmit
    stockLocation?: StockLocationOmit
    stockMovement?: StockMovementOmit
    timecard?: TimecardOmit
    weldPass?: WeldPassOmit
    wpsSpec?: WpsSpecOmit
    pqrTest?: PqrTestOmit
    welderCert?: WelderCertOmit
    inspection?: InspectionOmit
    weldLog?: WeldLogOmit
    repairLog?: RepairLogOmit
    customer?: CustomerOmit
    vendor?: VendorOmit
    purchaseOrder?: PurchaseOrderOmit
    purchaseOrderItem?: PurchaseOrderItemOmit
    quote?: QuoteOmit
    quoteItem?: QuoteItemOmit
    invoice?: InvoiceOmit
    invoiceItem?: InvoiceItemOmit
    payment?: PaymentOmit
    equipment?: EquipmentOmit
    serviceLog?: ServiceLogOmit
    workOrder?: WorkOrderOmit
    truckTrip?: TruckTripOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    welderCerts: number
    timecards: number
    weldPasses: number
    inspections: number
    sessions: number
    createdJobs: number
    truckTrips: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welderCerts?: boolean | UserCountOutputTypeCountWelderCertsArgs
    timecards?: boolean | UserCountOutputTypeCountTimecardsArgs
    weldPasses?: boolean | UserCountOutputTypeCountWeldPassesArgs
    inspections?: boolean | UserCountOutputTypeCountInspectionsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    createdJobs?: boolean | UserCountOutputTypeCountCreatedJobsArgs
    truckTrips?: boolean | UserCountOutputTypeCountTruckTripsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWelderCertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WelderCertWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTimecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimecardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWeldPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeldPassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInspectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTruckTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckTripWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    users: number
    customers: number
    vendors: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | CompanyCountOutputTypeCountUsersArgs
    customers?: boolean | CompanyCountOutputTypeCountCustomersArgs
    vendors?: boolean | CompanyCountOutputTypeCountVendorsArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    phases: number
    drawings: number
    bomItems: number
    timecards: number
    invoices: number
    workOrders: number
    Inspection: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phases?: boolean | JobCountOutputTypeCountPhasesArgs
    drawings?: boolean | JobCountOutputTypeCountDrawingsArgs
    bomItems?: boolean | JobCountOutputTypeCountBomItemsArgs
    timecards?: boolean | JobCountOutputTypeCountTimecardsArgs
    invoices?: boolean | JobCountOutputTypeCountInvoicesArgs
    workOrders?: boolean | JobCountOutputTypeCountWorkOrdersArgs
    Inspection?: boolean | JobCountOutputTypeCountInspectionArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountPhasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPhaseWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountDrawingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DrawingWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountBomItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BomItemWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountTimecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimecardWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountInspectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspectionWhereInput
  }


  /**
   * Count Type JobPhaseCountOutputType
   */

  export type JobPhaseCountOutputType = {
    tasks: number
  }

  export type JobPhaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | JobPhaseCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * JobPhaseCountOutputType without action
   */
  export type JobPhaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhaseCountOutputType
     */
    select?: JobPhaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobPhaseCountOutputType without action
   */
  export type JobPhaseCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    timecards: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timecards?: boolean | TaskCountOutputTypeCountTimecardsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountTimecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimecardWhereInput
  }


  /**
   * Count Type MaterialCountOutputType
   */

  export type MaterialCountOutputType = {
    bomItems: number
    heatBatches: number
    stockMoves: number
    poItems: number
  }

  export type MaterialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bomItems?: boolean | MaterialCountOutputTypeCountBomItemsArgs
    heatBatches?: boolean | MaterialCountOutputTypeCountHeatBatchesArgs
    stockMoves?: boolean | MaterialCountOutputTypeCountStockMovesArgs
    poItems?: boolean | MaterialCountOutputTypeCountPoItemsArgs
  }

  // Custom InputTypes
  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialCountOutputType
     */
    select?: MaterialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeCountBomItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BomItemWhereInput
  }

  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeCountHeatBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HeatBatchWhereInput
  }

  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeCountStockMovesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockMovementWhereInput
  }

  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeCountPoItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderItemWhereInput
  }


  /**
   * Count Type StockLocationCountOutputType
   */

  export type StockLocationCountOutputType = {
    movementsFrom: number
    movementsTo: number
  }

  export type StockLocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movementsFrom?: boolean | StockLocationCountOutputTypeCountMovementsFromArgs
    movementsTo?: boolean | StockLocationCountOutputTypeCountMovementsToArgs
  }

  // Custom InputTypes
  /**
   * StockLocationCountOutputType without action
   */
  export type StockLocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocationCountOutputType
     */
    select?: StockLocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StockLocationCountOutputType without action
   */
  export type StockLocationCountOutputTypeCountMovementsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockMovementWhereInput
  }

  /**
   * StockLocationCountOutputType without action
   */
  export type StockLocationCountOutputTypeCountMovementsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockMovementWhereInput
  }


  /**
   * Count Type TimecardCountOutputType
   */

  export type TimecardCountOutputType = {
    weldPasses: number
  }

  export type TimecardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weldPasses?: boolean | TimecardCountOutputTypeCountWeldPassesArgs
  }

  // Custom InputTypes
  /**
   * TimecardCountOutputType without action
   */
  export type TimecardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimecardCountOutputType
     */
    select?: TimecardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TimecardCountOutputType without action
   */
  export type TimecardCountOutputTypeCountWeldPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeldPassWhereInput
  }


  /**
   * Count Type WpsSpecCountOutputType
   */

  export type WpsSpecCountOutputType = {
    pqrTests: number
    welderCerts: number
    timecards: number
    weldPasses: number
  }

  export type WpsSpecCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pqrTests?: boolean | WpsSpecCountOutputTypeCountPqrTestsArgs
    welderCerts?: boolean | WpsSpecCountOutputTypeCountWelderCertsArgs
    timecards?: boolean | WpsSpecCountOutputTypeCountTimecardsArgs
    weldPasses?: boolean | WpsSpecCountOutputTypeCountWeldPassesArgs
  }

  // Custom InputTypes
  /**
   * WpsSpecCountOutputType without action
   */
  export type WpsSpecCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpecCountOutputType
     */
    select?: WpsSpecCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WpsSpecCountOutputType without action
   */
  export type WpsSpecCountOutputTypeCountPqrTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PqrTestWhereInput
  }

  /**
   * WpsSpecCountOutputType without action
   */
  export type WpsSpecCountOutputTypeCountWelderCertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WelderCertWhereInput
  }

  /**
   * WpsSpecCountOutputType without action
   */
  export type WpsSpecCountOutputTypeCountTimecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimecardWhereInput
  }

  /**
   * WpsSpecCountOutputType without action
   */
  export type WpsSpecCountOutputTypeCountWeldPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeldPassWhereInput
  }


  /**
   * Count Type InspectionCountOutputType
   */

  export type InspectionCountOutputType = {
    weldLogs: number
    repairLogs: number
  }

  export type InspectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weldLogs?: boolean | InspectionCountOutputTypeCountWeldLogsArgs
    repairLogs?: boolean | InspectionCountOutputTypeCountRepairLogsArgs
  }

  // Custom InputTypes
  /**
   * InspectionCountOutputType without action
   */
  export type InspectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InspectionCountOutputType
     */
    select?: InspectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InspectionCountOutputType without action
   */
  export type InspectionCountOutputTypeCountWeldLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeldLogWhereInput
  }

  /**
   * InspectionCountOutputType without action
   */
  export type InspectionCountOutputTypeCountRepairLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepairLogWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    jobs: number
    quotes: number
    invoices: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobs?: boolean | CustomerCountOutputTypeCountJobsArgs
    quotes?: boolean | CustomerCountOutputTypeCountQuotesArgs
    invoices?: boolean | CustomerCountOutputTypeCountInvoicesArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountQuotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    purchaseOrders: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaseOrders?: boolean | VendorCountOutputTypeCountPurchaseOrdersArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountPurchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
  }


  /**
   * Count Type PurchaseOrderCountOutputType
   */

  export type PurchaseOrderCountOutputType = {
    items: number
  }

  export type PurchaseOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PurchaseOrderCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * PurchaseOrderCountOutputType without action
   */
  export type PurchaseOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderCountOutputType
     */
    select?: PurchaseOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PurchaseOrderCountOutputType without action
   */
  export type PurchaseOrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderItemWhereInput
  }


  /**
   * Count Type QuoteCountOutputType
   */

  export type QuoteCountOutputType = {
    items: number
    jobs: number
  }

  export type QuoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | QuoteCountOutputTypeCountItemsArgs
    jobs?: boolean | QuoteCountOutputTypeCountJobsArgs
  }

  // Custom InputTypes
  /**
   * QuoteCountOutputType without action
   */
  export type QuoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteCountOutputType
     */
    select?: QuoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuoteCountOutputType without action
   */
  export type QuoteCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteItemWhereInput
  }

  /**
   * QuoteCountOutputType without action
   */
  export type QuoteCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    items: number
    payments: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | InvoiceCountOutputTypeCountItemsArgs
    payments?: boolean | InvoiceCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type EquipmentCountOutputType
   */

  export type EquipmentCountOutputType = {
    serviceLogs: number
  }

  export type EquipmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceLogs?: boolean | EquipmentCountOutputTypeCountServiceLogsArgs
  }

  // Custom InputTypes
  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCountOutputType
     */
    select?: EquipmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeCountServiceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceLogWhereInput
  }


  /**
   * Count Type WorkOrderCountOutputType
   */

  export type WorkOrderCountOutputType = {
    truckTrips: number
  }

  export type WorkOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    truckTrips?: boolean | WorkOrderCountOutputTypeCountTruckTripsArgs
  }

  // Custom InputTypes
  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderCountOutputType
     */
    select?: WorkOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountTruckTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckTripWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    avatar: string | null
    roleId: string | null
    companyId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    avatar: string | null
    roleId: string | null
    companyId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    phone: number
    avatar: number
    roleId: number
    companyId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    phone?: true
    avatar?: true
    roleId?: true
    companyId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    phone?: true
    avatar?: true
    roleId?: true
    companyId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    phone?: true
    avatar?: true
    roleId?: true
    companyId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstName: string
    lastName: string
    phone: string | null
    avatar: string | null
    roleId: string
    companyId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    avatar?: boolean
    roleId?: boolean
    companyId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    welderCerts?: boolean | User$welderCertsArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    timecards?: boolean | User$timecardsArgs<ExtArgs>
    weldPasses?: boolean | User$weldPassesArgs<ExtArgs>
    inspections?: boolean | User$inspectionsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    createdJobs?: boolean | User$createdJobsArgs<ExtArgs>
    truckTrips?: boolean | User$truckTripsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    avatar?: boolean
    roleId?: boolean
    companyId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    avatar?: boolean
    roleId?: boolean
    companyId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    avatar?: boolean
    roleId?: boolean
    companyId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "phone" | "avatar" | "roleId" | "companyId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welderCerts?: boolean | User$welderCertsArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    timecards?: boolean | User$timecardsArgs<ExtArgs>
    weldPasses?: boolean | User$weldPassesArgs<ExtArgs>
    inspections?: boolean | User$inspectionsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    createdJobs?: boolean | User$createdJobsArgs<ExtArgs>
    truckTrips?: boolean | User$truckTripsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      welderCerts: Prisma.$WelderCertPayload<ExtArgs>[]
      role: Prisma.$RolePayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs> | null
      timecards: Prisma.$TimecardPayload<ExtArgs>[]
      weldPasses: Prisma.$WeldPassPayload<ExtArgs>[]
      inspections: Prisma.$InspectionPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      createdJobs: Prisma.$JobPayload<ExtArgs>[]
      truckTrips: Prisma.$TruckTripPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string
      lastName: string
      phone: string | null
      avatar: string | null
      roleId: string
      companyId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    welderCerts<T extends User$welderCertsArgs<ExtArgs> = {}>(args?: Subset<T, User$welderCertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends User$companyArgs<ExtArgs> = {}>(args?: Subset<T, User$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    timecards<T extends User$timecardsArgs<ExtArgs> = {}>(args?: Subset<T, User$timecardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weldPasses<T extends User$weldPassesArgs<ExtArgs> = {}>(args?: Subset<T, User$weldPassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inspections<T extends User$inspectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$inspectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdJobs<T extends User$createdJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    truckTrips<T extends User$truckTripsArgs<ExtArgs> = {}>(args?: Subset<T, User$truckTripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly roleId: FieldRef<"User", 'String'>
    readonly companyId: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.welderCerts
   */
  export type User$welderCertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    where?: WelderCertWhereInput
    orderBy?: WelderCertOrderByWithRelationInput | WelderCertOrderByWithRelationInput[]
    cursor?: WelderCertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WelderCertScalarFieldEnum | WelderCertScalarFieldEnum[]
  }

  /**
   * User.company
   */
  export type User$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.timecards
   */
  export type User$timecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    where?: TimecardWhereInput
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    cursor?: TimecardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimecardScalarFieldEnum | TimecardScalarFieldEnum[]
  }

  /**
   * User.weldPasses
   */
  export type User$weldPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    where?: WeldPassWhereInput
    orderBy?: WeldPassOrderByWithRelationInput | WeldPassOrderByWithRelationInput[]
    cursor?: WeldPassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeldPassScalarFieldEnum | WeldPassScalarFieldEnum[]
  }

  /**
   * User.inspections
   */
  export type User$inspectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    where?: InspectionWhereInput
    orderBy?: InspectionOrderByWithRelationInput | InspectionOrderByWithRelationInput[]
    cursor?: InspectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InspectionScalarFieldEnum | InspectionScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.createdJobs
   */
  export type User$createdJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * User.truckTrips
   */
  export type User$truckTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    where?: TruckTripWhereInput
    orderBy?: TruckTripOrderByWithRelationInput | TruckTripOrderByWithRelationInput[]
    cursor?: TruckTripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckTripScalarFieldEnum | TruckTripScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    permissions: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    permissions?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    permissions: JsonValue
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    permissions?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    permissions?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    permissions?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    permissions?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "permissions", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      permissions: Prisma.JsonValue
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly permissions: FieldRef<"Role", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "createdAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    phone: string | null
    email: string | null
    gstHst: string | null
    pst: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    phone: string | null
    email: string | null
    gstHst: string | null
    pst: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    address: number
    city: number
    province: number
    postal: number
    phone: number
    email: number
    gstHst: number
    pst: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    phone?: true
    email?: true
    gstHst?: true
    pst?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    phone?: true
    email?: true
    gstHst?: true
    pst?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    phone?: true
    email?: true
    gstHst?: true
    pst?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    phone: string | null
    email: string | null
    gstHst: string | null
    pst: string | null
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    phone?: boolean
    email?: boolean
    gstHst?: boolean
    pst?: boolean
    users?: boolean | Company$usersArgs<ExtArgs>
    customers?: boolean | Company$customersArgs<ExtArgs>
    vendors?: boolean | Company$vendorsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    phone?: boolean
    email?: boolean
    gstHst?: boolean
    pst?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    phone?: boolean
    email?: boolean
    gstHst?: boolean
    pst?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    phone?: boolean
    email?: boolean
    gstHst?: boolean
    pst?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "city" | "province" | "postal" | "phone" | "email" | "gstHst" | "pst", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Company$usersArgs<ExtArgs>
    customers?: boolean | Company$customersArgs<ExtArgs>
    vendors?: boolean | Company$vendorsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
      vendors: Prisma.$VendorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      city: string | null
      province: string | null
      postal: string | null
      phone: string | null
      email: string | null
      gstHst: string | null
      pst: string | null
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Company$usersArgs<ExtArgs> = {}>(args?: Subset<T, Company$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customers<T extends Company$customersArgs<ExtArgs> = {}>(args?: Subset<T, Company$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vendors<T extends Company$vendorsArgs<ExtArgs> = {}>(args?: Subset<T, Company$vendorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly city: FieldRef<"Company", 'String'>
    readonly province: FieldRef<"Company", 'String'>
    readonly postal: FieldRef<"Company", 'String'>
    readonly phone: FieldRef<"Company", 'String'>
    readonly email: FieldRef<"Company", 'String'>
    readonly gstHst: FieldRef<"Company", 'String'>
    readonly pst: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.users
   */
  export type Company$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Company.customers
   */
  export type Company$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Company.vendors
   */
  export type Company$vendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    cursor?: VendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    customerId: string | null
    quoteId: string | null
    status: $Enums.JobStatus | null
    priority: $Enums.Priority | null
    dueDate: Date | null
    startDate: Date | null
    completedAt: Date | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    customerId: string | null
    quoteId: string | null
    status: $Enums.JobStatus | null
    priority: $Enums.Priority | null
    dueDate: Date | null
    startDate: Date | null
    completedAt: Date | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    title: number
    description: number
    customerId: number
    quoteId: number
    status: number
    priority: number
    dueDate: number
    startDate: number
    completedAt: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    customerId?: true
    quoteId?: true
    status?: true
    priority?: true
    dueDate?: true
    startDate?: true
    completedAt?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    customerId?: true
    quoteId?: true
    status?: true
    priority?: true
    dueDate?: true
    startDate?: true
    completedAt?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    customerId?: true
    quoteId?: true
    status?: true
    priority?: true
    dueDate?: true
    startDate?: true
    completedAt?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    title: string
    description: string | null
    customerId: string
    quoteId: string | null
    status: $Enums.JobStatus
    priority: $Enums.Priority
    dueDate: Date | null
    startDate: Date | null
    completedAt: Date | null
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    customerId?: boolean
    quoteId?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startDate?: boolean
    completedAt?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    quote?: boolean | Job$quoteArgs<ExtArgs>
    phases?: boolean | Job$phasesArgs<ExtArgs>
    drawings?: boolean | Job$drawingsArgs<ExtArgs>
    bomItems?: boolean | Job$bomItemsArgs<ExtArgs>
    timecards?: boolean | Job$timecardsArgs<ExtArgs>
    invoices?: boolean | Job$invoicesArgs<ExtArgs>
    workOrders?: boolean | Job$workOrdersArgs<ExtArgs>
    Inspection?: boolean | Job$InspectionArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    customerId?: boolean
    quoteId?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startDate?: boolean
    completedAt?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    quote?: boolean | Job$quoteArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    customerId?: boolean
    quoteId?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startDate?: boolean
    completedAt?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    quote?: boolean | Job$quoteArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    customerId?: boolean
    quoteId?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    startDate?: boolean
    completedAt?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "customerId" | "quoteId" | "status" | "priority" | "dueDate" | "startDate" | "completedAt" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    quote?: boolean | Job$quoteArgs<ExtArgs>
    phases?: boolean | Job$phasesArgs<ExtArgs>
    drawings?: boolean | Job$drawingsArgs<ExtArgs>
    bomItems?: boolean | Job$bomItemsArgs<ExtArgs>
    timecards?: boolean | Job$timecardsArgs<ExtArgs>
    invoices?: boolean | Job$invoicesArgs<ExtArgs>
    workOrders?: boolean | Job$workOrdersArgs<ExtArgs>
    Inspection?: boolean | Job$InspectionArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    quote?: boolean | Job$quoteArgs<ExtArgs>
  }
  export type JobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    quote?: boolean | Job$quoteArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      quote: Prisma.$QuotePayload<ExtArgs> | null
      phases: Prisma.$JobPhasePayload<ExtArgs>[]
      drawings: Prisma.$DrawingPayload<ExtArgs>[]
      bomItems: Prisma.$BomItemPayload<ExtArgs>[]
      timecards: Prisma.$TimecardPayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
      Inspection: Prisma.$InspectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      customerId: string
      quoteId: string | null
      status: $Enums.JobStatus
      priority: $Enums.Priority
      dueDate: Date | null
      startDate: Date | null
      completedAt: Date | null
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs and returns the data updated in the database.
     * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quote<T extends Job$quoteArgs<ExtArgs> = {}>(args?: Subset<T, Job$quoteArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    phases<T extends Job$phasesArgs<ExtArgs> = {}>(args?: Subset<T, Job$phasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    drawings<T extends Job$drawingsArgs<ExtArgs> = {}>(args?: Subset<T, Job$drawingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bomItems<T extends Job$bomItemsArgs<ExtArgs> = {}>(args?: Subset<T, Job$bomItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timecards<T extends Job$timecardsArgs<ExtArgs> = {}>(args?: Subset<T, Job$timecardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Job$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Job$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workOrders<T extends Job$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Job$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Inspection<T extends Job$InspectionArgs<ExtArgs> = {}>(args?: Subset<T, Job$InspectionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly title: FieldRef<"Job", 'String'>
    readonly description: FieldRef<"Job", 'String'>
    readonly customerId: FieldRef<"Job", 'String'>
    readonly quoteId: FieldRef<"Job", 'String'>
    readonly status: FieldRef<"Job", 'JobStatus'>
    readonly priority: FieldRef<"Job", 'Priority'>
    readonly dueDate: FieldRef<"Job", 'DateTime'>
    readonly startDate: FieldRef<"Job", 'DateTime'>
    readonly completedAt: FieldRef<"Job", 'DateTime'>
    readonly createdById: FieldRef<"Job", 'String'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job updateManyAndReturn
   */
  export type JobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.quote
   */
  export type Job$quoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    where?: QuoteWhereInput
  }

  /**
   * Job.phases
   */
  export type Job$phasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    where?: JobPhaseWhereInput
    orderBy?: JobPhaseOrderByWithRelationInput | JobPhaseOrderByWithRelationInput[]
    cursor?: JobPhaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPhaseScalarFieldEnum | JobPhaseScalarFieldEnum[]
  }

  /**
   * Job.drawings
   */
  export type Job$drawingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    where?: DrawingWhereInput
    orderBy?: DrawingOrderByWithRelationInput | DrawingOrderByWithRelationInput[]
    cursor?: DrawingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DrawingScalarFieldEnum | DrawingScalarFieldEnum[]
  }

  /**
   * Job.bomItems
   */
  export type Job$bomItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    where?: BomItemWhereInput
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    cursor?: BomItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * Job.timecards
   */
  export type Job$timecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    where?: TimecardWhereInput
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    cursor?: TimecardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimecardScalarFieldEnum | TimecardScalarFieldEnum[]
  }

  /**
   * Job.invoices
   */
  export type Job$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Job.workOrders
   */
  export type Job$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * Job.Inspection
   */
  export type Job$InspectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    where?: InspectionWhereInput
    orderBy?: InspectionOrderByWithRelationInput | InspectionOrderByWithRelationInput[]
    cursor?: InspectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InspectionScalarFieldEnum | InspectionScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model JobPhase
   */

  export type AggregateJobPhase = {
    _count: JobPhaseCountAggregateOutputType | null
    _avg: JobPhaseAvgAggregateOutputType | null
    _sum: JobPhaseSumAggregateOutputType | null
    _min: JobPhaseMinAggregateOutputType | null
    _max: JobPhaseMaxAggregateOutputType | null
  }

  export type JobPhaseAvgAggregateOutputType = {
    sequence: number | null
  }

  export type JobPhaseSumAggregateOutputType = {
    sequence: number | null
  }

  export type JobPhaseMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    name: string | null
    sequence: number | null
    status: $Enums.PhaseStatus | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobPhaseMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    name: string | null
    sequence: number | null
    status: $Enums.PhaseStatus | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobPhaseCountAggregateOutputType = {
    id: number
    jobId: number
    name: number
    sequence: number
    status: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobPhaseAvgAggregateInputType = {
    sequence?: true
  }

  export type JobPhaseSumAggregateInputType = {
    sequence?: true
  }

  export type JobPhaseMinAggregateInputType = {
    id?: true
    jobId?: true
    name?: true
    sequence?: true
    status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobPhaseMaxAggregateInputType = {
    id?: true
    jobId?: true
    name?: true
    sequence?: true
    status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobPhaseCountAggregateInputType = {
    id?: true
    jobId?: true
    name?: true
    sequence?: true
    status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobPhaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPhase to aggregate.
     */
    where?: JobPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPhases to fetch.
     */
    orderBy?: JobPhaseOrderByWithRelationInput | JobPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobPhases
    **/
    _count?: true | JobPhaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobPhaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobPhaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobPhaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobPhaseMaxAggregateInputType
  }

  export type GetJobPhaseAggregateType<T extends JobPhaseAggregateArgs> = {
        [P in keyof T & keyof AggregateJobPhase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobPhase[P]>
      : GetScalarType<T[P], AggregateJobPhase[P]>
  }




  export type JobPhaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPhaseWhereInput
    orderBy?: JobPhaseOrderByWithAggregationInput | JobPhaseOrderByWithAggregationInput[]
    by: JobPhaseScalarFieldEnum[] | JobPhaseScalarFieldEnum
    having?: JobPhaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobPhaseCountAggregateInputType | true
    _avg?: JobPhaseAvgAggregateInputType
    _sum?: JobPhaseSumAggregateInputType
    _min?: JobPhaseMinAggregateInputType
    _max?: JobPhaseMaxAggregateInputType
  }

  export type JobPhaseGroupByOutputType = {
    id: string
    jobId: string
    name: string
    sequence: number
    status: $Enums.PhaseStatus
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: JobPhaseCountAggregateOutputType | null
    _avg: JobPhaseAvgAggregateOutputType | null
    _sum: JobPhaseSumAggregateOutputType | null
    _min: JobPhaseMinAggregateOutputType | null
    _max: JobPhaseMaxAggregateOutputType | null
  }

  type GetJobPhaseGroupByPayload<T extends JobPhaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobPhaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobPhaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobPhaseGroupByOutputType[P]>
            : GetScalarType<T[P], JobPhaseGroupByOutputType[P]>
        }
      >
    >


  export type JobPhaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    name?: boolean
    sequence?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    tasks?: boolean | JobPhase$tasksArgs<ExtArgs>
    _count?: boolean | JobPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPhase"]>

  export type JobPhaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    name?: boolean
    sequence?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPhase"]>

  export type JobPhaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    name?: boolean
    sequence?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPhase"]>

  export type JobPhaseSelectScalar = {
    id?: boolean
    jobId?: boolean
    name?: boolean
    sequence?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobPhaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "name" | "sequence" | "status" | "startDate" | "endDate" | "createdAt" | "updatedAt", ExtArgs["result"]["jobPhase"]>
  export type JobPhaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    tasks?: boolean | JobPhase$tasksArgs<ExtArgs>
    _count?: boolean | JobPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobPhaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobPhaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $JobPhasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobPhase"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      name: string
      sequence: number
      status: $Enums.PhaseStatus
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobPhase"]>
    composites: {}
  }

  type JobPhaseGetPayload<S extends boolean | null | undefined | JobPhaseDefaultArgs> = $Result.GetResult<Prisma.$JobPhasePayload, S>

  type JobPhaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobPhaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobPhaseCountAggregateInputType | true
    }

  export interface JobPhaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobPhase'], meta: { name: 'JobPhase' } }
    /**
     * Find zero or one JobPhase that matches the filter.
     * @param {JobPhaseFindUniqueArgs} args - Arguments to find a JobPhase
     * @example
     * // Get one JobPhase
     * const jobPhase = await prisma.jobPhase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobPhaseFindUniqueArgs>(args: SelectSubset<T, JobPhaseFindUniqueArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobPhase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobPhaseFindUniqueOrThrowArgs} args - Arguments to find a JobPhase
     * @example
     * // Get one JobPhase
     * const jobPhase = await prisma.jobPhase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobPhaseFindUniqueOrThrowArgs>(args: SelectSubset<T, JobPhaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobPhase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPhaseFindFirstArgs} args - Arguments to find a JobPhase
     * @example
     * // Get one JobPhase
     * const jobPhase = await prisma.jobPhase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobPhaseFindFirstArgs>(args?: SelectSubset<T, JobPhaseFindFirstArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobPhase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPhaseFindFirstOrThrowArgs} args - Arguments to find a JobPhase
     * @example
     * // Get one JobPhase
     * const jobPhase = await prisma.jobPhase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobPhaseFindFirstOrThrowArgs>(args?: SelectSubset<T, JobPhaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobPhases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPhaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobPhases
     * const jobPhases = await prisma.jobPhase.findMany()
     * 
     * // Get first 10 JobPhases
     * const jobPhases = await prisma.jobPhase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobPhaseWithIdOnly = await prisma.jobPhase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobPhaseFindManyArgs>(args?: SelectSubset<T, JobPhaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobPhase.
     * @param {JobPhaseCreateArgs} args - Arguments to create a JobPhase.
     * @example
     * // Create one JobPhase
     * const JobPhase = await prisma.jobPhase.create({
     *   data: {
     *     // ... data to create a JobPhase
     *   }
     * })
     * 
     */
    create<T extends JobPhaseCreateArgs>(args: SelectSubset<T, JobPhaseCreateArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobPhases.
     * @param {JobPhaseCreateManyArgs} args - Arguments to create many JobPhases.
     * @example
     * // Create many JobPhases
     * const jobPhase = await prisma.jobPhase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobPhaseCreateManyArgs>(args?: SelectSubset<T, JobPhaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobPhases and returns the data saved in the database.
     * @param {JobPhaseCreateManyAndReturnArgs} args - Arguments to create many JobPhases.
     * @example
     * // Create many JobPhases
     * const jobPhase = await prisma.jobPhase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobPhases and only return the `id`
     * const jobPhaseWithIdOnly = await prisma.jobPhase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobPhaseCreateManyAndReturnArgs>(args?: SelectSubset<T, JobPhaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobPhase.
     * @param {JobPhaseDeleteArgs} args - Arguments to delete one JobPhase.
     * @example
     * // Delete one JobPhase
     * const JobPhase = await prisma.jobPhase.delete({
     *   where: {
     *     // ... filter to delete one JobPhase
     *   }
     * })
     * 
     */
    delete<T extends JobPhaseDeleteArgs>(args: SelectSubset<T, JobPhaseDeleteArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobPhase.
     * @param {JobPhaseUpdateArgs} args - Arguments to update one JobPhase.
     * @example
     * // Update one JobPhase
     * const jobPhase = await prisma.jobPhase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobPhaseUpdateArgs>(args: SelectSubset<T, JobPhaseUpdateArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobPhases.
     * @param {JobPhaseDeleteManyArgs} args - Arguments to filter JobPhases to delete.
     * @example
     * // Delete a few JobPhases
     * const { count } = await prisma.jobPhase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobPhaseDeleteManyArgs>(args?: SelectSubset<T, JobPhaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPhaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobPhases
     * const jobPhase = await prisma.jobPhase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobPhaseUpdateManyArgs>(args: SelectSubset<T, JobPhaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPhases and returns the data updated in the database.
     * @param {JobPhaseUpdateManyAndReturnArgs} args - Arguments to update many JobPhases.
     * @example
     * // Update many JobPhases
     * const jobPhase = await prisma.jobPhase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobPhases and only return the `id`
     * const jobPhaseWithIdOnly = await prisma.jobPhase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobPhaseUpdateManyAndReturnArgs>(args: SelectSubset<T, JobPhaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobPhase.
     * @param {JobPhaseUpsertArgs} args - Arguments to update or create a JobPhase.
     * @example
     * // Update or create a JobPhase
     * const jobPhase = await prisma.jobPhase.upsert({
     *   create: {
     *     // ... data to create a JobPhase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobPhase we want to update
     *   }
     * })
     */
    upsert<T extends JobPhaseUpsertArgs>(args: SelectSubset<T, JobPhaseUpsertArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPhaseCountArgs} args - Arguments to filter JobPhases to count.
     * @example
     * // Count the number of JobPhases
     * const count = await prisma.jobPhase.count({
     *   where: {
     *     // ... the filter for the JobPhases we want to count
     *   }
     * })
    **/
    count<T extends JobPhaseCountArgs>(
      args?: Subset<T, JobPhaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobPhaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPhaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobPhaseAggregateArgs>(args: Subset<T, JobPhaseAggregateArgs>): Prisma.PrismaPromise<GetJobPhaseAggregateType<T>>

    /**
     * Group by JobPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPhaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobPhaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobPhaseGroupByArgs['orderBy'] }
        : { orderBy?: JobPhaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobPhaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobPhaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobPhase model
   */
  readonly fields: JobPhaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobPhase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobPhaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends JobPhase$tasksArgs<ExtArgs> = {}>(args?: Subset<T, JobPhase$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobPhase model
   */
  interface JobPhaseFieldRefs {
    readonly id: FieldRef<"JobPhase", 'String'>
    readonly jobId: FieldRef<"JobPhase", 'String'>
    readonly name: FieldRef<"JobPhase", 'String'>
    readonly sequence: FieldRef<"JobPhase", 'Int'>
    readonly status: FieldRef<"JobPhase", 'PhaseStatus'>
    readonly startDate: FieldRef<"JobPhase", 'DateTime'>
    readonly endDate: FieldRef<"JobPhase", 'DateTime'>
    readonly createdAt: FieldRef<"JobPhase", 'DateTime'>
    readonly updatedAt: FieldRef<"JobPhase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobPhase findUnique
   */
  export type JobPhaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * Filter, which JobPhase to fetch.
     */
    where: JobPhaseWhereUniqueInput
  }

  /**
   * JobPhase findUniqueOrThrow
   */
  export type JobPhaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * Filter, which JobPhase to fetch.
     */
    where: JobPhaseWhereUniqueInput
  }

  /**
   * JobPhase findFirst
   */
  export type JobPhaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * Filter, which JobPhase to fetch.
     */
    where?: JobPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPhases to fetch.
     */
    orderBy?: JobPhaseOrderByWithRelationInput | JobPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPhases.
     */
    cursor?: JobPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPhases.
     */
    distinct?: JobPhaseScalarFieldEnum | JobPhaseScalarFieldEnum[]
  }

  /**
   * JobPhase findFirstOrThrow
   */
  export type JobPhaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * Filter, which JobPhase to fetch.
     */
    where?: JobPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPhases to fetch.
     */
    orderBy?: JobPhaseOrderByWithRelationInput | JobPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPhases.
     */
    cursor?: JobPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPhases.
     */
    distinct?: JobPhaseScalarFieldEnum | JobPhaseScalarFieldEnum[]
  }

  /**
   * JobPhase findMany
   */
  export type JobPhaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * Filter, which JobPhases to fetch.
     */
    where?: JobPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPhases to fetch.
     */
    orderBy?: JobPhaseOrderByWithRelationInput | JobPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobPhases.
     */
    cursor?: JobPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPhases.
     */
    skip?: number
    distinct?: JobPhaseScalarFieldEnum | JobPhaseScalarFieldEnum[]
  }

  /**
   * JobPhase create
   */
  export type JobPhaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * The data needed to create a JobPhase.
     */
    data: XOR<JobPhaseCreateInput, JobPhaseUncheckedCreateInput>
  }

  /**
   * JobPhase createMany
   */
  export type JobPhaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobPhases.
     */
    data: JobPhaseCreateManyInput | JobPhaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobPhase createManyAndReturn
   */
  export type JobPhaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * The data used to create many JobPhases.
     */
    data: JobPhaseCreateManyInput | JobPhaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobPhase update
   */
  export type JobPhaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * The data needed to update a JobPhase.
     */
    data: XOR<JobPhaseUpdateInput, JobPhaseUncheckedUpdateInput>
    /**
     * Choose, which JobPhase to update.
     */
    where: JobPhaseWhereUniqueInput
  }

  /**
   * JobPhase updateMany
   */
  export type JobPhaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobPhases.
     */
    data: XOR<JobPhaseUpdateManyMutationInput, JobPhaseUncheckedUpdateManyInput>
    /**
     * Filter which JobPhases to update
     */
    where?: JobPhaseWhereInput
    /**
     * Limit how many JobPhases to update.
     */
    limit?: number
  }

  /**
   * JobPhase updateManyAndReturn
   */
  export type JobPhaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * The data used to update JobPhases.
     */
    data: XOR<JobPhaseUpdateManyMutationInput, JobPhaseUncheckedUpdateManyInput>
    /**
     * Filter which JobPhases to update
     */
    where?: JobPhaseWhereInput
    /**
     * Limit how many JobPhases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobPhase upsert
   */
  export type JobPhaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * The filter to search for the JobPhase to update in case it exists.
     */
    where: JobPhaseWhereUniqueInput
    /**
     * In case the JobPhase found by the `where` argument doesn't exist, create a new JobPhase with this data.
     */
    create: XOR<JobPhaseCreateInput, JobPhaseUncheckedCreateInput>
    /**
     * In case the JobPhase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobPhaseUpdateInput, JobPhaseUncheckedUpdateInput>
  }

  /**
   * JobPhase delete
   */
  export type JobPhaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
    /**
     * Filter which JobPhase to delete.
     */
    where: JobPhaseWhereUniqueInput
  }

  /**
   * JobPhase deleteMany
   */
  export type JobPhaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPhases to delete
     */
    where?: JobPhaseWhereInput
    /**
     * Limit how many JobPhases to delete.
     */
    limit?: number
  }

  /**
   * JobPhase.tasks
   */
  export type JobPhase$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * JobPhase without action
   */
  export type JobPhaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPhase
     */
    select?: JobPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPhase
     */
    omit?: JobPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPhaseInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
  }

  export type TaskSumAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    phaseId: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    estimatedHours: number | null
    actualHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    phaseId: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    estimatedHours: number | null
    actualHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    phaseId: number
    title: number
    description: number
    status: number
    estimatedHours: number
    actualHours: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
  }

  export type TaskSumAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    phaseId?: true
    title?: true
    description?: true
    status?: true
    estimatedHours?: true
    actualHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    phaseId?: true
    title?: true
    description?: true
    status?: true
    estimatedHours?: true
    actualHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    phaseId?: true
    title?: true
    description?: true
    status?: true
    estimatedHours?: true
    actualHours?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    phaseId: string
    title: string
    description: string | null
    status: $Enums.TaskStatus
    estimatedHours: number | null
    actualHours: number | null
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phaseId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phase?: boolean | JobPhaseDefaultArgs<ExtArgs>
    timecards?: boolean | Task$timecardsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phaseId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phase?: boolean | JobPhaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phaseId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phase?: boolean | JobPhaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    phaseId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "phaseId" | "title" | "description" | "status" | "estimatedHours" | "actualHours" | "createdAt" | "updatedAt", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phase?: boolean | JobPhaseDefaultArgs<ExtArgs>
    timecards?: boolean | Task$timecardsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phase?: boolean | JobPhaseDefaultArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phase?: boolean | JobPhaseDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      phase: Prisma.$JobPhasePayload<ExtArgs>
      timecards: Prisma.$TimecardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      phaseId: string
      title: string
      description: string | null
      status: $Enums.TaskStatus
      estimatedHours: number | null
      actualHours: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    phase<T extends JobPhaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPhaseDefaultArgs<ExtArgs>>): Prisma__JobPhaseClient<$Result.GetResult<Prisma.$JobPhasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    timecards<T extends Task$timecardsArgs<ExtArgs> = {}>(args?: Subset<T, Task$timecardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly phaseId: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly estimatedHours: FieldRef<"Task", 'Float'>
    readonly actualHours: FieldRef<"Task", 'Float'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.timecards
   */
  export type Task$timecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    where?: TimecardWhereInput
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    cursor?: TimecardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimecardScalarFieldEnum | TimecardScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Drawing
   */

  export type AggregateDrawing = {
    _count: DrawingCountAggregateOutputType | null
    _min: DrawingMinAggregateOutputType | null
    _max: DrawingMaxAggregateOutputType | null
  }

  export type DrawingMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    filename: string | null
    fileUrl: string | null
    fileType: string | null
    revision: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    approvedBy: string | null
    createdAt: Date | null
  }

  export type DrawingMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    filename: string | null
    fileUrl: string | null
    fileType: string | null
    revision: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    approvedBy: string | null
    createdAt: Date | null
  }

  export type DrawingCountAggregateOutputType = {
    id: number
    jobId: number
    filename: number
    fileUrl: number
    fileType: number
    revision: number
    isApproved: number
    approvedAt: number
    approvedBy: number
    createdAt: number
    _all: number
  }


  export type DrawingMinAggregateInputType = {
    id?: true
    jobId?: true
    filename?: true
    fileUrl?: true
    fileType?: true
    revision?: true
    isApproved?: true
    approvedAt?: true
    approvedBy?: true
    createdAt?: true
  }

  export type DrawingMaxAggregateInputType = {
    id?: true
    jobId?: true
    filename?: true
    fileUrl?: true
    fileType?: true
    revision?: true
    isApproved?: true
    approvedAt?: true
    approvedBy?: true
    createdAt?: true
  }

  export type DrawingCountAggregateInputType = {
    id?: true
    jobId?: true
    filename?: true
    fileUrl?: true
    fileType?: true
    revision?: true
    isApproved?: true
    approvedAt?: true
    approvedBy?: true
    createdAt?: true
    _all?: true
  }

  export type DrawingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Drawing to aggregate.
     */
    where?: DrawingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drawings to fetch.
     */
    orderBy?: DrawingOrderByWithRelationInput | DrawingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DrawingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drawings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drawings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Drawings
    **/
    _count?: true | DrawingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DrawingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DrawingMaxAggregateInputType
  }

  export type GetDrawingAggregateType<T extends DrawingAggregateArgs> = {
        [P in keyof T & keyof AggregateDrawing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrawing[P]>
      : GetScalarType<T[P], AggregateDrawing[P]>
  }




  export type DrawingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DrawingWhereInput
    orderBy?: DrawingOrderByWithAggregationInput | DrawingOrderByWithAggregationInput[]
    by: DrawingScalarFieldEnum[] | DrawingScalarFieldEnum
    having?: DrawingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DrawingCountAggregateInputType | true
    _min?: DrawingMinAggregateInputType
    _max?: DrawingMaxAggregateInputType
  }

  export type DrawingGroupByOutputType = {
    id: string
    jobId: string
    filename: string
    fileUrl: string
    fileType: string
    revision: string
    isApproved: boolean
    approvedAt: Date | null
    approvedBy: string | null
    createdAt: Date
    _count: DrawingCountAggregateOutputType | null
    _min: DrawingMinAggregateOutputType | null
    _max: DrawingMaxAggregateOutputType | null
  }

  type GetDrawingGroupByPayload<T extends DrawingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DrawingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DrawingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DrawingGroupByOutputType[P]>
            : GetScalarType<T[P], DrawingGroupByOutputType[P]>
        }
      >
    >


  export type DrawingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    filename?: boolean
    fileUrl?: boolean
    fileType?: boolean
    revision?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drawing"]>

  export type DrawingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    filename?: boolean
    fileUrl?: boolean
    fileType?: boolean
    revision?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drawing"]>

  export type DrawingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    filename?: boolean
    fileUrl?: boolean
    fileType?: boolean
    revision?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drawing"]>

  export type DrawingSelectScalar = {
    id?: boolean
    jobId?: boolean
    filename?: boolean
    fileUrl?: boolean
    fileType?: boolean
    revision?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
  }

  export type DrawingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "filename" | "fileUrl" | "fileType" | "revision" | "isApproved" | "approvedAt" | "approvedBy" | "createdAt", ExtArgs["result"]["drawing"]>
  export type DrawingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type DrawingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type DrawingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $DrawingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Drawing"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      filename: string
      fileUrl: string
      fileType: string
      revision: string
      isApproved: boolean
      approvedAt: Date | null
      approvedBy: string | null
      createdAt: Date
    }, ExtArgs["result"]["drawing"]>
    composites: {}
  }

  type DrawingGetPayload<S extends boolean | null | undefined | DrawingDefaultArgs> = $Result.GetResult<Prisma.$DrawingPayload, S>

  type DrawingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DrawingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DrawingCountAggregateInputType | true
    }

  export interface DrawingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Drawing'], meta: { name: 'Drawing' } }
    /**
     * Find zero or one Drawing that matches the filter.
     * @param {DrawingFindUniqueArgs} args - Arguments to find a Drawing
     * @example
     * // Get one Drawing
     * const drawing = await prisma.drawing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DrawingFindUniqueArgs>(args: SelectSubset<T, DrawingFindUniqueArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Drawing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DrawingFindUniqueOrThrowArgs} args - Arguments to find a Drawing
     * @example
     * // Get one Drawing
     * const drawing = await prisma.drawing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DrawingFindUniqueOrThrowArgs>(args: SelectSubset<T, DrawingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Drawing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawingFindFirstArgs} args - Arguments to find a Drawing
     * @example
     * // Get one Drawing
     * const drawing = await prisma.drawing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DrawingFindFirstArgs>(args?: SelectSubset<T, DrawingFindFirstArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Drawing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawingFindFirstOrThrowArgs} args - Arguments to find a Drawing
     * @example
     * // Get one Drawing
     * const drawing = await prisma.drawing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DrawingFindFirstOrThrowArgs>(args?: SelectSubset<T, DrawingFindFirstOrThrowArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Drawings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Drawings
     * const drawings = await prisma.drawing.findMany()
     * 
     * // Get first 10 Drawings
     * const drawings = await prisma.drawing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const drawingWithIdOnly = await prisma.drawing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DrawingFindManyArgs>(args?: SelectSubset<T, DrawingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Drawing.
     * @param {DrawingCreateArgs} args - Arguments to create a Drawing.
     * @example
     * // Create one Drawing
     * const Drawing = await prisma.drawing.create({
     *   data: {
     *     // ... data to create a Drawing
     *   }
     * })
     * 
     */
    create<T extends DrawingCreateArgs>(args: SelectSubset<T, DrawingCreateArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Drawings.
     * @param {DrawingCreateManyArgs} args - Arguments to create many Drawings.
     * @example
     * // Create many Drawings
     * const drawing = await prisma.drawing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DrawingCreateManyArgs>(args?: SelectSubset<T, DrawingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Drawings and returns the data saved in the database.
     * @param {DrawingCreateManyAndReturnArgs} args - Arguments to create many Drawings.
     * @example
     * // Create many Drawings
     * const drawing = await prisma.drawing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Drawings and only return the `id`
     * const drawingWithIdOnly = await prisma.drawing.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DrawingCreateManyAndReturnArgs>(args?: SelectSubset<T, DrawingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Drawing.
     * @param {DrawingDeleteArgs} args - Arguments to delete one Drawing.
     * @example
     * // Delete one Drawing
     * const Drawing = await prisma.drawing.delete({
     *   where: {
     *     // ... filter to delete one Drawing
     *   }
     * })
     * 
     */
    delete<T extends DrawingDeleteArgs>(args: SelectSubset<T, DrawingDeleteArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Drawing.
     * @param {DrawingUpdateArgs} args - Arguments to update one Drawing.
     * @example
     * // Update one Drawing
     * const drawing = await prisma.drawing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DrawingUpdateArgs>(args: SelectSubset<T, DrawingUpdateArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Drawings.
     * @param {DrawingDeleteManyArgs} args - Arguments to filter Drawings to delete.
     * @example
     * // Delete a few Drawings
     * const { count } = await prisma.drawing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DrawingDeleteManyArgs>(args?: SelectSubset<T, DrawingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drawings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Drawings
     * const drawing = await prisma.drawing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DrawingUpdateManyArgs>(args: SelectSubset<T, DrawingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drawings and returns the data updated in the database.
     * @param {DrawingUpdateManyAndReturnArgs} args - Arguments to update many Drawings.
     * @example
     * // Update many Drawings
     * const drawing = await prisma.drawing.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Drawings and only return the `id`
     * const drawingWithIdOnly = await prisma.drawing.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DrawingUpdateManyAndReturnArgs>(args: SelectSubset<T, DrawingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Drawing.
     * @param {DrawingUpsertArgs} args - Arguments to update or create a Drawing.
     * @example
     * // Update or create a Drawing
     * const drawing = await prisma.drawing.upsert({
     *   create: {
     *     // ... data to create a Drawing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Drawing we want to update
     *   }
     * })
     */
    upsert<T extends DrawingUpsertArgs>(args: SelectSubset<T, DrawingUpsertArgs<ExtArgs>>): Prisma__DrawingClient<$Result.GetResult<Prisma.$DrawingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Drawings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawingCountArgs} args - Arguments to filter Drawings to count.
     * @example
     * // Count the number of Drawings
     * const count = await prisma.drawing.count({
     *   where: {
     *     // ... the filter for the Drawings we want to count
     *   }
     * })
    **/
    count<T extends DrawingCountArgs>(
      args?: Subset<T, DrawingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DrawingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Drawing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DrawingAggregateArgs>(args: Subset<T, DrawingAggregateArgs>): Prisma.PrismaPromise<GetDrawingAggregateType<T>>

    /**
     * Group by Drawing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DrawingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DrawingGroupByArgs['orderBy'] }
        : { orderBy?: DrawingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DrawingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrawingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Drawing model
   */
  readonly fields: DrawingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Drawing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DrawingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Drawing model
   */
  interface DrawingFieldRefs {
    readonly id: FieldRef<"Drawing", 'String'>
    readonly jobId: FieldRef<"Drawing", 'String'>
    readonly filename: FieldRef<"Drawing", 'String'>
    readonly fileUrl: FieldRef<"Drawing", 'String'>
    readonly fileType: FieldRef<"Drawing", 'String'>
    readonly revision: FieldRef<"Drawing", 'String'>
    readonly isApproved: FieldRef<"Drawing", 'Boolean'>
    readonly approvedAt: FieldRef<"Drawing", 'DateTime'>
    readonly approvedBy: FieldRef<"Drawing", 'String'>
    readonly createdAt: FieldRef<"Drawing", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Drawing findUnique
   */
  export type DrawingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * Filter, which Drawing to fetch.
     */
    where: DrawingWhereUniqueInput
  }

  /**
   * Drawing findUniqueOrThrow
   */
  export type DrawingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * Filter, which Drawing to fetch.
     */
    where: DrawingWhereUniqueInput
  }

  /**
   * Drawing findFirst
   */
  export type DrawingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * Filter, which Drawing to fetch.
     */
    where?: DrawingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drawings to fetch.
     */
    orderBy?: DrawingOrderByWithRelationInput | DrawingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drawings.
     */
    cursor?: DrawingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drawings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drawings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drawings.
     */
    distinct?: DrawingScalarFieldEnum | DrawingScalarFieldEnum[]
  }

  /**
   * Drawing findFirstOrThrow
   */
  export type DrawingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * Filter, which Drawing to fetch.
     */
    where?: DrawingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drawings to fetch.
     */
    orderBy?: DrawingOrderByWithRelationInput | DrawingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drawings.
     */
    cursor?: DrawingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drawings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drawings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drawings.
     */
    distinct?: DrawingScalarFieldEnum | DrawingScalarFieldEnum[]
  }

  /**
   * Drawing findMany
   */
  export type DrawingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * Filter, which Drawings to fetch.
     */
    where?: DrawingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drawings to fetch.
     */
    orderBy?: DrawingOrderByWithRelationInput | DrawingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Drawings.
     */
    cursor?: DrawingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drawings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drawings.
     */
    skip?: number
    distinct?: DrawingScalarFieldEnum | DrawingScalarFieldEnum[]
  }

  /**
   * Drawing create
   */
  export type DrawingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * The data needed to create a Drawing.
     */
    data: XOR<DrawingCreateInput, DrawingUncheckedCreateInput>
  }

  /**
   * Drawing createMany
   */
  export type DrawingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Drawings.
     */
    data: DrawingCreateManyInput | DrawingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Drawing createManyAndReturn
   */
  export type DrawingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * The data used to create many Drawings.
     */
    data: DrawingCreateManyInput | DrawingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Drawing update
   */
  export type DrawingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * The data needed to update a Drawing.
     */
    data: XOR<DrawingUpdateInput, DrawingUncheckedUpdateInput>
    /**
     * Choose, which Drawing to update.
     */
    where: DrawingWhereUniqueInput
  }

  /**
   * Drawing updateMany
   */
  export type DrawingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Drawings.
     */
    data: XOR<DrawingUpdateManyMutationInput, DrawingUncheckedUpdateManyInput>
    /**
     * Filter which Drawings to update
     */
    where?: DrawingWhereInput
    /**
     * Limit how many Drawings to update.
     */
    limit?: number
  }

  /**
   * Drawing updateManyAndReturn
   */
  export type DrawingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * The data used to update Drawings.
     */
    data: XOR<DrawingUpdateManyMutationInput, DrawingUncheckedUpdateManyInput>
    /**
     * Filter which Drawings to update
     */
    where?: DrawingWhereInput
    /**
     * Limit how many Drawings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Drawing upsert
   */
  export type DrawingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * The filter to search for the Drawing to update in case it exists.
     */
    where: DrawingWhereUniqueInput
    /**
     * In case the Drawing found by the `where` argument doesn't exist, create a new Drawing with this data.
     */
    create: XOR<DrawingCreateInput, DrawingUncheckedCreateInput>
    /**
     * In case the Drawing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DrawingUpdateInput, DrawingUncheckedUpdateInput>
  }

  /**
   * Drawing delete
   */
  export type DrawingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
    /**
     * Filter which Drawing to delete.
     */
    where: DrawingWhereUniqueInput
  }

  /**
   * Drawing deleteMany
   */
  export type DrawingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Drawings to delete
     */
    where?: DrawingWhereInput
    /**
     * Limit how many Drawings to delete.
     */
    limit?: number
  }

  /**
   * Drawing without action
   */
  export type DrawingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Drawing
     */
    select?: DrawingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Drawing
     */
    omit?: DrawingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawingInclude<ExtArgs> | null
  }


  /**
   * Model BomItem
   */

  export type AggregateBomItem = {
    _count: BomItemCountAggregateOutputType | null
    _avg: BomItemAvgAggregateOutputType | null
    _sum: BomItemSumAggregateOutputType | null
    _min: BomItemMinAggregateOutputType | null
    _max: BomItemMaxAggregateOutputType | null
  }

  export type BomItemAvgAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
  }

  export type BomItemSumAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
  }

  export type BomItemMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    materialId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitCost: number | null
    totalCost: number | null
    isOrdered: boolean | null
    createdAt: Date | null
  }

  export type BomItemMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    materialId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitCost: number | null
    totalCost: number | null
    isOrdered: boolean | null
    createdAt: Date | null
  }

  export type BomItemCountAggregateOutputType = {
    id: number
    jobId: number
    materialId: number
    description: number
    quantity: number
    unit: number
    unitCost: number
    totalCost: number
    isOrdered: number
    createdAt: number
    _all: number
  }


  export type BomItemAvgAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type BomItemSumAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
  }

  export type BomItemMinAggregateInputType = {
    id?: true
    jobId?: true
    materialId?: true
    description?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    isOrdered?: true
    createdAt?: true
  }

  export type BomItemMaxAggregateInputType = {
    id?: true
    jobId?: true
    materialId?: true
    description?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    isOrdered?: true
    createdAt?: true
  }

  export type BomItemCountAggregateInputType = {
    id?: true
    jobId?: true
    materialId?: true
    description?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    isOrdered?: true
    createdAt?: true
    _all?: true
  }

  export type BomItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BomItem to aggregate.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BomItems
    **/
    _count?: true | BomItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BomItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BomItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BomItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BomItemMaxAggregateInputType
  }

  export type GetBomItemAggregateType<T extends BomItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBomItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBomItem[P]>
      : GetScalarType<T[P], AggregateBomItem[P]>
  }




  export type BomItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BomItemWhereInput
    orderBy?: BomItemOrderByWithAggregationInput | BomItemOrderByWithAggregationInput[]
    by: BomItemScalarFieldEnum[] | BomItemScalarFieldEnum
    having?: BomItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BomItemCountAggregateInputType | true
    _avg?: BomItemAvgAggregateInputType
    _sum?: BomItemSumAggregateInputType
    _min?: BomItemMinAggregateInputType
    _max?: BomItemMaxAggregateInputType
  }

  export type BomItemGroupByOutputType = {
    id: string
    jobId: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost: number | null
    totalCost: number | null
    isOrdered: boolean
    createdAt: Date
    _count: BomItemCountAggregateOutputType | null
    _avg: BomItemAvgAggregateOutputType | null
    _sum: BomItemSumAggregateOutputType | null
    _min: BomItemMinAggregateOutputType | null
    _max: BomItemMaxAggregateOutputType | null
  }

  type GetBomItemGroupByPayload<T extends BomItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BomItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BomItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BomItemGroupByOutputType[P]>
            : GetScalarType<T[P], BomItemGroupByOutputType[P]>
        }
      >
    >


  export type BomItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    isOrdered?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bomItem"]>

  export type BomItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    isOrdered?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bomItem"]>

  export type BomItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    isOrdered?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bomItem"]>

  export type BomItemSelectScalar = {
    id?: boolean
    jobId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    isOrdered?: boolean
    createdAt?: boolean
  }

  export type BomItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "materialId" | "description" | "quantity" | "unit" | "unitCost" | "totalCost" | "isOrdered" | "createdAt", ExtArgs["result"]["bomItem"]>
  export type BomItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }
  export type BomItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }
  export type BomItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }

  export type $BomItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BomItem"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      material: Prisma.$MaterialPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      materialId: string
      description: string
      quantity: number
      unit: string
      unitCost: number | null
      totalCost: number | null
      isOrdered: boolean
      createdAt: Date
    }, ExtArgs["result"]["bomItem"]>
    composites: {}
  }

  type BomItemGetPayload<S extends boolean | null | undefined | BomItemDefaultArgs> = $Result.GetResult<Prisma.$BomItemPayload, S>

  type BomItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BomItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BomItemCountAggregateInputType | true
    }

  export interface BomItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BomItem'], meta: { name: 'BomItem' } }
    /**
     * Find zero or one BomItem that matches the filter.
     * @param {BomItemFindUniqueArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BomItemFindUniqueArgs>(args: SelectSubset<T, BomItemFindUniqueArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BomItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BomItemFindUniqueOrThrowArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BomItemFindUniqueOrThrowArgs>(args: SelectSubset<T, BomItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BomItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemFindFirstArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BomItemFindFirstArgs>(args?: SelectSubset<T, BomItemFindFirstArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BomItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemFindFirstOrThrowArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BomItemFindFirstOrThrowArgs>(args?: SelectSubset<T, BomItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BomItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BomItems
     * const bomItems = await prisma.bomItem.findMany()
     * 
     * // Get first 10 BomItems
     * const bomItems = await prisma.bomItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bomItemWithIdOnly = await prisma.bomItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BomItemFindManyArgs>(args?: SelectSubset<T, BomItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BomItem.
     * @param {BomItemCreateArgs} args - Arguments to create a BomItem.
     * @example
     * // Create one BomItem
     * const BomItem = await prisma.bomItem.create({
     *   data: {
     *     // ... data to create a BomItem
     *   }
     * })
     * 
     */
    create<T extends BomItemCreateArgs>(args: SelectSubset<T, BomItemCreateArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BomItems.
     * @param {BomItemCreateManyArgs} args - Arguments to create many BomItems.
     * @example
     * // Create many BomItems
     * const bomItem = await prisma.bomItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BomItemCreateManyArgs>(args?: SelectSubset<T, BomItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BomItems and returns the data saved in the database.
     * @param {BomItemCreateManyAndReturnArgs} args - Arguments to create many BomItems.
     * @example
     * // Create many BomItems
     * const bomItem = await prisma.bomItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BomItems and only return the `id`
     * const bomItemWithIdOnly = await prisma.bomItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BomItemCreateManyAndReturnArgs>(args?: SelectSubset<T, BomItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BomItem.
     * @param {BomItemDeleteArgs} args - Arguments to delete one BomItem.
     * @example
     * // Delete one BomItem
     * const BomItem = await prisma.bomItem.delete({
     *   where: {
     *     // ... filter to delete one BomItem
     *   }
     * })
     * 
     */
    delete<T extends BomItemDeleteArgs>(args: SelectSubset<T, BomItemDeleteArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BomItem.
     * @param {BomItemUpdateArgs} args - Arguments to update one BomItem.
     * @example
     * // Update one BomItem
     * const bomItem = await prisma.bomItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BomItemUpdateArgs>(args: SelectSubset<T, BomItemUpdateArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BomItems.
     * @param {BomItemDeleteManyArgs} args - Arguments to filter BomItems to delete.
     * @example
     * // Delete a few BomItems
     * const { count } = await prisma.bomItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BomItemDeleteManyArgs>(args?: SelectSubset<T, BomItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BomItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BomItems
     * const bomItem = await prisma.bomItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BomItemUpdateManyArgs>(args: SelectSubset<T, BomItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BomItems and returns the data updated in the database.
     * @param {BomItemUpdateManyAndReturnArgs} args - Arguments to update many BomItems.
     * @example
     * // Update many BomItems
     * const bomItem = await prisma.bomItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BomItems and only return the `id`
     * const bomItemWithIdOnly = await prisma.bomItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BomItemUpdateManyAndReturnArgs>(args: SelectSubset<T, BomItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BomItem.
     * @param {BomItemUpsertArgs} args - Arguments to update or create a BomItem.
     * @example
     * // Update or create a BomItem
     * const bomItem = await prisma.bomItem.upsert({
     *   create: {
     *     // ... data to create a BomItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BomItem we want to update
     *   }
     * })
     */
    upsert<T extends BomItemUpsertArgs>(args: SelectSubset<T, BomItemUpsertArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BomItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemCountArgs} args - Arguments to filter BomItems to count.
     * @example
     * // Count the number of BomItems
     * const count = await prisma.bomItem.count({
     *   where: {
     *     // ... the filter for the BomItems we want to count
     *   }
     * })
    **/
    count<T extends BomItemCountArgs>(
      args?: Subset<T, BomItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BomItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BomItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BomItemAggregateArgs>(args: Subset<T, BomItemAggregateArgs>): Prisma.PrismaPromise<GetBomItemAggregateType<T>>

    /**
     * Group by BomItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BomItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BomItemGroupByArgs['orderBy'] }
        : { orderBy?: BomItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BomItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBomItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BomItem model
   */
  readonly fields: BomItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BomItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BomItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    material<T extends MaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialDefaultArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BomItem model
   */
  interface BomItemFieldRefs {
    readonly id: FieldRef<"BomItem", 'String'>
    readonly jobId: FieldRef<"BomItem", 'String'>
    readonly materialId: FieldRef<"BomItem", 'String'>
    readonly description: FieldRef<"BomItem", 'String'>
    readonly quantity: FieldRef<"BomItem", 'Float'>
    readonly unit: FieldRef<"BomItem", 'String'>
    readonly unitCost: FieldRef<"BomItem", 'Float'>
    readonly totalCost: FieldRef<"BomItem", 'Float'>
    readonly isOrdered: FieldRef<"BomItem", 'Boolean'>
    readonly createdAt: FieldRef<"BomItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BomItem findUnique
   */
  export type BomItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem findUniqueOrThrow
   */
  export type BomItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem findFirst
   */
  export type BomItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BomItems.
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BomItems.
     */
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * BomItem findFirstOrThrow
   */
  export type BomItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BomItems.
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BomItems.
     */
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * BomItem findMany
   */
  export type BomItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItems to fetch.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BomItems.
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * BomItem create
   */
  export type BomItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * The data needed to create a BomItem.
     */
    data: XOR<BomItemCreateInput, BomItemUncheckedCreateInput>
  }

  /**
   * BomItem createMany
   */
  export type BomItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BomItems.
     */
    data: BomItemCreateManyInput | BomItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BomItem createManyAndReturn
   */
  export type BomItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * The data used to create many BomItems.
     */
    data: BomItemCreateManyInput | BomItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BomItem update
   */
  export type BomItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * The data needed to update a BomItem.
     */
    data: XOR<BomItemUpdateInput, BomItemUncheckedUpdateInput>
    /**
     * Choose, which BomItem to update.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem updateMany
   */
  export type BomItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BomItems.
     */
    data: XOR<BomItemUpdateManyMutationInput, BomItemUncheckedUpdateManyInput>
    /**
     * Filter which BomItems to update
     */
    where?: BomItemWhereInput
    /**
     * Limit how many BomItems to update.
     */
    limit?: number
  }

  /**
   * BomItem updateManyAndReturn
   */
  export type BomItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * The data used to update BomItems.
     */
    data: XOR<BomItemUpdateManyMutationInput, BomItemUncheckedUpdateManyInput>
    /**
     * Filter which BomItems to update
     */
    where?: BomItemWhereInput
    /**
     * Limit how many BomItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BomItem upsert
   */
  export type BomItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * The filter to search for the BomItem to update in case it exists.
     */
    where: BomItemWhereUniqueInput
    /**
     * In case the BomItem found by the `where` argument doesn't exist, create a new BomItem with this data.
     */
    create: XOR<BomItemCreateInput, BomItemUncheckedCreateInput>
    /**
     * In case the BomItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BomItemUpdateInput, BomItemUncheckedUpdateInput>
  }

  /**
   * BomItem delete
   */
  export type BomItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter which BomItem to delete.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem deleteMany
   */
  export type BomItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BomItems to delete
     */
    where?: BomItemWhereInput
    /**
     * Limit how many BomItems to delete.
     */
    limit?: number
  }

  /**
   * BomItem without action
   */
  export type BomItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
  }


  /**
   * Model Material
   */

  export type AggregateMaterial = {
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  export type MaterialAvgAggregateOutputType = {
    unitCost: number | null
    qtyOnHand: number | null
    qtyReserved: number | null
    reorderPoint: number | null
  }

  export type MaterialSumAggregateOutputType = {
    unitCost: number | null
    qtyOnHand: number | null
    qtyReserved: number | null
    reorderPoint: number | null
  }

  export type MaterialMinAggregateOutputType = {
    id: string | null
    code: string | null
    description: string | null
    category: string | null
    grade: string | null
    size: string | null
    unit: string | null
    unitCost: number | null
    qtyOnHand: number | null
    qtyReserved: number | null
    reorderPoint: number | null
    preferredVendor: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaterialMaxAggregateOutputType = {
    id: string | null
    code: string | null
    description: string | null
    category: string | null
    grade: string | null
    size: string | null
    unit: string | null
    unitCost: number | null
    qtyOnHand: number | null
    qtyReserved: number | null
    reorderPoint: number | null
    preferredVendor: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaterialCountAggregateOutputType = {
    id: number
    code: number
    description: number
    category: number
    grade: number
    size: number
    unit: number
    unitCost: number
    qtyOnHand: number
    qtyReserved: number
    reorderPoint: number
    preferredVendor: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MaterialAvgAggregateInputType = {
    unitCost?: true
    qtyOnHand?: true
    qtyReserved?: true
    reorderPoint?: true
  }

  export type MaterialSumAggregateInputType = {
    unitCost?: true
    qtyOnHand?: true
    qtyReserved?: true
    reorderPoint?: true
  }

  export type MaterialMinAggregateInputType = {
    id?: true
    code?: true
    description?: true
    category?: true
    grade?: true
    size?: true
    unit?: true
    unitCost?: true
    qtyOnHand?: true
    qtyReserved?: true
    reorderPoint?: true
    preferredVendor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaterialMaxAggregateInputType = {
    id?: true
    code?: true
    description?: true
    category?: true
    grade?: true
    size?: true
    unit?: true
    unitCost?: true
    qtyOnHand?: true
    qtyReserved?: true
    reorderPoint?: true
    preferredVendor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaterialCountAggregateInputType = {
    id?: true
    code?: true
    description?: true
    category?: true
    grade?: true
    size?: true
    unit?: true
    unitCost?: true
    qtyOnHand?: true
    qtyReserved?: true
    reorderPoint?: true
    preferredVendor?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Material to aggregate.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Materials
    **/
    _count?: true | MaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialMaxAggregateInputType
  }

  export type GetMaterialAggregateType<T extends MaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterial[P]>
      : GetScalarType<T[P], AggregateMaterial[P]>
  }




  export type MaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialWhereInput
    orderBy?: MaterialOrderByWithAggregationInput | MaterialOrderByWithAggregationInput[]
    by: MaterialScalarFieldEnum[] | MaterialScalarFieldEnum
    having?: MaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialCountAggregateInputType | true
    _avg?: MaterialAvgAggregateInputType
    _sum?: MaterialSumAggregateInputType
    _min?: MaterialMinAggregateInputType
    _max?: MaterialMaxAggregateInputType
  }

  export type MaterialGroupByOutputType = {
    id: string
    code: string
    description: string
    category: string
    grade: string | null
    size: string | null
    unit: string
    unitCost: number | null
    qtyOnHand: number
    qtyReserved: number
    reorderPoint: number | null
    preferredVendor: string | null
    createdAt: Date
    updatedAt: Date
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  type GetMaterialGroupByPayload<T extends MaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialGroupByOutputType[P]>
        }
      >
    >


  export type MaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    description?: boolean
    category?: boolean
    grade?: boolean
    size?: boolean
    unit?: boolean
    unitCost?: boolean
    qtyOnHand?: boolean
    qtyReserved?: boolean
    reorderPoint?: boolean
    preferredVendor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bomItems?: boolean | Material$bomItemsArgs<ExtArgs>
    heatBatches?: boolean | Material$heatBatchesArgs<ExtArgs>
    stockMoves?: boolean | Material$stockMovesArgs<ExtArgs>
    poItems?: boolean | Material$poItemsArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["material"]>

  export type MaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    description?: boolean
    category?: boolean
    grade?: boolean
    size?: boolean
    unit?: boolean
    unitCost?: boolean
    qtyOnHand?: boolean
    qtyReserved?: boolean
    reorderPoint?: boolean
    preferredVendor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["material"]>

  export type MaterialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    description?: boolean
    category?: boolean
    grade?: boolean
    size?: boolean
    unit?: boolean
    unitCost?: boolean
    qtyOnHand?: boolean
    qtyReserved?: boolean
    reorderPoint?: boolean
    preferredVendor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["material"]>

  export type MaterialSelectScalar = {
    id?: boolean
    code?: boolean
    description?: boolean
    category?: boolean
    grade?: boolean
    size?: boolean
    unit?: boolean
    unitCost?: boolean
    qtyOnHand?: boolean
    qtyReserved?: boolean
    reorderPoint?: boolean
    preferredVendor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MaterialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "description" | "category" | "grade" | "size" | "unit" | "unitCost" | "qtyOnHand" | "qtyReserved" | "reorderPoint" | "preferredVendor" | "createdAt" | "updatedAt", ExtArgs["result"]["material"]>
  export type MaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bomItems?: boolean | Material$bomItemsArgs<ExtArgs>
    heatBatches?: boolean | Material$heatBatchesArgs<ExtArgs>
    stockMoves?: boolean | Material$stockMovesArgs<ExtArgs>
    poItems?: boolean | Material$poItemsArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MaterialIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Material"
    objects: {
      bomItems: Prisma.$BomItemPayload<ExtArgs>[]
      heatBatches: Prisma.$HeatBatchPayload<ExtArgs>[]
      stockMoves: Prisma.$StockMovementPayload<ExtArgs>[]
      poItems: Prisma.$PurchaseOrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      description: string
      category: string
      grade: string | null
      size: string | null
      unit: string
      unitCost: number | null
      qtyOnHand: number
      qtyReserved: number
      reorderPoint: number | null
      preferredVendor: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["material"]>
    composites: {}
  }

  type MaterialGetPayload<S extends boolean | null | undefined | MaterialDefaultArgs> = $Result.GetResult<Prisma.$MaterialPayload, S>

  type MaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaterialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialCountAggregateInputType | true
    }

  export interface MaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Material'], meta: { name: 'Material' } }
    /**
     * Find zero or one Material that matches the filter.
     * @param {MaterialFindUniqueArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialFindUniqueArgs>(args: SelectSubset<T, MaterialFindUniqueArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Material that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaterialFindUniqueOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Material that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialFindFirstArgs>(args?: SelectSubset<T, MaterialFindFirstArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Material that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Materials
     * const materials = await prisma.material.findMany()
     * 
     * // Get first 10 Materials
     * const materials = await prisma.material.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialWithIdOnly = await prisma.material.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialFindManyArgs>(args?: SelectSubset<T, MaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Material.
     * @param {MaterialCreateArgs} args - Arguments to create a Material.
     * @example
     * // Create one Material
     * const Material = await prisma.material.create({
     *   data: {
     *     // ... data to create a Material
     *   }
     * })
     * 
     */
    create<T extends MaterialCreateArgs>(args: SelectSubset<T, MaterialCreateArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Materials.
     * @param {MaterialCreateManyArgs} args - Arguments to create many Materials.
     * @example
     * // Create many Materials
     * const material = await prisma.material.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialCreateManyArgs>(args?: SelectSubset<T, MaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Materials and returns the data saved in the database.
     * @param {MaterialCreateManyAndReturnArgs} args - Arguments to create many Materials.
     * @example
     * // Create many Materials
     * const material = await prisma.material.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Materials and only return the `id`
     * const materialWithIdOnly = await prisma.material.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, MaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Material.
     * @param {MaterialDeleteArgs} args - Arguments to delete one Material.
     * @example
     * // Delete one Material
     * const Material = await prisma.material.delete({
     *   where: {
     *     // ... filter to delete one Material
     *   }
     * })
     * 
     */
    delete<T extends MaterialDeleteArgs>(args: SelectSubset<T, MaterialDeleteArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Material.
     * @param {MaterialUpdateArgs} args - Arguments to update one Material.
     * @example
     * // Update one Material
     * const material = await prisma.material.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialUpdateArgs>(args: SelectSubset<T, MaterialUpdateArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Materials.
     * @param {MaterialDeleteManyArgs} args - Arguments to filter Materials to delete.
     * @example
     * // Delete a few Materials
     * const { count } = await prisma.material.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialDeleteManyArgs>(args?: SelectSubset<T, MaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Materials
     * const material = await prisma.material.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialUpdateManyArgs>(args: SelectSubset<T, MaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials and returns the data updated in the database.
     * @param {MaterialUpdateManyAndReturnArgs} args - Arguments to update many Materials.
     * @example
     * // Update many Materials
     * const material = await prisma.material.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Materials and only return the `id`
     * const materialWithIdOnly = await prisma.material.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaterialUpdateManyAndReturnArgs>(args: SelectSubset<T, MaterialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Material.
     * @param {MaterialUpsertArgs} args - Arguments to update or create a Material.
     * @example
     * // Update or create a Material
     * const material = await prisma.material.upsert({
     *   create: {
     *     // ... data to create a Material
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Material we want to update
     *   }
     * })
     */
    upsert<T extends MaterialUpsertArgs>(args: SelectSubset<T, MaterialUpsertArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialCountArgs} args - Arguments to filter Materials to count.
     * @example
     * // Count the number of Materials
     * const count = await prisma.material.count({
     *   where: {
     *     // ... the filter for the Materials we want to count
     *   }
     * })
    **/
    count<T extends MaterialCountArgs>(
      args?: Subset<T, MaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialAggregateArgs>(args: Subset<T, MaterialAggregateArgs>): Prisma.PrismaPromise<GetMaterialAggregateType<T>>

    /**
     * Group by Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialGroupByArgs['orderBy'] }
        : { orderBy?: MaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Material model
   */
  readonly fields: MaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Material.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bomItems<T extends Material$bomItemsArgs<ExtArgs> = {}>(args?: Subset<T, Material$bomItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    heatBatches<T extends Material$heatBatchesArgs<ExtArgs> = {}>(args?: Subset<T, Material$heatBatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stockMoves<T extends Material$stockMovesArgs<ExtArgs> = {}>(args?: Subset<T, Material$stockMovesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    poItems<T extends Material$poItemsArgs<ExtArgs> = {}>(args?: Subset<T, Material$poItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Material model
   */
  interface MaterialFieldRefs {
    readonly id: FieldRef<"Material", 'String'>
    readonly code: FieldRef<"Material", 'String'>
    readonly description: FieldRef<"Material", 'String'>
    readonly category: FieldRef<"Material", 'String'>
    readonly grade: FieldRef<"Material", 'String'>
    readonly size: FieldRef<"Material", 'String'>
    readonly unit: FieldRef<"Material", 'String'>
    readonly unitCost: FieldRef<"Material", 'Float'>
    readonly qtyOnHand: FieldRef<"Material", 'Float'>
    readonly qtyReserved: FieldRef<"Material", 'Float'>
    readonly reorderPoint: FieldRef<"Material", 'Float'>
    readonly preferredVendor: FieldRef<"Material", 'String'>
    readonly createdAt: FieldRef<"Material", 'DateTime'>
    readonly updatedAt: FieldRef<"Material", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Material findUnique
   */
  export type MaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material findUniqueOrThrow
   */
  export type MaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material findFirst
   */
  export type MaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material findFirstOrThrow
   */
  export type MaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material findMany
   */
  export type MaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Materials to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material create
   */
  export type MaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a Material.
     */
    data: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
  }

  /**
   * Material createMany
   */
  export type MaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Materials.
     */
    data: MaterialCreateManyInput | MaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Material createManyAndReturn
   */
  export type MaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * The data used to create many Materials.
     */
    data: MaterialCreateManyInput | MaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Material update
   */
  export type MaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a Material.
     */
    data: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
    /**
     * Choose, which Material to update.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material updateMany
   */
  export type MaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Materials.
     */
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyInput>
    /**
     * Filter which Materials to update
     */
    where?: MaterialWhereInput
    /**
     * Limit how many Materials to update.
     */
    limit?: number
  }

  /**
   * Material updateManyAndReturn
   */
  export type MaterialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * The data used to update Materials.
     */
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyInput>
    /**
     * Filter which Materials to update
     */
    where?: MaterialWhereInput
    /**
     * Limit how many Materials to update.
     */
    limit?: number
  }

  /**
   * Material upsert
   */
  export type MaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the Material to update in case it exists.
     */
    where: MaterialWhereUniqueInput
    /**
     * In case the Material found by the `where` argument doesn't exist, create a new Material with this data.
     */
    create: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
    /**
     * In case the Material was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
  }

  /**
   * Material delete
   */
  export type MaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter which Material to delete.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material deleteMany
   */
  export type MaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Materials to delete
     */
    where?: MaterialWhereInput
    /**
     * Limit how many Materials to delete.
     */
    limit?: number
  }

  /**
   * Material.bomItems
   */
  export type Material$bomItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BomItem
     */
    omit?: BomItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    where?: BomItemWhereInput
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    cursor?: BomItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * Material.heatBatches
   */
  export type Material$heatBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    where?: HeatBatchWhereInput
    orderBy?: HeatBatchOrderByWithRelationInput | HeatBatchOrderByWithRelationInput[]
    cursor?: HeatBatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HeatBatchScalarFieldEnum | HeatBatchScalarFieldEnum[]
  }

  /**
   * Material.stockMoves
   */
  export type Material$stockMovesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    where?: StockMovementWhereInput
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    cursor?: StockMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * Material.poItems
   */
  export type Material$poItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    where?: PurchaseOrderItemWhereInput
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    cursor?: PurchaseOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * Material without action
   */
  export type MaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
  }


  /**
   * Model HeatBatch
   */

  export type AggregateHeatBatch = {
    _count: HeatBatchCountAggregateOutputType | null
    _avg: HeatBatchAvgAggregateOutputType | null
    _sum: HeatBatchSumAggregateOutputType | null
    _min: HeatBatchMinAggregateOutputType | null
    _max: HeatBatchMaxAggregateOutputType | null
  }

  export type HeatBatchAvgAggregateOutputType = {
    quantity: number | null
  }

  export type HeatBatchSumAggregateOutputType = {
    quantity: number | null
  }

  export type HeatBatchMinAggregateOutputType = {
    id: string | null
    materialId: string | null
    heatNumber: string | null
    mtrUrl: string | null
    quantity: number | null
    unit: string | null
    receivedAt: Date | null
    createdAt: Date | null
  }

  export type HeatBatchMaxAggregateOutputType = {
    id: string | null
    materialId: string | null
    heatNumber: string | null
    mtrUrl: string | null
    quantity: number | null
    unit: string | null
    receivedAt: Date | null
    createdAt: Date | null
  }

  export type HeatBatchCountAggregateOutputType = {
    id: number
    materialId: number
    heatNumber: number
    mtrUrl: number
    quantity: number
    unit: number
    receivedAt: number
    createdAt: number
    _all: number
  }


  export type HeatBatchAvgAggregateInputType = {
    quantity?: true
  }

  export type HeatBatchSumAggregateInputType = {
    quantity?: true
  }

  export type HeatBatchMinAggregateInputType = {
    id?: true
    materialId?: true
    heatNumber?: true
    mtrUrl?: true
    quantity?: true
    unit?: true
    receivedAt?: true
    createdAt?: true
  }

  export type HeatBatchMaxAggregateInputType = {
    id?: true
    materialId?: true
    heatNumber?: true
    mtrUrl?: true
    quantity?: true
    unit?: true
    receivedAt?: true
    createdAt?: true
  }

  export type HeatBatchCountAggregateInputType = {
    id?: true
    materialId?: true
    heatNumber?: true
    mtrUrl?: true
    quantity?: true
    unit?: true
    receivedAt?: true
    createdAt?: true
    _all?: true
  }

  export type HeatBatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeatBatch to aggregate.
     */
    where?: HeatBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeatBatches to fetch.
     */
    orderBy?: HeatBatchOrderByWithRelationInput | HeatBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HeatBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeatBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeatBatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HeatBatches
    **/
    _count?: true | HeatBatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HeatBatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HeatBatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HeatBatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HeatBatchMaxAggregateInputType
  }

  export type GetHeatBatchAggregateType<T extends HeatBatchAggregateArgs> = {
        [P in keyof T & keyof AggregateHeatBatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHeatBatch[P]>
      : GetScalarType<T[P], AggregateHeatBatch[P]>
  }




  export type HeatBatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HeatBatchWhereInput
    orderBy?: HeatBatchOrderByWithAggregationInput | HeatBatchOrderByWithAggregationInput[]
    by: HeatBatchScalarFieldEnum[] | HeatBatchScalarFieldEnum
    having?: HeatBatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HeatBatchCountAggregateInputType | true
    _avg?: HeatBatchAvgAggregateInputType
    _sum?: HeatBatchSumAggregateInputType
    _min?: HeatBatchMinAggregateInputType
    _max?: HeatBatchMaxAggregateInputType
  }

  export type HeatBatchGroupByOutputType = {
    id: string
    materialId: string
    heatNumber: string
    mtrUrl: string | null
    quantity: number
    unit: string
    receivedAt: Date
    createdAt: Date
    _count: HeatBatchCountAggregateOutputType | null
    _avg: HeatBatchAvgAggregateOutputType | null
    _sum: HeatBatchSumAggregateOutputType | null
    _min: HeatBatchMinAggregateOutputType | null
    _max: HeatBatchMaxAggregateOutputType | null
  }

  type GetHeatBatchGroupByPayload<T extends HeatBatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HeatBatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HeatBatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HeatBatchGroupByOutputType[P]>
            : GetScalarType<T[P], HeatBatchGroupByOutputType[P]>
        }
      >
    >


  export type HeatBatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    heatNumber?: boolean
    mtrUrl?: boolean
    quantity?: boolean
    unit?: boolean
    receivedAt?: boolean
    createdAt?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heatBatch"]>

  export type HeatBatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    heatNumber?: boolean
    mtrUrl?: boolean
    quantity?: boolean
    unit?: boolean
    receivedAt?: boolean
    createdAt?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heatBatch"]>

  export type HeatBatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    heatNumber?: boolean
    mtrUrl?: boolean
    quantity?: boolean
    unit?: boolean
    receivedAt?: boolean
    createdAt?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heatBatch"]>

  export type HeatBatchSelectScalar = {
    id?: boolean
    materialId?: boolean
    heatNumber?: boolean
    mtrUrl?: boolean
    quantity?: boolean
    unit?: boolean
    receivedAt?: boolean
    createdAt?: boolean
  }

  export type HeatBatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "materialId" | "heatNumber" | "mtrUrl" | "quantity" | "unit" | "receivedAt" | "createdAt", ExtArgs["result"]["heatBatch"]>
  export type HeatBatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }
  export type HeatBatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }
  export type HeatBatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }

  export type $HeatBatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HeatBatch"
    objects: {
      material: Prisma.$MaterialPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      materialId: string
      heatNumber: string
      mtrUrl: string | null
      quantity: number
      unit: string
      receivedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["heatBatch"]>
    composites: {}
  }

  type HeatBatchGetPayload<S extends boolean | null | undefined | HeatBatchDefaultArgs> = $Result.GetResult<Prisma.$HeatBatchPayload, S>

  type HeatBatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HeatBatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HeatBatchCountAggregateInputType | true
    }

  export interface HeatBatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HeatBatch'], meta: { name: 'HeatBatch' } }
    /**
     * Find zero or one HeatBatch that matches the filter.
     * @param {HeatBatchFindUniqueArgs} args - Arguments to find a HeatBatch
     * @example
     * // Get one HeatBatch
     * const heatBatch = await prisma.heatBatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HeatBatchFindUniqueArgs>(args: SelectSubset<T, HeatBatchFindUniqueArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HeatBatch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HeatBatchFindUniqueOrThrowArgs} args - Arguments to find a HeatBatch
     * @example
     * // Get one HeatBatch
     * const heatBatch = await prisma.heatBatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HeatBatchFindUniqueOrThrowArgs>(args: SelectSubset<T, HeatBatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeatBatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeatBatchFindFirstArgs} args - Arguments to find a HeatBatch
     * @example
     * // Get one HeatBatch
     * const heatBatch = await prisma.heatBatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HeatBatchFindFirstArgs>(args?: SelectSubset<T, HeatBatchFindFirstArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeatBatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeatBatchFindFirstOrThrowArgs} args - Arguments to find a HeatBatch
     * @example
     * // Get one HeatBatch
     * const heatBatch = await prisma.heatBatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HeatBatchFindFirstOrThrowArgs>(args?: SelectSubset<T, HeatBatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HeatBatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeatBatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HeatBatches
     * const heatBatches = await prisma.heatBatch.findMany()
     * 
     * // Get first 10 HeatBatches
     * const heatBatches = await prisma.heatBatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const heatBatchWithIdOnly = await prisma.heatBatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HeatBatchFindManyArgs>(args?: SelectSubset<T, HeatBatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HeatBatch.
     * @param {HeatBatchCreateArgs} args - Arguments to create a HeatBatch.
     * @example
     * // Create one HeatBatch
     * const HeatBatch = await prisma.heatBatch.create({
     *   data: {
     *     // ... data to create a HeatBatch
     *   }
     * })
     * 
     */
    create<T extends HeatBatchCreateArgs>(args: SelectSubset<T, HeatBatchCreateArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HeatBatches.
     * @param {HeatBatchCreateManyArgs} args - Arguments to create many HeatBatches.
     * @example
     * // Create many HeatBatches
     * const heatBatch = await prisma.heatBatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HeatBatchCreateManyArgs>(args?: SelectSubset<T, HeatBatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HeatBatches and returns the data saved in the database.
     * @param {HeatBatchCreateManyAndReturnArgs} args - Arguments to create many HeatBatches.
     * @example
     * // Create many HeatBatches
     * const heatBatch = await prisma.heatBatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HeatBatches and only return the `id`
     * const heatBatchWithIdOnly = await prisma.heatBatch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HeatBatchCreateManyAndReturnArgs>(args?: SelectSubset<T, HeatBatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HeatBatch.
     * @param {HeatBatchDeleteArgs} args - Arguments to delete one HeatBatch.
     * @example
     * // Delete one HeatBatch
     * const HeatBatch = await prisma.heatBatch.delete({
     *   where: {
     *     // ... filter to delete one HeatBatch
     *   }
     * })
     * 
     */
    delete<T extends HeatBatchDeleteArgs>(args: SelectSubset<T, HeatBatchDeleteArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HeatBatch.
     * @param {HeatBatchUpdateArgs} args - Arguments to update one HeatBatch.
     * @example
     * // Update one HeatBatch
     * const heatBatch = await prisma.heatBatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HeatBatchUpdateArgs>(args: SelectSubset<T, HeatBatchUpdateArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HeatBatches.
     * @param {HeatBatchDeleteManyArgs} args - Arguments to filter HeatBatches to delete.
     * @example
     * // Delete a few HeatBatches
     * const { count } = await prisma.heatBatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HeatBatchDeleteManyArgs>(args?: SelectSubset<T, HeatBatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HeatBatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeatBatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HeatBatches
     * const heatBatch = await prisma.heatBatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HeatBatchUpdateManyArgs>(args: SelectSubset<T, HeatBatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HeatBatches and returns the data updated in the database.
     * @param {HeatBatchUpdateManyAndReturnArgs} args - Arguments to update many HeatBatches.
     * @example
     * // Update many HeatBatches
     * const heatBatch = await prisma.heatBatch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HeatBatches and only return the `id`
     * const heatBatchWithIdOnly = await prisma.heatBatch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HeatBatchUpdateManyAndReturnArgs>(args: SelectSubset<T, HeatBatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HeatBatch.
     * @param {HeatBatchUpsertArgs} args - Arguments to update or create a HeatBatch.
     * @example
     * // Update or create a HeatBatch
     * const heatBatch = await prisma.heatBatch.upsert({
     *   create: {
     *     // ... data to create a HeatBatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HeatBatch we want to update
     *   }
     * })
     */
    upsert<T extends HeatBatchUpsertArgs>(args: SelectSubset<T, HeatBatchUpsertArgs<ExtArgs>>): Prisma__HeatBatchClient<$Result.GetResult<Prisma.$HeatBatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HeatBatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeatBatchCountArgs} args - Arguments to filter HeatBatches to count.
     * @example
     * // Count the number of HeatBatches
     * const count = await prisma.heatBatch.count({
     *   where: {
     *     // ... the filter for the HeatBatches we want to count
     *   }
     * })
    **/
    count<T extends HeatBatchCountArgs>(
      args?: Subset<T, HeatBatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HeatBatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HeatBatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeatBatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HeatBatchAggregateArgs>(args: Subset<T, HeatBatchAggregateArgs>): Prisma.PrismaPromise<GetHeatBatchAggregateType<T>>

    /**
     * Group by HeatBatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeatBatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HeatBatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HeatBatchGroupByArgs['orderBy'] }
        : { orderBy?: HeatBatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HeatBatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHeatBatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HeatBatch model
   */
  readonly fields: HeatBatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HeatBatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HeatBatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    material<T extends MaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialDefaultArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HeatBatch model
   */
  interface HeatBatchFieldRefs {
    readonly id: FieldRef<"HeatBatch", 'String'>
    readonly materialId: FieldRef<"HeatBatch", 'String'>
    readonly heatNumber: FieldRef<"HeatBatch", 'String'>
    readonly mtrUrl: FieldRef<"HeatBatch", 'String'>
    readonly quantity: FieldRef<"HeatBatch", 'Float'>
    readonly unit: FieldRef<"HeatBatch", 'String'>
    readonly receivedAt: FieldRef<"HeatBatch", 'DateTime'>
    readonly createdAt: FieldRef<"HeatBatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HeatBatch findUnique
   */
  export type HeatBatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * Filter, which HeatBatch to fetch.
     */
    where: HeatBatchWhereUniqueInput
  }

  /**
   * HeatBatch findUniqueOrThrow
   */
  export type HeatBatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * Filter, which HeatBatch to fetch.
     */
    where: HeatBatchWhereUniqueInput
  }

  /**
   * HeatBatch findFirst
   */
  export type HeatBatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * Filter, which HeatBatch to fetch.
     */
    where?: HeatBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeatBatches to fetch.
     */
    orderBy?: HeatBatchOrderByWithRelationInput | HeatBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeatBatches.
     */
    cursor?: HeatBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeatBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeatBatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeatBatches.
     */
    distinct?: HeatBatchScalarFieldEnum | HeatBatchScalarFieldEnum[]
  }

  /**
   * HeatBatch findFirstOrThrow
   */
  export type HeatBatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * Filter, which HeatBatch to fetch.
     */
    where?: HeatBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeatBatches to fetch.
     */
    orderBy?: HeatBatchOrderByWithRelationInput | HeatBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeatBatches.
     */
    cursor?: HeatBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeatBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeatBatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeatBatches.
     */
    distinct?: HeatBatchScalarFieldEnum | HeatBatchScalarFieldEnum[]
  }

  /**
   * HeatBatch findMany
   */
  export type HeatBatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * Filter, which HeatBatches to fetch.
     */
    where?: HeatBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeatBatches to fetch.
     */
    orderBy?: HeatBatchOrderByWithRelationInput | HeatBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HeatBatches.
     */
    cursor?: HeatBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeatBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeatBatches.
     */
    skip?: number
    distinct?: HeatBatchScalarFieldEnum | HeatBatchScalarFieldEnum[]
  }

  /**
   * HeatBatch create
   */
  export type HeatBatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * The data needed to create a HeatBatch.
     */
    data: XOR<HeatBatchCreateInput, HeatBatchUncheckedCreateInput>
  }

  /**
   * HeatBatch createMany
   */
  export type HeatBatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HeatBatches.
     */
    data: HeatBatchCreateManyInput | HeatBatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HeatBatch createManyAndReturn
   */
  export type HeatBatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * The data used to create many HeatBatches.
     */
    data: HeatBatchCreateManyInput | HeatBatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HeatBatch update
   */
  export type HeatBatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * The data needed to update a HeatBatch.
     */
    data: XOR<HeatBatchUpdateInput, HeatBatchUncheckedUpdateInput>
    /**
     * Choose, which HeatBatch to update.
     */
    where: HeatBatchWhereUniqueInput
  }

  /**
   * HeatBatch updateMany
   */
  export type HeatBatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HeatBatches.
     */
    data: XOR<HeatBatchUpdateManyMutationInput, HeatBatchUncheckedUpdateManyInput>
    /**
     * Filter which HeatBatches to update
     */
    where?: HeatBatchWhereInput
    /**
     * Limit how many HeatBatches to update.
     */
    limit?: number
  }

  /**
   * HeatBatch updateManyAndReturn
   */
  export type HeatBatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * The data used to update HeatBatches.
     */
    data: XOR<HeatBatchUpdateManyMutationInput, HeatBatchUncheckedUpdateManyInput>
    /**
     * Filter which HeatBatches to update
     */
    where?: HeatBatchWhereInput
    /**
     * Limit how many HeatBatches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HeatBatch upsert
   */
  export type HeatBatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * The filter to search for the HeatBatch to update in case it exists.
     */
    where: HeatBatchWhereUniqueInput
    /**
     * In case the HeatBatch found by the `where` argument doesn't exist, create a new HeatBatch with this data.
     */
    create: XOR<HeatBatchCreateInput, HeatBatchUncheckedCreateInput>
    /**
     * In case the HeatBatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HeatBatchUpdateInput, HeatBatchUncheckedUpdateInput>
  }

  /**
   * HeatBatch delete
   */
  export type HeatBatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
    /**
     * Filter which HeatBatch to delete.
     */
    where: HeatBatchWhereUniqueInput
  }

  /**
   * HeatBatch deleteMany
   */
  export type HeatBatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeatBatches to delete
     */
    where?: HeatBatchWhereInput
    /**
     * Limit how many HeatBatches to delete.
     */
    limit?: number
  }

  /**
   * HeatBatch without action
   */
  export type HeatBatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeatBatch
     */
    select?: HeatBatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeatBatch
     */
    omit?: HeatBatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeatBatchInclude<ExtArgs> | null
  }


  /**
   * Model StockLocation
   */

  export type AggregateStockLocation = {
    _count: StockLocationCountAggregateOutputType | null
    _min: StockLocationMinAggregateOutputType | null
    _max: StockLocationMaxAggregateOutputType | null
  }

  export type StockLocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
  }

  export type StockLocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
  }

  export type StockLocationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    _all: number
  }


  export type StockLocationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
  }

  export type StockLocationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
  }

  export type StockLocationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    _all?: true
  }

  export type StockLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockLocation to aggregate.
     */
    where?: StockLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockLocations to fetch.
     */
    orderBy?: StockLocationOrderByWithRelationInput | StockLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StockLocations
    **/
    _count?: true | StockLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockLocationMaxAggregateInputType
  }

  export type GetStockLocationAggregateType<T extends StockLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateStockLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStockLocation[P]>
      : GetScalarType<T[P], AggregateStockLocation[P]>
  }




  export type StockLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockLocationWhereInput
    orderBy?: StockLocationOrderByWithAggregationInput | StockLocationOrderByWithAggregationInput[]
    by: StockLocationScalarFieldEnum[] | StockLocationScalarFieldEnum
    having?: StockLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockLocationCountAggregateInputType | true
    _min?: StockLocationMinAggregateInputType
    _max?: StockLocationMaxAggregateInputType
  }

  export type StockLocationGroupByOutputType = {
    id: string
    name: string
    description: string | null
    isActive: boolean
    _count: StockLocationCountAggregateOutputType | null
    _min: StockLocationMinAggregateOutputType | null
    _max: StockLocationMaxAggregateOutputType | null
  }

  type GetStockLocationGroupByPayload<T extends StockLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockLocationGroupByOutputType[P]>
            : GetScalarType<T[P], StockLocationGroupByOutputType[P]>
        }
      >
    >


  export type StockLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    movementsFrom?: boolean | StockLocation$movementsFromArgs<ExtArgs>
    movementsTo?: boolean | StockLocation$movementsToArgs<ExtArgs>
    _count?: boolean | StockLocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockLocation"]>

  export type StockLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["stockLocation"]>

  export type StockLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["stockLocation"]>

  export type StockLocationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
  }

  export type StockLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isActive", ExtArgs["result"]["stockLocation"]>
  export type StockLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movementsFrom?: boolean | StockLocation$movementsFromArgs<ExtArgs>
    movementsTo?: boolean | StockLocation$movementsToArgs<ExtArgs>
    _count?: boolean | StockLocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StockLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StockLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StockLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StockLocation"
    objects: {
      /**
       * reverse sides of the two relations —
       * one array for moves that LEFT here, one for moves that ARRIVED here
       */
      movementsFrom: Prisma.$StockMovementPayload<ExtArgs>[]
      movementsTo: Prisma.$StockMovementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      isActive: boolean
    }, ExtArgs["result"]["stockLocation"]>
    composites: {}
  }

  type StockLocationGetPayload<S extends boolean | null | undefined | StockLocationDefaultArgs> = $Result.GetResult<Prisma.$StockLocationPayload, S>

  type StockLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StockLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StockLocationCountAggregateInputType | true
    }

  export interface StockLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockLocation'], meta: { name: 'StockLocation' } }
    /**
     * Find zero or one StockLocation that matches the filter.
     * @param {StockLocationFindUniqueArgs} args - Arguments to find a StockLocation
     * @example
     * // Get one StockLocation
     * const stockLocation = await prisma.stockLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockLocationFindUniqueArgs>(args: SelectSubset<T, StockLocationFindUniqueArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StockLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StockLocationFindUniqueOrThrowArgs} args - Arguments to find a StockLocation
     * @example
     * // Get one StockLocation
     * const stockLocation = await prisma.stockLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, StockLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StockLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockLocationFindFirstArgs} args - Arguments to find a StockLocation
     * @example
     * // Get one StockLocation
     * const stockLocation = await prisma.stockLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockLocationFindFirstArgs>(args?: SelectSubset<T, StockLocationFindFirstArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StockLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockLocationFindFirstOrThrowArgs} args - Arguments to find a StockLocation
     * @example
     * // Get one StockLocation
     * const stockLocation = await prisma.stockLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, StockLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StockLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StockLocations
     * const stockLocations = await prisma.stockLocation.findMany()
     * 
     * // Get first 10 StockLocations
     * const stockLocations = await prisma.stockLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockLocationWithIdOnly = await prisma.stockLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockLocationFindManyArgs>(args?: SelectSubset<T, StockLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StockLocation.
     * @param {StockLocationCreateArgs} args - Arguments to create a StockLocation.
     * @example
     * // Create one StockLocation
     * const StockLocation = await prisma.stockLocation.create({
     *   data: {
     *     // ... data to create a StockLocation
     *   }
     * })
     * 
     */
    create<T extends StockLocationCreateArgs>(args: SelectSubset<T, StockLocationCreateArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StockLocations.
     * @param {StockLocationCreateManyArgs} args - Arguments to create many StockLocations.
     * @example
     * // Create many StockLocations
     * const stockLocation = await prisma.stockLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockLocationCreateManyArgs>(args?: SelectSubset<T, StockLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StockLocations and returns the data saved in the database.
     * @param {StockLocationCreateManyAndReturnArgs} args - Arguments to create many StockLocations.
     * @example
     * // Create many StockLocations
     * const stockLocation = await prisma.stockLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StockLocations and only return the `id`
     * const stockLocationWithIdOnly = await prisma.stockLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, StockLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StockLocation.
     * @param {StockLocationDeleteArgs} args - Arguments to delete one StockLocation.
     * @example
     * // Delete one StockLocation
     * const StockLocation = await prisma.stockLocation.delete({
     *   where: {
     *     // ... filter to delete one StockLocation
     *   }
     * })
     * 
     */
    delete<T extends StockLocationDeleteArgs>(args: SelectSubset<T, StockLocationDeleteArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StockLocation.
     * @param {StockLocationUpdateArgs} args - Arguments to update one StockLocation.
     * @example
     * // Update one StockLocation
     * const stockLocation = await prisma.stockLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockLocationUpdateArgs>(args: SelectSubset<T, StockLocationUpdateArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StockLocations.
     * @param {StockLocationDeleteManyArgs} args - Arguments to filter StockLocations to delete.
     * @example
     * // Delete a few StockLocations
     * const { count } = await prisma.stockLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockLocationDeleteManyArgs>(args?: SelectSubset<T, StockLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StockLocations
     * const stockLocation = await prisma.stockLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockLocationUpdateManyArgs>(args: SelectSubset<T, StockLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockLocations and returns the data updated in the database.
     * @param {StockLocationUpdateManyAndReturnArgs} args - Arguments to update many StockLocations.
     * @example
     * // Update many StockLocations
     * const stockLocation = await prisma.stockLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StockLocations and only return the `id`
     * const stockLocationWithIdOnly = await prisma.stockLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StockLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, StockLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StockLocation.
     * @param {StockLocationUpsertArgs} args - Arguments to update or create a StockLocation.
     * @example
     * // Update or create a StockLocation
     * const stockLocation = await prisma.stockLocation.upsert({
     *   create: {
     *     // ... data to create a StockLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StockLocation we want to update
     *   }
     * })
     */
    upsert<T extends StockLocationUpsertArgs>(args: SelectSubset<T, StockLocationUpsertArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StockLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockLocationCountArgs} args - Arguments to filter StockLocations to count.
     * @example
     * // Count the number of StockLocations
     * const count = await prisma.stockLocation.count({
     *   where: {
     *     // ... the filter for the StockLocations we want to count
     *   }
     * })
    **/
    count<T extends StockLocationCountArgs>(
      args?: Subset<T, StockLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StockLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockLocationAggregateArgs>(args: Subset<T, StockLocationAggregateArgs>): Prisma.PrismaPromise<GetStockLocationAggregateType<T>>

    /**
     * Group by StockLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockLocationGroupByArgs['orderBy'] }
        : { orderBy?: StockLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StockLocation model
   */
  readonly fields: StockLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StockLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    movementsFrom<T extends StockLocation$movementsFromArgs<ExtArgs> = {}>(args?: Subset<T, StockLocation$movementsFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    movementsTo<T extends StockLocation$movementsToArgs<ExtArgs> = {}>(args?: Subset<T, StockLocation$movementsToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StockLocation model
   */
  interface StockLocationFieldRefs {
    readonly id: FieldRef<"StockLocation", 'String'>
    readonly name: FieldRef<"StockLocation", 'String'>
    readonly description: FieldRef<"StockLocation", 'String'>
    readonly isActive: FieldRef<"StockLocation", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * StockLocation findUnique
   */
  export type StockLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * Filter, which StockLocation to fetch.
     */
    where: StockLocationWhereUniqueInput
  }

  /**
   * StockLocation findUniqueOrThrow
   */
  export type StockLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * Filter, which StockLocation to fetch.
     */
    where: StockLocationWhereUniqueInput
  }

  /**
   * StockLocation findFirst
   */
  export type StockLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * Filter, which StockLocation to fetch.
     */
    where?: StockLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockLocations to fetch.
     */
    orderBy?: StockLocationOrderByWithRelationInput | StockLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockLocations.
     */
    cursor?: StockLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockLocations.
     */
    distinct?: StockLocationScalarFieldEnum | StockLocationScalarFieldEnum[]
  }

  /**
   * StockLocation findFirstOrThrow
   */
  export type StockLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * Filter, which StockLocation to fetch.
     */
    where?: StockLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockLocations to fetch.
     */
    orderBy?: StockLocationOrderByWithRelationInput | StockLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockLocations.
     */
    cursor?: StockLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockLocations.
     */
    distinct?: StockLocationScalarFieldEnum | StockLocationScalarFieldEnum[]
  }

  /**
   * StockLocation findMany
   */
  export type StockLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * Filter, which StockLocations to fetch.
     */
    where?: StockLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockLocations to fetch.
     */
    orderBy?: StockLocationOrderByWithRelationInput | StockLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StockLocations.
     */
    cursor?: StockLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockLocations.
     */
    skip?: number
    distinct?: StockLocationScalarFieldEnum | StockLocationScalarFieldEnum[]
  }

  /**
   * StockLocation create
   */
  export type StockLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a StockLocation.
     */
    data: XOR<StockLocationCreateInput, StockLocationUncheckedCreateInput>
  }

  /**
   * StockLocation createMany
   */
  export type StockLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StockLocations.
     */
    data: StockLocationCreateManyInput | StockLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StockLocation createManyAndReturn
   */
  export type StockLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * The data used to create many StockLocations.
     */
    data: StockLocationCreateManyInput | StockLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StockLocation update
   */
  export type StockLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a StockLocation.
     */
    data: XOR<StockLocationUpdateInput, StockLocationUncheckedUpdateInput>
    /**
     * Choose, which StockLocation to update.
     */
    where: StockLocationWhereUniqueInput
  }

  /**
   * StockLocation updateMany
   */
  export type StockLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StockLocations.
     */
    data: XOR<StockLocationUpdateManyMutationInput, StockLocationUncheckedUpdateManyInput>
    /**
     * Filter which StockLocations to update
     */
    where?: StockLocationWhereInput
    /**
     * Limit how many StockLocations to update.
     */
    limit?: number
  }

  /**
   * StockLocation updateManyAndReturn
   */
  export type StockLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * The data used to update StockLocations.
     */
    data: XOR<StockLocationUpdateManyMutationInput, StockLocationUncheckedUpdateManyInput>
    /**
     * Filter which StockLocations to update
     */
    where?: StockLocationWhereInput
    /**
     * Limit how many StockLocations to update.
     */
    limit?: number
  }

  /**
   * StockLocation upsert
   */
  export type StockLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the StockLocation to update in case it exists.
     */
    where: StockLocationWhereUniqueInput
    /**
     * In case the StockLocation found by the `where` argument doesn't exist, create a new StockLocation with this data.
     */
    create: XOR<StockLocationCreateInput, StockLocationUncheckedCreateInput>
    /**
     * In case the StockLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockLocationUpdateInput, StockLocationUncheckedUpdateInput>
  }

  /**
   * StockLocation delete
   */
  export type StockLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    /**
     * Filter which StockLocation to delete.
     */
    where: StockLocationWhereUniqueInput
  }

  /**
   * StockLocation deleteMany
   */
  export type StockLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockLocations to delete
     */
    where?: StockLocationWhereInput
    /**
     * Limit how many StockLocations to delete.
     */
    limit?: number
  }

  /**
   * StockLocation.movementsFrom
   */
  export type StockLocation$movementsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    where?: StockMovementWhereInput
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    cursor?: StockMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockLocation.movementsTo
   */
  export type StockLocation$movementsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    where?: StockMovementWhereInput
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    cursor?: StockMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockLocation without action
   */
  export type StockLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
  }


  /**
   * Model StockMovement
   */

  export type AggregateStockMovement = {
    _count: StockMovementCountAggregateOutputType | null
    _avg: StockMovementAvgAggregateOutputType | null
    _sum: StockMovementSumAggregateOutputType | null
    _min: StockMovementMinAggregateOutputType | null
    _max: StockMovementMaxAggregateOutputType | null
  }

  export type StockMovementAvgAggregateOutputType = {
    quantity: number | null
  }

  export type StockMovementSumAggregateOutputType = {
    quantity: number | null
  }

  export type StockMovementMinAggregateOutputType = {
    id: string | null
    materialId: string | null
    fromLocationId: string | null
    toLocationId: string | null
    quantity: number | null
    unit: string | null
    movementType: string | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type StockMovementMaxAggregateOutputType = {
    id: string | null
    materialId: string | null
    fromLocationId: string | null
    toLocationId: string | null
    quantity: number | null
    unit: string | null
    movementType: string | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type StockMovementCountAggregateOutputType = {
    id: number
    materialId: number
    fromLocationId: number
    toLocationId: number
    quantity: number
    unit: number
    movementType: number
    reference: number
    notes: number
    createdAt: number
    _all: number
  }


  export type StockMovementAvgAggregateInputType = {
    quantity?: true
  }

  export type StockMovementSumAggregateInputType = {
    quantity?: true
  }

  export type StockMovementMinAggregateInputType = {
    id?: true
    materialId?: true
    fromLocationId?: true
    toLocationId?: true
    quantity?: true
    unit?: true
    movementType?: true
    reference?: true
    notes?: true
    createdAt?: true
  }

  export type StockMovementMaxAggregateInputType = {
    id?: true
    materialId?: true
    fromLocationId?: true
    toLocationId?: true
    quantity?: true
    unit?: true
    movementType?: true
    reference?: true
    notes?: true
    createdAt?: true
  }

  export type StockMovementCountAggregateInputType = {
    id?: true
    materialId?: true
    fromLocationId?: true
    toLocationId?: true
    quantity?: true
    unit?: true
    movementType?: true
    reference?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type StockMovementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockMovement to aggregate.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StockMovements
    **/
    _count?: true | StockMovementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockMovementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockMovementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMovementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMovementMaxAggregateInputType
  }

  export type GetStockMovementAggregateType<T extends StockMovementAggregateArgs> = {
        [P in keyof T & keyof AggregateStockMovement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStockMovement[P]>
      : GetScalarType<T[P], AggregateStockMovement[P]>
  }




  export type StockMovementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockMovementWhereInput
    orderBy?: StockMovementOrderByWithAggregationInput | StockMovementOrderByWithAggregationInput[]
    by: StockMovementScalarFieldEnum[] | StockMovementScalarFieldEnum
    having?: StockMovementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockMovementCountAggregateInputType | true
    _avg?: StockMovementAvgAggregateInputType
    _sum?: StockMovementSumAggregateInputType
    _min?: StockMovementMinAggregateInputType
    _max?: StockMovementMaxAggregateInputType
  }

  export type StockMovementGroupByOutputType = {
    id: string
    materialId: string
    fromLocationId: string | null
    toLocationId: string | null
    quantity: number
    unit: string
    movementType: string
    reference: string | null
    notes: string | null
    createdAt: Date
    _count: StockMovementCountAggregateOutputType | null
    _avg: StockMovementAvgAggregateOutputType | null
    _sum: StockMovementSumAggregateOutputType | null
    _min: StockMovementMinAggregateOutputType | null
    _max: StockMovementMaxAggregateOutputType | null
  }

  type GetStockMovementGroupByPayload<T extends StockMovementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockMovementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockMovementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockMovementGroupByOutputType[P]>
            : GetScalarType<T[P], StockMovementGroupByOutputType[P]>
        }
      >
    >


  export type StockMovementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    fromLocationId?: boolean
    toLocationId?: boolean
    quantity?: boolean
    unit?: boolean
    movementType?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    fromLocation?: boolean | StockMovement$fromLocationArgs<ExtArgs>
    toLocation?: boolean | StockMovement$toLocationArgs<ExtArgs>
  }, ExtArgs["result"]["stockMovement"]>

  export type StockMovementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    fromLocationId?: boolean
    toLocationId?: boolean
    quantity?: boolean
    unit?: boolean
    movementType?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    fromLocation?: boolean | StockMovement$fromLocationArgs<ExtArgs>
    toLocation?: boolean | StockMovement$toLocationArgs<ExtArgs>
  }, ExtArgs["result"]["stockMovement"]>

  export type StockMovementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    fromLocationId?: boolean
    toLocationId?: boolean
    quantity?: boolean
    unit?: boolean
    movementType?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    fromLocation?: boolean | StockMovement$fromLocationArgs<ExtArgs>
    toLocation?: boolean | StockMovement$toLocationArgs<ExtArgs>
  }, ExtArgs["result"]["stockMovement"]>

  export type StockMovementSelectScalar = {
    id?: boolean
    materialId?: boolean
    fromLocationId?: boolean
    toLocationId?: boolean
    quantity?: boolean
    unit?: boolean
    movementType?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type StockMovementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "materialId" | "fromLocationId" | "toLocationId" | "quantity" | "unit" | "movementType" | "reference" | "notes" | "createdAt", ExtArgs["result"]["stockMovement"]>
  export type StockMovementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    fromLocation?: boolean | StockMovement$fromLocationArgs<ExtArgs>
    toLocation?: boolean | StockMovement$toLocationArgs<ExtArgs>
  }
  export type StockMovementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    fromLocation?: boolean | StockMovement$fromLocationArgs<ExtArgs>
    toLocation?: boolean | StockMovement$toLocationArgs<ExtArgs>
  }
  export type StockMovementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    fromLocation?: boolean | StockMovement$fromLocationArgs<ExtArgs>
    toLocation?: boolean | StockMovement$toLocationArgs<ExtArgs>
  }

  export type $StockMovementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StockMovement"
    objects: {
      material: Prisma.$MaterialPayload<ExtArgs>
      fromLocation: Prisma.$StockLocationPayload<ExtArgs> | null
      toLocation: Prisma.$StockLocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      materialId: string
      fromLocationId: string | null
      toLocationId: string | null
      quantity: number
      unit: string
      movementType: string
      reference: string | null
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["stockMovement"]>
    composites: {}
  }

  type StockMovementGetPayload<S extends boolean | null | undefined | StockMovementDefaultArgs> = $Result.GetResult<Prisma.$StockMovementPayload, S>

  type StockMovementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StockMovementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StockMovementCountAggregateInputType | true
    }

  export interface StockMovementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockMovement'], meta: { name: 'StockMovement' } }
    /**
     * Find zero or one StockMovement that matches the filter.
     * @param {StockMovementFindUniqueArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockMovementFindUniqueArgs>(args: SelectSubset<T, StockMovementFindUniqueArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StockMovement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StockMovementFindUniqueOrThrowArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockMovementFindUniqueOrThrowArgs>(args: SelectSubset<T, StockMovementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StockMovement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementFindFirstArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockMovementFindFirstArgs>(args?: SelectSubset<T, StockMovementFindFirstArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StockMovement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementFindFirstOrThrowArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockMovementFindFirstOrThrowArgs>(args?: SelectSubset<T, StockMovementFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StockMovements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StockMovements
     * const stockMovements = await prisma.stockMovement.findMany()
     * 
     * // Get first 10 StockMovements
     * const stockMovements = await prisma.stockMovement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockMovementWithIdOnly = await prisma.stockMovement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockMovementFindManyArgs>(args?: SelectSubset<T, StockMovementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StockMovement.
     * @param {StockMovementCreateArgs} args - Arguments to create a StockMovement.
     * @example
     * // Create one StockMovement
     * const StockMovement = await prisma.stockMovement.create({
     *   data: {
     *     // ... data to create a StockMovement
     *   }
     * })
     * 
     */
    create<T extends StockMovementCreateArgs>(args: SelectSubset<T, StockMovementCreateArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StockMovements.
     * @param {StockMovementCreateManyArgs} args - Arguments to create many StockMovements.
     * @example
     * // Create many StockMovements
     * const stockMovement = await prisma.stockMovement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockMovementCreateManyArgs>(args?: SelectSubset<T, StockMovementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StockMovements and returns the data saved in the database.
     * @param {StockMovementCreateManyAndReturnArgs} args - Arguments to create many StockMovements.
     * @example
     * // Create many StockMovements
     * const stockMovement = await prisma.stockMovement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StockMovements and only return the `id`
     * const stockMovementWithIdOnly = await prisma.stockMovement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockMovementCreateManyAndReturnArgs>(args?: SelectSubset<T, StockMovementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StockMovement.
     * @param {StockMovementDeleteArgs} args - Arguments to delete one StockMovement.
     * @example
     * // Delete one StockMovement
     * const StockMovement = await prisma.stockMovement.delete({
     *   where: {
     *     // ... filter to delete one StockMovement
     *   }
     * })
     * 
     */
    delete<T extends StockMovementDeleteArgs>(args: SelectSubset<T, StockMovementDeleteArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StockMovement.
     * @param {StockMovementUpdateArgs} args - Arguments to update one StockMovement.
     * @example
     * // Update one StockMovement
     * const stockMovement = await prisma.stockMovement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockMovementUpdateArgs>(args: SelectSubset<T, StockMovementUpdateArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StockMovements.
     * @param {StockMovementDeleteManyArgs} args - Arguments to filter StockMovements to delete.
     * @example
     * // Delete a few StockMovements
     * const { count } = await prisma.stockMovement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockMovementDeleteManyArgs>(args?: SelectSubset<T, StockMovementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StockMovements
     * const stockMovement = await prisma.stockMovement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockMovementUpdateManyArgs>(args: SelectSubset<T, StockMovementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockMovements and returns the data updated in the database.
     * @param {StockMovementUpdateManyAndReturnArgs} args - Arguments to update many StockMovements.
     * @example
     * // Update many StockMovements
     * const stockMovement = await prisma.stockMovement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StockMovements and only return the `id`
     * const stockMovementWithIdOnly = await prisma.stockMovement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StockMovementUpdateManyAndReturnArgs>(args: SelectSubset<T, StockMovementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StockMovement.
     * @param {StockMovementUpsertArgs} args - Arguments to update or create a StockMovement.
     * @example
     * // Update or create a StockMovement
     * const stockMovement = await prisma.stockMovement.upsert({
     *   create: {
     *     // ... data to create a StockMovement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StockMovement we want to update
     *   }
     * })
     */
    upsert<T extends StockMovementUpsertArgs>(args: SelectSubset<T, StockMovementUpsertArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StockMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementCountArgs} args - Arguments to filter StockMovements to count.
     * @example
     * // Count the number of StockMovements
     * const count = await prisma.stockMovement.count({
     *   where: {
     *     // ... the filter for the StockMovements we want to count
     *   }
     * })
    **/
    count<T extends StockMovementCountArgs>(
      args?: Subset<T, StockMovementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockMovementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StockMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockMovementAggregateArgs>(args: Subset<T, StockMovementAggregateArgs>): Prisma.PrismaPromise<GetStockMovementAggregateType<T>>

    /**
     * Group by StockMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockMovementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockMovementGroupByArgs['orderBy'] }
        : { orderBy?: StockMovementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockMovementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockMovementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StockMovement model
   */
  readonly fields: StockMovementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StockMovement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockMovementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    material<T extends MaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialDefaultArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fromLocation<T extends StockMovement$fromLocationArgs<ExtArgs> = {}>(args?: Subset<T, StockMovement$fromLocationArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    toLocation<T extends StockMovement$toLocationArgs<ExtArgs> = {}>(args?: Subset<T, StockMovement$toLocationArgs<ExtArgs>>): Prisma__StockLocationClient<$Result.GetResult<Prisma.$StockLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StockMovement model
   */
  interface StockMovementFieldRefs {
    readonly id: FieldRef<"StockMovement", 'String'>
    readonly materialId: FieldRef<"StockMovement", 'String'>
    readonly fromLocationId: FieldRef<"StockMovement", 'String'>
    readonly toLocationId: FieldRef<"StockMovement", 'String'>
    readonly quantity: FieldRef<"StockMovement", 'Float'>
    readonly unit: FieldRef<"StockMovement", 'String'>
    readonly movementType: FieldRef<"StockMovement", 'String'>
    readonly reference: FieldRef<"StockMovement", 'String'>
    readonly notes: FieldRef<"StockMovement", 'String'>
    readonly createdAt: FieldRef<"StockMovement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StockMovement findUnique
   */
  export type StockMovementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement findUniqueOrThrow
   */
  export type StockMovementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement findFirst
   */
  export type StockMovementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockMovements.
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockMovements.
     */
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockMovement findFirstOrThrow
   */
  export type StockMovementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockMovements.
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockMovements.
     */
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockMovement findMany
   */
  export type StockMovementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovements to fetch.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StockMovements.
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockMovement create
   */
  export type StockMovementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * The data needed to create a StockMovement.
     */
    data: XOR<StockMovementCreateInput, StockMovementUncheckedCreateInput>
  }

  /**
   * StockMovement createMany
   */
  export type StockMovementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StockMovements.
     */
    data: StockMovementCreateManyInput | StockMovementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StockMovement createManyAndReturn
   */
  export type StockMovementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * The data used to create many StockMovements.
     */
    data: StockMovementCreateManyInput | StockMovementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockMovement update
   */
  export type StockMovementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * The data needed to update a StockMovement.
     */
    data: XOR<StockMovementUpdateInput, StockMovementUncheckedUpdateInput>
    /**
     * Choose, which StockMovement to update.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement updateMany
   */
  export type StockMovementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StockMovements.
     */
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyInput>
    /**
     * Filter which StockMovements to update
     */
    where?: StockMovementWhereInput
    /**
     * Limit how many StockMovements to update.
     */
    limit?: number
  }

  /**
   * StockMovement updateManyAndReturn
   */
  export type StockMovementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * The data used to update StockMovements.
     */
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyInput>
    /**
     * Filter which StockMovements to update
     */
    where?: StockMovementWhereInput
    /**
     * Limit how many StockMovements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockMovement upsert
   */
  export type StockMovementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * The filter to search for the StockMovement to update in case it exists.
     */
    where: StockMovementWhereUniqueInput
    /**
     * In case the StockMovement found by the `where` argument doesn't exist, create a new StockMovement with this data.
     */
    create: XOR<StockMovementCreateInput, StockMovementUncheckedCreateInput>
    /**
     * In case the StockMovement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockMovementUpdateInput, StockMovementUncheckedUpdateInput>
  }

  /**
   * StockMovement delete
   */
  export type StockMovementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter which StockMovement to delete.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement deleteMany
   */
  export type StockMovementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockMovements to delete
     */
    where?: StockMovementWhereInput
    /**
     * Limit how many StockMovements to delete.
     */
    limit?: number
  }

  /**
   * StockMovement.fromLocation
   */
  export type StockMovement$fromLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    where?: StockLocationWhereInput
  }

  /**
   * StockMovement.toLocation
   */
  export type StockMovement$toLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockLocation
     */
    select?: StockLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockLocation
     */
    omit?: StockLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockLocationInclude<ExtArgs> | null
    where?: StockLocationWhereInput
  }

  /**
   * StockMovement without action
   */
  export type StockMovementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockMovement
     */
    omit?: StockMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
  }


  /**
   * Model Timecard
   */

  export type AggregateTimecard = {
    _count: TimecardCountAggregateOutputType | null
    _avg: TimecardAvgAggregateOutputType | null
    _sum: TimecardSumAggregateOutputType | null
    _min: TimecardMinAggregateOutputType | null
    _max: TimecardMaxAggregateOutputType | null
  }

  export type TimecardAvgAggregateOutputType = {
    totalHours: number | null
  }

  export type TimecardSumAggregateOutputType = {
    totalHours: number | null
  }

  export type TimecardMinAggregateOutputType = {
    id: string | null
    userId: string | null
    jobId: string | null
    taskId: string | null
    startTime: Date | null
    endTime: Date | null
    totalHours: number | null
    wpsId: string | null
    notes: string | null
    isApproved: boolean | null
    createdAt: Date | null
  }

  export type TimecardMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    jobId: string | null
    taskId: string | null
    startTime: Date | null
    endTime: Date | null
    totalHours: number | null
    wpsId: string | null
    notes: string | null
    isApproved: boolean | null
    createdAt: Date | null
  }

  export type TimecardCountAggregateOutputType = {
    id: number
    userId: number
    jobId: number
    taskId: number
    startTime: number
    endTime: number
    totalHours: number
    wpsId: number
    notes: number
    isApproved: number
    createdAt: number
    _all: number
  }


  export type TimecardAvgAggregateInputType = {
    totalHours?: true
  }

  export type TimecardSumAggregateInputType = {
    totalHours?: true
  }

  export type TimecardMinAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    taskId?: true
    startTime?: true
    endTime?: true
    totalHours?: true
    wpsId?: true
    notes?: true
    isApproved?: true
    createdAt?: true
  }

  export type TimecardMaxAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    taskId?: true
    startTime?: true
    endTime?: true
    totalHours?: true
    wpsId?: true
    notes?: true
    isApproved?: true
    createdAt?: true
  }

  export type TimecardCountAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    taskId?: true
    startTime?: true
    endTime?: true
    totalHours?: true
    wpsId?: true
    notes?: true
    isApproved?: true
    createdAt?: true
    _all?: true
  }

  export type TimecardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Timecard to aggregate.
     */
    where?: TimecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timecards to fetch.
     */
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timecards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Timecards
    **/
    _count?: true | TimecardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimecardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimecardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimecardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimecardMaxAggregateInputType
  }

  export type GetTimecardAggregateType<T extends TimecardAggregateArgs> = {
        [P in keyof T & keyof AggregateTimecard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimecard[P]>
      : GetScalarType<T[P], AggregateTimecard[P]>
  }




  export type TimecardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimecardWhereInput
    orderBy?: TimecardOrderByWithAggregationInput | TimecardOrderByWithAggregationInput[]
    by: TimecardScalarFieldEnum[] | TimecardScalarFieldEnum
    having?: TimecardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimecardCountAggregateInputType | true
    _avg?: TimecardAvgAggregateInputType
    _sum?: TimecardSumAggregateInputType
    _min?: TimecardMinAggregateInputType
    _max?: TimecardMaxAggregateInputType
  }

  export type TimecardGroupByOutputType = {
    id: string
    userId: string
    jobId: string | null
    taskId: string | null
    startTime: Date
    endTime: Date | null
    totalHours: number | null
    wpsId: string | null
    notes: string | null
    isApproved: boolean
    createdAt: Date
    _count: TimecardCountAggregateOutputType | null
    _avg: TimecardAvgAggregateOutputType | null
    _sum: TimecardSumAggregateOutputType | null
    _min: TimecardMinAggregateOutputType | null
    _max: TimecardMaxAggregateOutputType | null
  }

  type GetTimecardGroupByPayload<T extends TimecardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimecardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimecardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimecardGroupByOutputType[P]>
            : GetScalarType<T[P], TimecardGroupByOutputType[P]>
        }
      >
    >


  export type TimecardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    taskId?: boolean
    startTime?: boolean
    endTime?: boolean
    totalHours?: boolean
    wpsId?: boolean
    notes?: boolean
    isApproved?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | Timecard$jobArgs<ExtArgs>
    task?: boolean | Timecard$taskArgs<ExtArgs>
    wps?: boolean | Timecard$wpsArgs<ExtArgs>
    weldPasses?: boolean | Timecard$weldPassesArgs<ExtArgs>
    _count?: boolean | TimecardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timecard"]>

  export type TimecardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    taskId?: boolean
    startTime?: boolean
    endTime?: boolean
    totalHours?: boolean
    wpsId?: boolean
    notes?: boolean
    isApproved?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | Timecard$jobArgs<ExtArgs>
    task?: boolean | Timecard$taskArgs<ExtArgs>
    wps?: boolean | Timecard$wpsArgs<ExtArgs>
  }, ExtArgs["result"]["timecard"]>

  export type TimecardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    taskId?: boolean
    startTime?: boolean
    endTime?: boolean
    totalHours?: boolean
    wpsId?: boolean
    notes?: boolean
    isApproved?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | Timecard$jobArgs<ExtArgs>
    task?: boolean | Timecard$taskArgs<ExtArgs>
    wps?: boolean | Timecard$wpsArgs<ExtArgs>
  }, ExtArgs["result"]["timecard"]>

  export type TimecardSelectScalar = {
    id?: boolean
    userId?: boolean
    jobId?: boolean
    taskId?: boolean
    startTime?: boolean
    endTime?: boolean
    totalHours?: boolean
    wpsId?: boolean
    notes?: boolean
    isApproved?: boolean
    createdAt?: boolean
  }

  export type TimecardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "jobId" | "taskId" | "startTime" | "endTime" | "totalHours" | "wpsId" | "notes" | "isApproved" | "createdAt", ExtArgs["result"]["timecard"]>
  export type TimecardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | Timecard$jobArgs<ExtArgs>
    task?: boolean | Timecard$taskArgs<ExtArgs>
    wps?: boolean | Timecard$wpsArgs<ExtArgs>
    weldPasses?: boolean | Timecard$weldPassesArgs<ExtArgs>
    _count?: boolean | TimecardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TimecardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | Timecard$jobArgs<ExtArgs>
    task?: boolean | Timecard$taskArgs<ExtArgs>
    wps?: boolean | Timecard$wpsArgs<ExtArgs>
  }
  export type TimecardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | Timecard$jobArgs<ExtArgs>
    task?: boolean | Timecard$taskArgs<ExtArgs>
    wps?: boolean | Timecard$wpsArgs<ExtArgs>
  }

  export type $TimecardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Timecard"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs> | null
      wps: Prisma.$WpsSpecPayload<ExtArgs> | null
      weldPasses: Prisma.$WeldPassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      jobId: string | null
      taskId: string | null
      startTime: Date
      endTime: Date | null
      totalHours: number | null
      wpsId: string | null
      notes: string | null
      isApproved: boolean
      createdAt: Date
    }, ExtArgs["result"]["timecard"]>
    composites: {}
  }

  type TimecardGetPayload<S extends boolean | null | undefined | TimecardDefaultArgs> = $Result.GetResult<Prisma.$TimecardPayload, S>

  type TimecardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TimecardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TimecardCountAggregateInputType | true
    }

  export interface TimecardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Timecard'], meta: { name: 'Timecard' } }
    /**
     * Find zero or one Timecard that matches the filter.
     * @param {TimecardFindUniqueArgs} args - Arguments to find a Timecard
     * @example
     * // Get one Timecard
     * const timecard = await prisma.timecard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimecardFindUniqueArgs>(args: SelectSubset<T, TimecardFindUniqueArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Timecard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TimecardFindUniqueOrThrowArgs} args - Arguments to find a Timecard
     * @example
     * // Get one Timecard
     * const timecard = await prisma.timecard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimecardFindUniqueOrThrowArgs>(args: SelectSubset<T, TimecardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Timecard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimecardFindFirstArgs} args - Arguments to find a Timecard
     * @example
     * // Get one Timecard
     * const timecard = await prisma.timecard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimecardFindFirstArgs>(args?: SelectSubset<T, TimecardFindFirstArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Timecard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimecardFindFirstOrThrowArgs} args - Arguments to find a Timecard
     * @example
     * // Get one Timecard
     * const timecard = await prisma.timecard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimecardFindFirstOrThrowArgs>(args?: SelectSubset<T, TimecardFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Timecards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimecardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Timecards
     * const timecards = await prisma.timecard.findMany()
     * 
     * // Get first 10 Timecards
     * const timecards = await prisma.timecard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timecardWithIdOnly = await prisma.timecard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimecardFindManyArgs>(args?: SelectSubset<T, TimecardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Timecard.
     * @param {TimecardCreateArgs} args - Arguments to create a Timecard.
     * @example
     * // Create one Timecard
     * const Timecard = await prisma.timecard.create({
     *   data: {
     *     // ... data to create a Timecard
     *   }
     * })
     * 
     */
    create<T extends TimecardCreateArgs>(args: SelectSubset<T, TimecardCreateArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Timecards.
     * @param {TimecardCreateManyArgs} args - Arguments to create many Timecards.
     * @example
     * // Create many Timecards
     * const timecard = await prisma.timecard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimecardCreateManyArgs>(args?: SelectSubset<T, TimecardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Timecards and returns the data saved in the database.
     * @param {TimecardCreateManyAndReturnArgs} args - Arguments to create many Timecards.
     * @example
     * // Create many Timecards
     * const timecard = await prisma.timecard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Timecards and only return the `id`
     * const timecardWithIdOnly = await prisma.timecard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimecardCreateManyAndReturnArgs>(args?: SelectSubset<T, TimecardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Timecard.
     * @param {TimecardDeleteArgs} args - Arguments to delete one Timecard.
     * @example
     * // Delete one Timecard
     * const Timecard = await prisma.timecard.delete({
     *   where: {
     *     // ... filter to delete one Timecard
     *   }
     * })
     * 
     */
    delete<T extends TimecardDeleteArgs>(args: SelectSubset<T, TimecardDeleteArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Timecard.
     * @param {TimecardUpdateArgs} args - Arguments to update one Timecard.
     * @example
     * // Update one Timecard
     * const timecard = await prisma.timecard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimecardUpdateArgs>(args: SelectSubset<T, TimecardUpdateArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Timecards.
     * @param {TimecardDeleteManyArgs} args - Arguments to filter Timecards to delete.
     * @example
     * // Delete a few Timecards
     * const { count } = await prisma.timecard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimecardDeleteManyArgs>(args?: SelectSubset<T, TimecardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Timecards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimecardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Timecards
     * const timecard = await prisma.timecard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimecardUpdateManyArgs>(args: SelectSubset<T, TimecardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Timecards and returns the data updated in the database.
     * @param {TimecardUpdateManyAndReturnArgs} args - Arguments to update many Timecards.
     * @example
     * // Update many Timecards
     * const timecard = await prisma.timecard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Timecards and only return the `id`
     * const timecardWithIdOnly = await prisma.timecard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TimecardUpdateManyAndReturnArgs>(args: SelectSubset<T, TimecardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Timecard.
     * @param {TimecardUpsertArgs} args - Arguments to update or create a Timecard.
     * @example
     * // Update or create a Timecard
     * const timecard = await prisma.timecard.upsert({
     *   create: {
     *     // ... data to create a Timecard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Timecard we want to update
     *   }
     * })
     */
    upsert<T extends TimecardUpsertArgs>(args: SelectSubset<T, TimecardUpsertArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Timecards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimecardCountArgs} args - Arguments to filter Timecards to count.
     * @example
     * // Count the number of Timecards
     * const count = await prisma.timecard.count({
     *   where: {
     *     // ... the filter for the Timecards we want to count
     *   }
     * })
    **/
    count<T extends TimecardCountArgs>(
      args?: Subset<T, TimecardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimecardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Timecard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimecardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimecardAggregateArgs>(args: Subset<T, TimecardAggregateArgs>): Prisma.PrismaPromise<GetTimecardAggregateType<T>>

    /**
     * Group by Timecard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimecardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimecardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimecardGroupByArgs['orderBy'] }
        : { orderBy?: TimecardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimecardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimecardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Timecard model
   */
  readonly fields: TimecardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Timecard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimecardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends Timecard$jobArgs<ExtArgs> = {}>(args?: Subset<T, Timecard$jobArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    task<T extends Timecard$taskArgs<ExtArgs> = {}>(args?: Subset<T, Timecard$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    wps<T extends Timecard$wpsArgs<ExtArgs> = {}>(args?: Subset<T, Timecard$wpsArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    weldPasses<T extends Timecard$weldPassesArgs<ExtArgs> = {}>(args?: Subset<T, Timecard$weldPassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Timecard model
   */
  interface TimecardFieldRefs {
    readonly id: FieldRef<"Timecard", 'String'>
    readonly userId: FieldRef<"Timecard", 'String'>
    readonly jobId: FieldRef<"Timecard", 'String'>
    readonly taskId: FieldRef<"Timecard", 'String'>
    readonly startTime: FieldRef<"Timecard", 'DateTime'>
    readonly endTime: FieldRef<"Timecard", 'DateTime'>
    readonly totalHours: FieldRef<"Timecard", 'Float'>
    readonly wpsId: FieldRef<"Timecard", 'String'>
    readonly notes: FieldRef<"Timecard", 'String'>
    readonly isApproved: FieldRef<"Timecard", 'Boolean'>
    readonly createdAt: FieldRef<"Timecard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Timecard findUnique
   */
  export type TimecardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * Filter, which Timecard to fetch.
     */
    where: TimecardWhereUniqueInput
  }

  /**
   * Timecard findUniqueOrThrow
   */
  export type TimecardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * Filter, which Timecard to fetch.
     */
    where: TimecardWhereUniqueInput
  }

  /**
   * Timecard findFirst
   */
  export type TimecardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * Filter, which Timecard to fetch.
     */
    where?: TimecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timecards to fetch.
     */
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Timecards.
     */
    cursor?: TimecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timecards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Timecards.
     */
    distinct?: TimecardScalarFieldEnum | TimecardScalarFieldEnum[]
  }

  /**
   * Timecard findFirstOrThrow
   */
  export type TimecardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * Filter, which Timecard to fetch.
     */
    where?: TimecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timecards to fetch.
     */
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Timecards.
     */
    cursor?: TimecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timecards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Timecards.
     */
    distinct?: TimecardScalarFieldEnum | TimecardScalarFieldEnum[]
  }

  /**
   * Timecard findMany
   */
  export type TimecardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * Filter, which Timecards to fetch.
     */
    where?: TimecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timecards to fetch.
     */
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Timecards.
     */
    cursor?: TimecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timecards.
     */
    skip?: number
    distinct?: TimecardScalarFieldEnum | TimecardScalarFieldEnum[]
  }

  /**
   * Timecard create
   */
  export type TimecardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * The data needed to create a Timecard.
     */
    data: XOR<TimecardCreateInput, TimecardUncheckedCreateInput>
  }

  /**
   * Timecard createMany
   */
  export type TimecardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Timecards.
     */
    data: TimecardCreateManyInput | TimecardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Timecard createManyAndReturn
   */
  export type TimecardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * The data used to create many Timecards.
     */
    data: TimecardCreateManyInput | TimecardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Timecard update
   */
  export type TimecardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * The data needed to update a Timecard.
     */
    data: XOR<TimecardUpdateInput, TimecardUncheckedUpdateInput>
    /**
     * Choose, which Timecard to update.
     */
    where: TimecardWhereUniqueInput
  }

  /**
   * Timecard updateMany
   */
  export type TimecardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Timecards.
     */
    data: XOR<TimecardUpdateManyMutationInput, TimecardUncheckedUpdateManyInput>
    /**
     * Filter which Timecards to update
     */
    where?: TimecardWhereInput
    /**
     * Limit how many Timecards to update.
     */
    limit?: number
  }

  /**
   * Timecard updateManyAndReturn
   */
  export type TimecardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * The data used to update Timecards.
     */
    data: XOR<TimecardUpdateManyMutationInput, TimecardUncheckedUpdateManyInput>
    /**
     * Filter which Timecards to update
     */
    where?: TimecardWhereInput
    /**
     * Limit how many Timecards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Timecard upsert
   */
  export type TimecardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * The filter to search for the Timecard to update in case it exists.
     */
    where: TimecardWhereUniqueInput
    /**
     * In case the Timecard found by the `where` argument doesn't exist, create a new Timecard with this data.
     */
    create: XOR<TimecardCreateInput, TimecardUncheckedCreateInput>
    /**
     * In case the Timecard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimecardUpdateInput, TimecardUncheckedUpdateInput>
  }

  /**
   * Timecard delete
   */
  export type TimecardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    /**
     * Filter which Timecard to delete.
     */
    where: TimecardWhereUniqueInput
  }

  /**
   * Timecard deleteMany
   */
  export type TimecardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Timecards to delete
     */
    where?: TimecardWhereInput
    /**
     * Limit how many Timecards to delete.
     */
    limit?: number
  }

  /**
   * Timecard.job
   */
  export type Timecard$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
  }

  /**
   * Timecard.task
   */
  export type Timecard$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Timecard.wps
   */
  export type Timecard$wpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    where?: WpsSpecWhereInput
  }

  /**
   * Timecard.weldPasses
   */
  export type Timecard$weldPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    where?: WeldPassWhereInput
    orderBy?: WeldPassOrderByWithRelationInput | WeldPassOrderByWithRelationInput[]
    cursor?: WeldPassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeldPassScalarFieldEnum | WeldPassScalarFieldEnum[]
  }

  /**
   * Timecard without action
   */
  export type TimecardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
  }


  /**
   * Model WeldPass
   */

  export type AggregateWeldPass = {
    _count: WeldPassCountAggregateOutputType | null
    _avg: WeldPassAvgAggregateOutputType | null
    _sum: WeldPassSumAggregateOutputType | null
    _min: WeldPassMinAggregateOutputType | null
    _max: WeldPassMaxAggregateOutputType | null
  }

  export type WeldPassAvgAggregateOutputType = {
    passNumber: number | null
    amps: number | null
    volts: number | null
    wireFeed: number | null
    travelSpeed: number | null
  }

  export type WeldPassSumAggregateOutputType = {
    passNumber: number | null
    amps: number | null
    volts: number | null
    wireFeed: number | null
    travelSpeed: number | null
  }

  export type WeldPassMinAggregateOutputType = {
    id: string | null
    timecardId: string | null
    welderId: string | null
    wpsId: string | null
    jointNumber: string | null
    passNumber: number | null
    amps: number | null
    volts: number | null
    wireFeed: number | null
    travelSpeed: number | null
    notes: string | null
    createdAt: Date | null
  }

  export type WeldPassMaxAggregateOutputType = {
    id: string | null
    timecardId: string | null
    welderId: string | null
    wpsId: string | null
    jointNumber: string | null
    passNumber: number | null
    amps: number | null
    volts: number | null
    wireFeed: number | null
    travelSpeed: number | null
    notes: string | null
    createdAt: Date | null
  }

  export type WeldPassCountAggregateOutputType = {
    id: number
    timecardId: number
    welderId: number
    wpsId: number
    jointNumber: number
    passNumber: number
    amps: number
    volts: number
    wireFeed: number
    travelSpeed: number
    notes: number
    createdAt: number
    _all: number
  }


  export type WeldPassAvgAggregateInputType = {
    passNumber?: true
    amps?: true
    volts?: true
    wireFeed?: true
    travelSpeed?: true
  }

  export type WeldPassSumAggregateInputType = {
    passNumber?: true
    amps?: true
    volts?: true
    wireFeed?: true
    travelSpeed?: true
  }

  export type WeldPassMinAggregateInputType = {
    id?: true
    timecardId?: true
    welderId?: true
    wpsId?: true
    jointNumber?: true
    passNumber?: true
    amps?: true
    volts?: true
    wireFeed?: true
    travelSpeed?: true
    notes?: true
    createdAt?: true
  }

  export type WeldPassMaxAggregateInputType = {
    id?: true
    timecardId?: true
    welderId?: true
    wpsId?: true
    jointNumber?: true
    passNumber?: true
    amps?: true
    volts?: true
    wireFeed?: true
    travelSpeed?: true
    notes?: true
    createdAt?: true
  }

  export type WeldPassCountAggregateInputType = {
    id?: true
    timecardId?: true
    welderId?: true
    wpsId?: true
    jointNumber?: true
    passNumber?: true
    amps?: true
    volts?: true
    wireFeed?: true
    travelSpeed?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type WeldPassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeldPass to aggregate.
     */
    where?: WeldPassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldPasses to fetch.
     */
    orderBy?: WeldPassOrderByWithRelationInput | WeldPassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeldPassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldPasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldPasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeldPasses
    **/
    _count?: true | WeldPassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeldPassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeldPassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeldPassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeldPassMaxAggregateInputType
  }

  export type GetWeldPassAggregateType<T extends WeldPassAggregateArgs> = {
        [P in keyof T & keyof AggregateWeldPass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeldPass[P]>
      : GetScalarType<T[P], AggregateWeldPass[P]>
  }




  export type WeldPassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeldPassWhereInput
    orderBy?: WeldPassOrderByWithAggregationInput | WeldPassOrderByWithAggregationInput[]
    by: WeldPassScalarFieldEnum[] | WeldPassScalarFieldEnum
    having?: WeldPassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeldPassCountAggregateInputType | true
    _avg?: WeldPassAvgAggregateInputType
    _sum?: WeldPassSumAggregateInputType
    _min?: WeldPassMinAggregateInputType
    _max?: WeldPassMaxAggregateInputType
  }

  export type WeldPassGroupByOutputType = {
    id: string
    timecardId: string
    welderId: string
    wpsId: string
    jointNumber: string | null
    passNumber: number
    amps: number | null
    volts: number | null
    wireFeed: number | null
    travelSpeed: number | null
    notes: string | null
    createdAt: Date
    _count: WeldPassCountAggregateOutputType | null
    _avg: WeldPassAvgAggregateOutputType | null
    _sum: WeldPassSumAggregateOutputType | null
    _min: WeldPassMinAggregateOutputType | null
    _max: WeldPassMaxAggregateOutputType | null
  }

  type GetWeldPassGroupByPayload<T extends WeldPassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeldPassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeldPassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeldPassGroupByOutputType[P]>
            : GetScalarType<T[P], WeldPassGroupByOutputType[P]>
        }
      >
    >


  export type WeldPassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timecardId?: boolean
    welderId?: boolean
    wpsId?: boolean
    jointNumber?: boolean
    passNumber?: boolean
    amps?: boolean
    volts?: boolean
    wireFeed?: boolean
    travelSpeed?: boolean
    notes?: boolean
    createdAt?: boolean
    timecard?: boolean | TimecardDefaultArgs<ExtArgs>
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weldPass"]>

  export type WeldPassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timecardId?: boolean
    welderId?: boolean
    wpsId?: boolean
    jointNumber?: boolean
    passNumber?: boolean
    amps?: boolean
    volts?: boolean
    wireFeed?: boolean
    travelSpeed?: boolean
    notes?: boolean
    createdAt?: boolean
    timecard?: boolean | TimecardDefaultArgs<ExtArgs>
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weldPass"]>

  export type WeldPassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timecardId?: boolean
    welderId?: boolean
    wpsId?: boolean
    jointNumber?: boolean
    passNumber?: boolean
    amps?: boolean
    volts?: boolean
    wireFeed?: boolean
    travelSpeed?: boolean
    notes?: boolean
    createdAt?: boolean
    timecard?: boolean | TimecardDefaultArgs<ExtArgs>
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weldPass"]>

  export type WeldPassSelectScalar = {
    id?: boolean
    timecardId?: boolean
    welderId?: boolean
    wpsId?: boolean
    jointNumber?: boolean
    passNumber?: boolean
    amps?: boolean
    volts?: boolean
    wireFeed?: boolean
    travelSpeed?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type WeldPassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "timecardId" | "welderId" | "wpsId" | "jointNumber" | "passNumber" | "amps" | "volts" | "wireFeed" | "travelSpeed" | "notes" | "createdAt", ExtArgs["result"]["weldPass"]>
  export type WeldPassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timecard?: boolean | TimecardDefaultArgs<ExtArgs>
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }
  export type WeldPassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timecard?: boolean | TimecardDefaultArgs<ExtArgs>
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }
  export type WeldPassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timecard?: boolean | TimecardDefaultArgs<ExtArgs>
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }

  export type $WeldPassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeldPass"
    objects: {
      timecard: Prisma.$TimecardPayload<ExtArgs>
      welder: Prisma.$UserPayload<ExtArgs>
      wps: Prisma.$WpsSpecPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      timecardId: string
      welderId: string
      wpsId: string
      jointNumber: string | null
      passNumber: number
      amps: number | null
      volts: number | null
      wireFeed: number | null
      travelSpeed: number | null
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["weldPass"]>
    composites: {}
  }

  type WeldPassGetPayload<S extends boolean | null | undefined | WeldPassDefaultArgs> = $Result.GetResult<Prisma.$WeldPassPayload, S>

  type WeldPassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WeldPassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WeldPassCountAggregateInputType | true
    }

  export interface WeldPassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeldPass'], meta: { name: 'WeldPass' } }
    /**
     * Find zero or one WeldPass that matches the filter.
     * @param {WeldPassFindUniqueArgs} args - Arguments to find a WeldPass
     * @example
     * // Get one WeldPass
     * const weldPass = await prisma.weldPass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeldPassFindUniqueArgs>(args: SelectSubset<T, WeldPassFindUniqueArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WeldPass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WeldPassFindUniqueOrThrowArgs} args - Arguments to find a WeldPass
     * @example
     * // Get one WeldPass
     * const weldPass = await prisma.weldPass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeldPassFindUniqueOrThrowArgs>(args: SelectSubset<T, WeldPassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeldPass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldPassFindFirstArgs} args - Arguments to find a WeldPass
     * @example
     * // Get one WeldPass
     * const weldPass = await prisma.weldPass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeldPassFindFirstArgs>(args?: SelectSubset<T, WeldPassFindFirstArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeldPass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldPassFindFirstOrThrowArgs} args - Arguments to find a WeldPass
     * @example
     * // Get one WeldPass
     * const weldPass = await prisma.weldPass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeldPassFindFirstOrThrowArgs>(args?: SelectSubset<T, WeldPassFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WeldPasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldPassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeldPasses
     * const weldPasses = await prisma.weldPass.findMany()
     * 
     * // Get first 10 WeldPasses
     * const weldPasses = await prisma.weldPass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weldPassWithIdOnly = await prisma.weldPass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeldPassFindManyArgs>(args?: SelectSubset<T, WeldPassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WeldPass.
     * @param {WeldPassCreateArgs} args - Arguments to create a WeldPass.
     * @example
     * // Create one WeldPass
     * const WeldPass = await prisma.weldPass.create({
     *   data: {
     *     // ... data to create a WeldPass
     *   }
     * })
     * 
     */
    create<T extends WeldPassCreateArgs>(args: SelectSubset<T, WeldPassCreateArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WeldPasses.
     * @param {WeldPassCreateManyArgs} args - Arguments to create many WeldPasses.
     * @example
     * // Create many WeldPasses
     * const weldPass = await prisma.weldPass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeldPassCreateManyArgs>(args?: SelectSubset<T, WeldPassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeldPasses and returns the data saved in the database.
     * @param {WeldPassCreateManyAndReturnArgs} args - Arguments to create many WeldPasses.
     * @example
     * // Create many WeldPasses
     * const weldPass = await prisma.weldPass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeldPasses and only return the `id`
     * const weldPassWithIdOnly = await prisma.weldPass.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeldPassCreateManyAndReturnArgs>(args?: SelectSubset<T, WeldPassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WeldPass.
     * @param {WeldPassDeleteArgs} args - Arguments to delete one WeldPass.
     * @example
     * // Delete one WeldPass
     * const WeldPass = await prisma.weldPass.delete({
     *   where: {
     *     // ... filter to delete one WeldPass
     *   }
     * })
     * 
     */
    delete<T extends WeldPassDeleteArgs>(args: SelectSubset<T, WeldPassDeleteArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WeldPass.
     * @param {WeldPassUpdateArgs} args - Arguments to update one WeldPass.
     * @example
     * // Update one WeldPass
     * const weldPass = await prisma.weldPass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeldPassUpdateArgs>(args: SelectSubset<T, WeldPassUpdateArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WeldPasses.
     * @param {WeldPassDeleteManyArgs} args - Arguments to filter WeldPasses to delete.
     * @example
     * // Delete a few WeldPasses
     * const { count } = await prisma.weldPass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeldPassDeleteManyArgs>(args?: SelectSubset<T, WeldPassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeldPasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldPassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeldPasses
     * const weldPass = await prisma.weldPass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeldPassUpdateManyArgs>(args: SelectSubset<T, WeldPassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeldPasses and returns the data updated in the database.
     * @param {WeldPassUpdateManyAndReturnArgs} args - Arguments to update many WeldPasses.
     * @example
     * // Update many WeldPasses
     * const weldPass = await prisma.weldPass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WeldPasses and only return the `id`
     * const weldPassWithIdOnly = await prisma.weldPass.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WeldPassUpdateManyAndReturnArgs>(args: SelectSubset<T, WeldPassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WeldPass.
     * @param {WeldPassUpsertArgs} args - Arguments to update or create a WeldPass.
     * @example
     * // Update or create a WeldPass
     * const weldPass = await prisma.weldPass.upsert({
     *   create: {
     *     // ... data to create a WeldPass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeldPass we want to update
     *   }
     * })
     */
    upsert<T extends WeldPassUpsertArgs>(args: SelectSubset<T, WeldPassUpsertArgs<ExtArgs>>): Prisma__WeldPassClient<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WeldPasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldPassCountArgs} args - Arguments to filter WeldPasses to count.
     * @example
     * // Count the number of WeldPasses
     * const count = await prisma.weldPass.count({
     *   where: {
     *     // ... the filter for the WeldPasses we want to count
     *   }
     * })
    **/
    count<T extends WeldPassCountArgs>(
      args?: Subset<T, WeldPassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeldPassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeldPass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldPassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeldPassAggregateArgs>(args: Subset<T, WeldPassAggregateArgs>): Prisma.PrismaPromise<GetWeldPassAggregateType<T>>

    /**
     * Group by WeldPass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldPassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeldPassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeldPassGroupByArgs['orderBy'] }
        : { orderBy?: WeldPassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeldPassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeldPassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeldPass model
   */
  readonly fields: WeldPassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeldPass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeldPassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    timecard<T extends TimecardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TimecardDefaultArgs<ExtArgs>>): Prisma__TimecardClient<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    welder<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wps<T extends WpsSpecDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WpsSpecDefaultArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeldPass model
   */
  interface WeldPassFieldRefs {
    readonly id: FieldRef<"WeldPass", 'String'>
    readonly timecardId: FieldRef<"WeldPass", 'String'>
    readonly welderId: FieldRef<"WeldPass", 'String'>
    readonly wpsId: FieldRef<"WeldPass", 'String'>
    readonly jointNumber: FieldRef<"WeldPass", 'String'>
    readonly passNumber: FieldRef<"WeldPass", 'Int'>
    readonly amps: FieldRef<"WeldPass", 'Float'>
    readonly volts: FieldRef<"WeldPass", 'Float'>
    readonly wireFeed: FieldRef<"WeldPass", 'Float'>
    readonly travelSpeed: FieldRef<"WeldPass", 'Float'>
    readonly notes: FieldRef<"WeldPass", 'String'>
    readonly createdAt: FieldRef<"WeldPass", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WeldPass findUnique
   */
  export type WeldPassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * Filter, which WeldPass to fetch.
     */
    where: WeldPassWhereUniqueInput
  }

  /**
   * WeldPass findUniqueOrThrow
   */
  export type WeldPassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * Filter, which WeldPass to fetch.
     */
    where: WeldPassWhereUniqueInput
  }

  /**
   * WeldPass findFirst
   */
  export type WeldPassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * Filter, which WeldPass to fetch.
     */
    where?: WeldPassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldPasses to fetch.
     */
    orderBy?: WeldPassOrderByWithRelationInput | WeldPassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeldPasses.
     */
    cursor?: WeldPassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldPasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldPasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeldPasses.
     */
    distinct?: WeldPassScalarFieldEnum | WeldPassScalarFieldEnum[]
  }

  /**
   * WeldPass findFirstOrThrow
   */
  export type WeldPassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * Filter, which WeldPass to fetch.
     */
    where?: WeldPassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldPasses to fetch.
     */
    orderBy?: WeldPassOrderByWithRelationInput | WeldPassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeldPasses.
     */
    cursor?: WeldPassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldPasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldPasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeldPasses.
     */
    distinct?: WeldPassScalarFieldEnum | WeldPassScalarFieldEnum[]
  }

  /**
   * WeldPass findMany
   */
  export type WeldPassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * Filter, which WeldPasses to fetch.
     */
    where?: WeldPassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldPasses to fetch.
     */
    orderBy?: WeldPassOrderByWithRelationInput | WeldPassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeldPasses.
     */
    cursor?: WeldPassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldPasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldPasses.
     */
    skip?: number
    distinct?: WeldPassScalarFieldEnum | WeldPassScalarFieldEnum[]
  }

  /**
   * WeldPass create
   */
  export type WeldPassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * The data needed to create a WeldPass.
     */
    data: XOR<WeldPassCreateInput, WeldPassUncheckedCreateInput>
  }

  /**
   * WeldPass createMany
   */
  export type WeldPassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeldPasses.
     */
    data: WeldPassCreateManyInput | WeldPassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeldPass createManyAndReturn
   */
  export type WeldPassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * The data used to create many WeldPasses.
     */
    data: WeldPassCreateManyInput | WeldPassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeldPass update
   */
  export type WeldPassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * The data needed to update a WeldPass.
     */
    data: XOR<WeldPassUpdateInput, WeldPassUncheckedUpdateInput>
    /**
     * Choose, which WeldPass to update.
     */
    where: WeldPassWhereUniqueInput
  }

  /**
   * WeldPass updateMany
   */
  export type WeldPassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeldPasses.
     */
    data: XOR<WeldPassUpdateManyMutationInput, WeldPassUncheckedUpdateManyInput>
    /**
     * Filter which WeldPasses to update
     */
    where?: WeldPassWhereInput
    /**
     * Limit how many WeldPasses to update.
     */
    limit?: number
  }

  /**
   * WeldPass updateManyAndReturn
   */
  export type WeldPassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * The data used to update WeldPasses.
     */
    data: XOR<WeldPassUpdateManyMutationInput, WeldPassUncheckedUpdateManyInput>
    /**
     * Filter which WeldPasses to update
     */
    where?: WeldPassWhereInput
    /**
     * Limit how many WeldPasses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeldPass upsert
   */
  export type WeldPassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * The filter to search for the WeldPass to update in case it exists.
     */
    where: WeldPassWhereUniqueInput
    /**
     * In case the WeldPass found by the `where` argument doesn't exist, create a new WeldPass with this data.
     */
    create: XOR<WeldPassCreateInput, WeldPassUncheckedCreateInput>
    /**
     * In case the WeldPass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeldPassUpdateInput, WeldPassUncheckedUpdateInput>
  }

  /**
   * WeldPass delete
   */
  export type WeldPassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    /**
     * Filter which WeldPass to delete.
     */
    where: WeldPassWhereUniqueInput
  }

  /**
   * WeldPass deleteMany
   */
  export type WeldPassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeldPasses to delete
     */
    where?: WeldPassWhereInput
    /**
     * Limit how many WeldPasses to delete.
     */
    limit?: number
  }

  /**
   * WeldPass without action
   */
  export type WeldPassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
  }


  /**
   * Model WpsSpec
   */

  export type AggregateWpsSpec = {
    _count: WpsSpecCountAggregateOutputType | null
    _min: WpsSpecMinAggregateOutputType | null
    _max: WpsSpecMaxAggregateOutputType | null
  }

  export type WpsSpecMinAggregateOutputType = {
    id: string | null
    code: string | null
    title: string | null
    process: string | null
    materialGroup: string | null
    thickness: string | null
    pdfUrl: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WpsSpecMaxAggregateOutputType = {
    id: string | null
    code: string | null
    title: string | null
    process: string | null
    materialGroup: string | null
    thickness: string | null
    pdfUrl: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WpsSpecCountAggregateOutputType = {
    id: number
    code: number
    title: number
    process: number
    materialGroup: number
    positions: number
    thickness: number
    pdfUrl: number
    isActive: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    parameters: number
    _all: number
  }


  export type WpsSpecMinAggregateInputType = {
    id?: true
    code?: true
    title?: true
    process?: true
    materialGroup?: true
    thickness?: true
    pdfUrl?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WpsSpecMaxAggregateInputType = {
    id?: true
    code?: true
    title?: true
    process?: true
    materialGroup?: true
    thickness?: true
    pdfUrl?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WpsSpecCountAggregateInputType = {
    id?: true
    code?: true
    title?: true
    process?: true
    materialGroup?: true
    positions?: true
    thickness?: true
    pdfUrl?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    parameters?: true
    _all?: true
  }

  export type WpsSpecAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WpsSpec to aggregate.
     */
    where?: WpsSpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WpsSpecs to fetch.
     */
    orderBy?: WpsSpecOrderByWithRelationInput | WpsSpecOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WpsSpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WpsSpecs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WpsSpecs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WpsSpecs
    **/
    _count?: true | WpsSpecCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WpsSpecMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WpsSpecMaxAggregateInputType
  }

  export type GetWpsSpecAggregateType<T extends WpsSpecAggregateArgs> = {
        [P in keyof T & keyof AggregateWpsSpec]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWpsSpec[P]>
      : GetScalarType<T[P], AggregateWpsSpec[P]>
  }




  export type WpsSpecGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WpsSpecWhereInput
    orderBy?: WpsSpecOrderByWithAggregationInput | WpsSpecOrderByWithAggregationInput[]
    by: WpsSpecScalarFieldEnum[] | WpsSpecScalarFieldEnum
    having?: WpsSpecScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WpsSpecCountAggregateInputType | true
    _min?: WpsSpecMinAggregateInputType
    _max?: WpsSpecMaxAggregateInputType
  }

  export type WpsSpecGroupByOutputType = {
    id: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions: string[]
    thickness: string | null
    pdfUrl: string | null
    isActive: boolean
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    parameters: JsonValue | null
    _count: WpsSpecCountAggregateOutputType | null
    _min: WpsSpecMinAggregateOutputType | null
    _max: WpsSpecMaxAggregateOutputType | null
  }

  type GetWpsSpecGroupByPayload<T extends WpsSpecGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WpsSpecGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WpsSpecGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WpsSpecGroupByOutputType[P]>
            : GetScalarType<T[P], WpsSpecGroupByOutputType[P]>
        }
      >
    >


  export type WpsSpecSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    process?: boolean
    materialGroup?: boolean
    positions?: boolean
    thickness?: boolean
    pdfUrl?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parameters?: boolean
    pqrTests?: boolean | WpsSpec$pqrTestsArgs<ExtArgs>
    welderCerts?: boolean | WpsSpec$welderCertsArgs<ExtArgs>
    timecards?: boolean | WpsSpec$timecardsArgs<ExtArgs>
    weldPasses?: boolean | WpsSpec$weldPassesArgs<ExtArgs>
    _count?: boolean | WpsSpecCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wpsSpec"]>

  export type WpsSpecSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    process?: boolean
    materialGroup?: boolean
    positions?: boolean
    thickness?: boolean
    pdfUrl?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parameters?: boolean
  }, ExtArgs["result"]["wpsSpec"]>

  export type WpsSpecSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    process?: boolean
    materialGroup?: boolean
    positions?: boolean
    thickness?: boolean
    pdfUrl?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parameters?: boolean
  }, ExtArgs["result"]["wpsSpec"]>

  export type WpsSpecSelectScalar = {
    id?: boolean
    code?: boolean
    title?: boolean
    process?: boolean
    materialGroup?: boolean
    positions?: boolean
    thickness?: boolean
    pdfUrl?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parameters?: boolean
  }

  export type WpsSpecOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "title" | "process" | "materialGroup" | "positions" | "thickness" | "pdfUrl" | "isActive" | "expiresAt" | "createdAt" | "updatedAt" | "parameters", ExtArgs["result"]["wpsSpec"]>
  export type WpsSpecInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pqrTests?: boolean | WpsSpec$pqrTestsArgs<ExtArgs>
    welderCerts?: boolean | WpsSpec$welderCertsArgs<ExtArgs>
    timecards?: boolean | WpsSpec$timecardsArgs<ExtArgs>
    weldPasses?: boolean | WpsSpec$weldPassesArgs<ExtArgs>
    _count?: boolean | WpsSpecCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WpsSpecIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WpsSpecIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WpsSpecPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WpsSpec"
    objects: {
      pqrTests: Prisma.$PqrTestPayload<ExtArgs>[]
      welderCerts: Prisma.$WelderCertPayload<ExtArgs>[]
      timecards: Prisma.$TimecardPayload<ExtArgs>[]
      weldPasses: Prisma.$WeldPassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      title: string
      process: string
      materialGroup: string
      positions: string[]
      thickness: string | null
      pdfUrl: string | null
      isActive: boolean
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
      parameters: Prisma.JsonValue | null
    }, ExtArgs["result"]["wpsSpec"]>
    composites: {}
  }

  type WpsSpecGetPayload<S extends boolean | null | undefined | WpsSpecDefaultArgs> = $Result.GetResult<Prisma.$WpsSpecPayload, S>

  type WpsSpecCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WpsSpecFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WpsSpecCountAggregateInputType | true
    }

  export interface WpsSpecDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WpsSpec'], meta: { name: 'WpsSpec' } }
    /**
     * Find zero or one WpsSpec that matches the filter.
     * @param {WpsSpecFindUniqueArgs} args - Arguments to find a WpsSpec
     * @example
     * // Get one WpsSpec
     * const wpsSpec = await prisma.wpsSpec.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WpsSpecFindUniqueArgs>(args: SelectSubset<T, WpsSpecFindUniqueArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WpsSpec that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WpsSpecFindUniqueOrThrowArgs} args - Arguments to find a WpsSpec
     * @example
     * // Get one WpsSpec
     * const wpsSpec = await prisma.wpsSpec.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WpsSpecFindUniqueOrThrowArgs>(args: SelectSubset<T, WpsSpecFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WpsSpec that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WpsSpecFindFirstArgs} args - Arguments to find a WpsSpec
     * @example
     * // Get one WpsSpec
     * const wpsSpec = await prisma.wpsSpec.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WpsSpecFindFirstArgs>(args?: SelectSubset<T, WpsSpecFindFirstArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WpsSpec that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WpsSpecFindFirstOrThrowArgs} args - Arguments to find a WpsSpec
     * @example
     * // Get one WpsSpec
     * const wpsSpec = await prisma.wpsSpec.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WpsSpecFindFirstOrThrowArgs>(args?: SelectSubset<T, WpsSpecFindFirstOrThrowArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WpsSpecs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WpsSpecFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WpsSpecs
     * const wpsSpecs = await prisma.wpsSpec.findMany()
     * 
     * // Get first 10 WpsSpecs
     * const wpsSpecs = await prisma.wpsSpec.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wpsSpecWithIdOnly = await prisma.wpsSpec.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WpsSpecFindManyArgs>(args?: SelectSubset<T, WpsSpecFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WpsSpec.
     * @param {WpsSpecCreateArgs} args - Arguments to create a WpsSpec.
     * @example
     * // Create one WpsSpec
     * const WpsSpec = await prisma.wpsSpec.create({
     *   data: {
     *     // ... data to create a WpsSpec
     *   }
     * })
     * 
     */
    create<T extends WpsSpecCreateArgs>(args: SelectSubset<T, WpsSpecCreateArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WpsSpecs.
     * @param {WpsSpecCreateManyArgs} args - Arguments to create many WpsSpecs.
     * @example
     * // Create many WpsSpecs
     * const wpsSpec = await prisma.wpsSpec.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WpsSpecCreateManyArgs>(args?: SelectSubset<T, WpsSpecCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WpsSpecs and returns the data saved in the database.
     * @param {WpsSpecCreateManyAndReturnArgs} args - Arguments to create many WpsSpecs.
     * @example
     * // Create many WpsSpecs
     * const wpsSpec = await prisma.wpsSpec.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WpsSpecs and only return the `id`
     * const wpsSpecWithIdOnly = await prisma.wpsSpec.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WpsSpecCreateManyAndReturnArgs>(args?: SelectSubset<T, WpsSpecCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WpsSpec.
     * @param {WpsSpecDeleteArgs} args - Arguments to delete one WpsSpec.
     * @example
     * // Delete one WpsSpec
     * const WpsSpec = await prisma.wpsSpec.delete({
     *   where: {
     *     // ... filter to delete one WpsSpec
     *   }
     * })
     * 
     */
    delete<T extends WpsSpecDeleteArgs>(args: SelectSubset<T, WpsSpecDeleteArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WpsSpec.
     * @param {WpsSpecUpdateArgs} args - Arguments to update one WpsSpec.
     * @example
     * // Update one WpsSpec
     * const wpsSpec = await prisma.wpsSpec.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WpsSpecUpdateArgs>(args: SelectSubset<T, WpsSpecUpdateArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WpsSpecs.
     * @param {WpsSpecDeleteManyArgs} args - Arguments to filter WpsSpecs to delete.
     * @example
     * // Delete a few WpsSpecs
     * const { count } = await prisma.wpsSpec.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WpsSpecDeleteManyArgs>(args?: SelectSubset<T, WpsSpecDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WpsSpecs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WpsSpecUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WpsSpecs
     * const wpsSpec = await prisma.wpsSpec.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WpsSpecUpdateManyArgs>(args: SelectSubset<T, WpsSpecUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WpsSpecs and returns the data updated in the database.
     * @param {WpsSpecUpdateManyAndReturnArgs} args - Arguments to update many WpsSpecs.
     * @example
     * // Update many WpsSpecs
     * const wpsSpec = await prisma.wpsSpec.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WpsSpecs and only return the `id`
     * const wpsSpecWithIdOnly = await prisma.wpsSpec.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WpsSpecUpdateManyAndReturnArgs>(args: SelectSubset<T, WpsSpecUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WpsSpec.
     * @param {WpsSpecUpsertArgs} args - Arguments to update or create a WpsSpec.
     * @example
     * // Update or create a WpsSpec
     * const wpsSpec = await prisma.wpsSpec.upsert({
     *   create: {
     *     // ... data to create a WpsSpec
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WpsSpec we want to update
     *   }
     * })
     */
    upsert<T extends WpsSpecUpsertArgs>(args: SelectSubset<T, WpsSpecUpsertArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WpsSpecs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WpsSpecCountArgs} args - Arguments to filter WpsSpecs to count.
     * @example
     * // Count the number of WpsSpecs
     * const count = await prisma.wpsSpec.count({
     *   where: {
     *     // ... the filter for the WpsSpecs we want to count
     *   }
     * })
    **/
    count<T extends WpsSpecCountArgs>(
      args?: Subset<T, WpsSpecCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WpsSpecCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WpsSpec.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WpsSpecAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WpsSpecAggregateArgs>(args: Subset<T, WpsSpecAggregateArgs>): Prisma.PrismaPromise<GetWpsSpecAggregateType<T>>

    /**
     * Group by WpsSpec.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WpsSpecGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WpsSpecGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WpsSpecGroupByArgs['orderBy'] }
        : { orderBy?: WpsSpecGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WpsSpecGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWpsSpecGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WpsSpec model
   */
  readonly fields: WpsSpecFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WpsSpec.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WpsSpecClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pqrTests<T extends WpsSpec$pqrTestsArgs<ExtArgs> = {}>(args?: Subset<T, WpsSpec$pqrTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    welderCerts<T extends WpsSpec$welderCertsArgs<ExtArgs> = {}>(args?: Subset<T, WpsSpec$welderCertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timecards<T extends WpsSpec$timecardsArgs<ExtArgs> = {}>(args?: Subset<T, WpsSpec$timecardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimecardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weldPasses<T extends WpsSpec$weldPassesArgs<ExtArgs> = {}>(args?: Subset<T, WpsSpec$weldPassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldPassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WpsSpec model
   */
  interface WpsSpecFieldRefs {
    readonly id: FieldRef<"WpsSpec", 'String'>
    readonly code: FieldRef<"WpsSpec", 'String'>
    readonly title: FieldRef<"WpsSpec", 'String'>
    readonly process: FieldRef<"WpsSpec", 'String'>
    readonly materialGroup: FieldRef<"WpsSpec", 'String'>
    readonly positions: FieldRef<"WpsSpec", 'String[]'>
    readonly thickness: FieldRef<"WpsSpec", 'String'>
    readonly pdfUrl: FieldRef<"WpsSpec", 'String'>
    readonly isActive: FieldRef<"WpsSpec", 'Boolean'>
    readonly expiresAt: FieldRef<"WpsSpec", 'DateTime'>
    readonly createdAt: FieldRef<"WpsSpec", 'DateTime'>
    readonly updatedAt: FieldRef<"WpsSpec", 'DateTime'>
    readonly parameters: FieldRef<"WpsSpec", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * WpsSpec findUnique
   */
  export type WpsSpecFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * Filter, which WpsSpec to fetch.
     */
    where: WpsSpecWhereUniqueInput
  }

  /**
   * WpsSpec findUniqueOrThrow
   */
  export type WpsSpecFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * Filter, which WpsSpec to fetch.
     */
    where: WpsSpecWhereUniqueInput
  }

  /**
   * WpsSpec findFirst
   */
  export type WpsSpecFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * Filter, which WpsSpec to fetch.
     */
    where?: WpsSpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WpsSpecs to fetch.
     */
    orderBy?: WpsSpecOrderByWithRelationInput | WpsSpecOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WpsSpecs.
     */
    cursor?: WpsSpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WpsSpecs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WpsSpecs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WpsSpecs.
     */
    distinct?: WpsSpecScalarFieldEnum | WpsSpecScalarFieldEnum[]
  }

  /**
   * WpsSpec findFirstOrThrow
   */
  export type WpsSpecFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * Filter, which WpsSpec to fetch.
     */
    where?: WpsSpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WpsSpecs to fetch.
     */
    orderBy?: WpsSpecOrderByWithRelationInput | WpsSpecOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WpsSpecs.
     */
    cursor?: WpsSpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WpsSpecs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WpsSpecs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WpsSpecs.
     */
    distinct?: WpsSpecScalarFieldEnum | WpsSpecScalarFieldEnum[]
  }

  /**
   * WpsSpec findMany
   */
  export type WpsSpecFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * Filter, which WpsSpecs to fetch.
     */
    where?: WpsSpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WpsSpecs to fetch.
     */
    orderBy?: WpsSpecOrderByWithRelationInput | WpsSpecOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WpsSpecs.
     */
    cursor?: WpsSpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WpsSpecs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WpsSpecs.
     */
    skip?: number
    distinct?: WpsSpecScalarFieldEnum | WpsSpecScalarFieldEnum[]
  }

  /**
   * WpsSpec create
   */
  export type WpsSpecCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * The data needed to create a WpsSpec.
     */
    data: XOR<WpsSpecCreateInput, WpsSpecUncheckedCreateInput>
  }

  /**
   * WpsSpec createMany
   */
  export type WpsSpecCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WpsSpecs.
     */
    data: WpsSpecCreateManyInput | WpsSpecCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WpsSpec createManyAndReturn
   */
  export type WpsSpecCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * The data used to create many WpsSpecs.
     */
    data: WpsSpecCreateManyInput | WpsSpecCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WpsSpec update
   */
  export type WpsSpecUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * The data needed to update a WpsSpec.
     */
    data: XOR<WpsSpecUpdateInput, WpsSpecUncheckedUpdateInput>
    /**
     * Choose, which WpsSpec to update.
     */
    where: WpsSpecWhereUniqueInput
  }

  /**
   * WpsSpec updateMany
   */
  export type WpsSpecUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WpsSpecs.
     */
    data: XOR<WpsSpecUpdateManyMutationInput, WpsSpecUncheckedUpdateManyInput>
    /**
     * Filter which WpsSpecs to update
     */
    where?: WpsSpecWhereInput
    /**
     * Limit how many WpsSpecs to update.
     */
    limit?: number
  }

  /**
   * WpsSpec updateManyAndReturn
   */
  export type WpsSpecUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * The data used to update WpsSpecs.
     */
    data: XOR<WpsSpecUpdateManyMutationInput, WpsSpecUncheckedUpdateManyInput>
    /**
     * Filter which WpsSpecs to update
     */
    where?: WpsSpecWhereInput
    /**
     * Limit how many WpsSpecs to update.
     */
    limit?: number
  }

  /**
   * WpsSpec upsert
   */
  export type WpsSpecUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * The filter to search for the WpsSpec to update in case it exists.
     */
    where: WpsSpecWhereUniqueInput
    /**
     * In case the WpsSpec found by the `where` argument doesn't exist, create a new WpsSpec with this data.
     */
    create: XOR<WpsSpecCreateInput, WpsSpecUncheckedCreateInput>
    /**
     * In case the WpsSpec was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WpsSpecUpdateInput, WpsSpecUncheckedUpdateInput>
  }

  /**
   * WpsSpec delete
   */
  export type WpsSpecDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
    /**
     * Filter which WpsSpec to delete.
     */
    where: WpsSpecWhereUniqueInput
  }

  /**
   * WpsSpec deleteMany
   */
  export type WpsSpecDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WpsSpecs to delete
     */
    where?: WpsSpecWhereInput
    /**
     * Limit how many WpsSpecs to delete.
     */
    limit?: number
  }

  /**
   * WpsSpec.pqrTests
   */
  export type WpsSpec$pqrTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    where?: PqrTestWhereInput
    orderBy?: PqrTestOrderByWithRelationInput | PqrTestOrderByWithRelationInput[]
    cursor?: PqrTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PqrTestScalarFieldEnum | PqrTestScalarFieldEnum[]
  }

  /**
   * WpsSpec.welderCerts
   */
  export type WpsSpec$welderCertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    where?: WelderCertWhereInput
    orderBy?: WelderCertOrderByWithRelationInput | WelderCertOrderByWithRelationInput[]
    cursor?: WelderCertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WelderCertScalarFieldEnum | WelderCertScalarFieldEnum[]
  }

  /**
   * WpsSpec.timecards
   */
  export type WpsSpec$timecardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Timecard
     */
    select?: TimecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Timecard
     */
    omit?: TimecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimecardInclude<ExtArgs> | null
    where?: TimecardWhereInput
    orderBy?: TimecardOrderByWithRelationInput | TimecardOrderByWithRelationInput[]
    cursor?: TimecardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimecardScalarFieldEnum | TimecardScalarFieldEnum[]
  }

  /**
   * WpsSpec.weldPasses
   */
  export type WpsSpec$weldPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldPass
     */
    select?: WeldPassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldPass
     */
    omit?: WeldPassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldPassInclude<ExtArgs> | null
    where?: WeldPassWhereInput
    orderBy?: WeldPassOrderByWithRelationInput | WeldPassOrderByWithRelationInput[]
    cursor?: WeldPassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeldPassScalarFieldEnum | WeldPassScalarFieldEnum[]
  }

  /**
   * WpsSpec without action
   */
  export type WpsSpecDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WpsSpec
     */
    select?: WpsSpecSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WpsSpec
     */
    omit?: WpsSpecOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WpsSpecInclude<ExtArgs> | null
  }


  /**
   * Model PqrTest
   */

  export type AggregatePqrTest = {
    _count: PqrTestCountAggregateOutputType | null
    _avg: PqrTestAvgAggregateOutputType | null
    _sum: PqrTestSumAggregateOutputType | null
    _min: PqrTestMinAggregateOutputType | null
    _max: PqrTestMaxAggregateOutputType | null
  }

  export type PqrTestAvgAggregateOutputType = {
    value: number | null
  }

  export type PqrTestSumAggregateOutputType = {
    value: number | null
  }

  export type PqrTestMinAggregateOutputType = {
    id: string | null
    wpsId: string | null
    testType: string | null
    result: string | null
    value: number | null
    unit: string | null
    testDate: Date | null
    labName: string | null
    certUrl: string | null
    createdAt: Date | null
  }

  export type PqrTestMaxAggregateOutputType = {
    id: string | null
    wpsId: string | null
    testType: string | null
    result: string | null
    value: number | null
    unit: string | null
    testDate: Date | null
    labName: string | null
    certUrl: string | null
    createdAt: Date | null
  }

  export type PqrTestCountAggregateOutputType = {
    id: number
    wpsId: number
    testType: number
    result: number
    value: number
    unit: number
    testDate: number
    labName: number
    certUrl: number
    createdAt: number
    _all: number
  }


  export type PqrTestAvgAggregateInputType = {
    value?: true
  }

  export type PqrTestSumAggregateInputType = {
    value?: true
  }

  export type PqrTestMinAggregateInputType = {
    id?: true
    wpsId?: true
    testType?: true
    result?: true
    value?: true
    unit?: true
    testDate?: true
    labName?: true
    certUrl?: true
    createdAt?: true
  }

  export type PqrTestMaxAggregateInputType = {
    id?: true
    wpsId?: true
    testType?: true
    result?: true
    value?: true
    unit?: true
    testDate?: true
    labName?: true
    certUrl?: true
    createdAt?: true
  }

  export type PqrTestCountAggregateInputType = {
    id?: true
    wpsId?: true
    testType?: true
    result?: true
    value?: true
    unit?: true
    testDate?: true
    labName?: true
    certUrl?: true
    createdAt?: true
    _all?: true
  }

  export type PqrTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PqrTest to aggregate.
     */
    where?: PqrTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PqrTests to fetch.
     */
    orderBy?: PqrTestOrderByWithRelationInput | PqrTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PqrTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PqrTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PqrTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PqrTests
    **/
    _count?: true | PqrTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PqrTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PqrTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PqrTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PqrTestMaxAggregateInputType
  }

  export type GetPqrTestAggregateType<T extends PqrTestAggregateArgs> = {
        [P in keyof T & keyof AggregatePqrTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePqrTest[P]>
      : GetScalarType<T[P], AggregatePqrTest[P]>
  }




  export type PqrTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PqrTestWhereInput
    orderBy?: PqrTestOrderByWithAggregationInput | PqrTestOrderByWithAggregationInput[]
    by: PqrTestScalarFieldEnum[] | PqrTestScalarFieldEnum
    having?: PqrTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PqrTestCountAggregateInputType | true
    _avg?: PqrTestAvgAggregateInputType
    _sum?: PqrTestSumAggregateInputType
    _min?: PqrTestMinAggregateInputType
    _max?: PqrTestMaxAggregateInputType
  }

  export type PqrTestGroupByOutputType = {
    id: string
    wpsId: string
    testType: string
    result: string
    value: number | null
    unit: string | null
    testDate: Date
    labName: string | null
    certUrl: string | null
    createdAt: Date
    _count: PqrTestCountAggregateOutputType | null
    _avg: PqrTestAvgAggregateOutputType | null
    _sum: PqrTestSumAggregateOutputType | null
    _min: PqrTestMinAggregateOutputType | null
    _max: PqrTestMaxAggregateOutputType | null
  }

  type GetPqrTestGroupByPayload<T extends PqrTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PqrTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PqrTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PqrTestGroupByOutputType[P]>
            : GetScalarType<T[P], PqrTestGroupByOutputType[P]>
        }
      >
    >


  export type PqrTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wpsId?: boolean
    testType?: boolean
    result?: boolean
    value?: boolean
    unit?: boolean
    testDate?: boolean
    labName?: boolean
    certUrl?: boolean
    createdAt?: boolean
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pqrTest"]>

  export type PqrTestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wpsId?: boolean
    testType?: boolean
    result?: boolean
    value?: boolean
    unit?: boolean
    testDate?: boolean
    labName?: boolean
    certUrl?: boolean
    createdAt?: boolean
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pqrTest"]>

  export type PqrTestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wpsId?: boolean
    testType?: boolean
    result?: boolean
    value?: boolean
    unit?: boolean
    testDate?: boolean
    labName?: boolean
    certUrl?: boolean
    createdAt?: boolean
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pqrTest"]>

  export type PqrTestSelectScalar = {
    id?: boolean
    wpsId?: boolean
    testType?: boolean
    result?: boolean
    value?: boolean
    unit?: boolean
    testDate?: boolean
    labName?: boolean
    certUrl?: boolean
    createdAt?: boolean
  }

  export type PqrTestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "wpsId" | "testType" | "result" | "value" | "unit" | "testDate" | "labName" | "certUrl" | "createdAt", ExtArgs["result"]["pqrTest"]>
  export type PqrTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }
  export type PqrTestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }
  export type PqrTestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }

  export type $PqrTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PqrTest"
    objects: {
      wps: Prisma.$WpsSpecPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      wpsId: string
      testType: string
      result: string
      value: number | null
      unit: string | null
      testDate: Date
      labName: string | null
      certUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["pqrTest"]>
    composites: {}
  }

  type PqrTestGetPayload<S extends boolean | null | undefined | PqrTestDefaultArgs> = $Result.GetResult<Prisma.$PqrTestPayload, S>

  type PqrTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PqrTestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PqrTestCountAggregateInputType | true
    }

  export interface PqrTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PqrTest'], meta: { name: 'PqrTest' } }
    /**
     * Find zero or one PqrTest that matches the filter.
     * @param {PqrTestFindUniqueArgs} args - Arguments to find a PqrTest
     * @example
     * // Get one PqrTest
     * const pqrTest = await prisma.pqrTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PqrTestFindUniqueArgs>(args: SelectSubset<T, PqrTestFindUniqueArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PqrTest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PqrTestFindUniqueOrThrowArgs} args - Arguments to find a PqrTest
     * @example
     * // Get one PqrTest
     * const pqrTest = await prisma.pqrTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PqrTestFindUniqueOrThrowArgs>(args: SelectSubset<T, PqrTestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PqrTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PqrTestFindFirstArgs} args - Arguments to find a PqrTest
     * @example
     * // Get one PqrTest
     * const pqrTest = await prisma.pqrTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PqrTestFindFirstArgs>(args?: SelectSubset<T, PqrTestFindFirstArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PqrTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PqrTestFindFirstOrThrowArgs} args - Arguments to find a PqrTest
     * @example
     * // Get one PqrTest
     * const pqrTest = await prisma.pqrTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PqrTestFindFirstOrThrowArgs>(args?: SelectSubset<T, PqrTestFindFirstOrThrowArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PqrTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PqrTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PqrTests
     * const pqrTests = await prisma.pqrTest.findMany()
     * 
     * // Get first 10 PqrTests
     * const pqrTests = await prisma.pqrTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pqrTestWithIdOnly = await prisma.pqrTest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PqrTestFindManyArgs>(args?: SelectSubset<T, PqrTestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PqrTest.
     * @param {PqrTestCreateArgs} args - Arguments to create a PqrTest.
     * @example
     * // Create one PqrTest
     * const PqrTest = await prisma.pqrTest.create({
     *   data: {
     *     // ... data to create a PqrTest
     *   }
     * })
     * 
     */
    create<T extends PqrTestCreateArgs>(args: SelectSubset<T, PqrTestCreateArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PqrTests.
     * @param {PqrTestCreateManyArgs} args - Arguments to create many PqrTests.
     * @example
     * // Create many PqrTests
     * const pqrTest = await prisma.pqrTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PqrTestCreateManyArgs>(args?: SelectSubset<T, PqrTestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PqrTests and returns the data saved in the database.
     * @param {PqrTestCreateManyAndReturnArgs} args - Arguments to create many PqrTests.
     * @example
     * // Create many PqrTests
     * const pqrTest = await prisma.pqrTest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PqrTests and only return the `id`
     * const pqrTestWithIdOnly = await prisma.pqrTest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PqrTestCreateManyAndReturnArgs>(args?: SelectSubset<T, PqrTestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PqrTest.
     * @param {PqrTestDeleteArgs} args - Arguments to delete one PqrTest.
     * @example
     * // Delete one PqrTest
     * const PqrTest = await prisma.pqrTest.delete({
     *   where: {
     *     // ... filter to delete one PqrTest
     *   }
     * })
     * 
     */
    delete<T extends PqrTestDeleteArgs>(args: SelectSubset<T, PqrTestDeleteArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PqrTest.
     * @param {PqrTestUpdateArgs} args - Arguments to update one PqrTest.
     * @example
     * // Update one PqrTest
     * const pqrTest = await prisma.pqrTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PqrTestUpdateArgs>(args: SelectSubset<T, PqrTestUpdateArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PqrTests.
     * @param {PqrTestDeleteManyArgs} args - Arguments to filter PqrTests to delete.
     * @example
     * // Delete a few PqrTests
     * const { count } = await prisma.pqrTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PqrTestDeleteManyArgs>(args?: SelectSubset<T, PqrTestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PqrTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PqrTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PqrTests
     * const pqrTest = await prisma.pqrTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PqrTestUpdateManyArgs>(args: SelectSubset<T, PqrTestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PqrTests and returns the data updated in the database.
     * @param {PqrTestUpdateManyAndReturnArgs} args - Arguments to update many PqrTests.
     * @example
     * // Update many PqrTests
     * const pqrTest = await prisma.pqrTest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PqrTests and only return the `id`
     * const pqrTestWithIdOnly = await prisma.pqrTest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PqrTestUpdateManyAndReturnArgs>(args: SelectSubset<T, PqrTestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PqrTest.
     * @param {PqrTestUpsertArgs} args - Arguments to update or create a PqrTest.
     * @example
     * // Update or create a PqrTest
     * const pqrTest = await prisma.pqrTest.upsert({
     *   create: {
     *     // ... data to create a PqrTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PqrTest we want to update
     *   }
     * })
     */
    upsert<T extends PqrTestUpsertArgs>(args: SelectSubset<T, PqrTestUpsertArgs<ExtArgs>>): Prisma__PqrTestClient<$Result.GetResult<Prisma.$PqrTestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PqrTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PqrTestCountArgs} args - Arguments to filter PqrTests to count.
     * @example
     * // Count the number of PqrTests
     * const count = await prisma.pqrTest.count({
     *   where: {
     *     // ... the filter for the PqrTests we want to count
     *   }
     * })
    **/
    count<T extends PqrTestCountArgs>(
      args?: Subset<T, PqrTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PqrTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PqrTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PqrTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PqrTestAggregateArgs>(args: Subset<T, PqrTestAggregateArgs>): Prisma.PrismaPromise<GetPqrTestAggregateType<T>>

    /**
     * Group by PqrTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PqrTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PqrTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PqrTestGroupByArgs['orderBy'] }
        : { orderBy?: PqrTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PqrTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPqrTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PqrTest model
   */
  readonly fields: PqrTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PqrTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PqrTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wps<T extends WpsSpecDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WpsSpecDefaultArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PqrTest model
   */
  interface PqrTestFieldRefs {
    readonly id: FieldRef<"PqrTest", 'String'>
    readonly wpsId: FieldRef<"PqrTest", 'String'>
    readonly testType: FieldRef<"PqrTest", 'String'>
    readonly result: FieldRef<"PqrTest", 'String'>
    readonly value: FieldRef<"PqrTest", 'Float'>
    readonly unit: FieldRef<"PqrTest", 'String'>
    readonly testDate: FieldRef<"PqrTest", 'DateTime'>
    readonly labName: FieldRef<"PqrTest", 'String'>
    readonly certUrl: FieldRef<"PqrTest", 'String'>
    readonly createdAt: FieldRef<"PqrTest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PqrTest findUnique
   */
  export type PqrTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * Filter, which PqrTest to fetch.
     */
    where: PqrTestWhereUniqueInput
  }

  /**
   * PqrTest findUniqueOrThrow
   */
  export type PqrTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * Filter, which PqrTest to fetch.
     */
    where: PqrTestWhereUniqueInput
  }

  /**
   * PqrTest findFirst
   */
  export type PqrTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * Filter, which PqrTest to fetch.
     */
    where?: PqrTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PqrTests to fetch.
     */
    orderBy?: PqrTestOrderByWithRelationInput | PqrTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PqrTests.
     */
    cursor?: PqrTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PqrTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PqrTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PqrTests.
     */
    distinct?: PqrTestScalarFieldEnum | PqrTestScalarFieldEnum[]
  }

  /**
   * PqrTest findFirstOrThrow
   */
  export type PqrTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * Filter, which PqrTest to fetch.
     */
    where?: PqrTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PqrTests to fetch.
     */
    orderBy?: PqrTestOrderByWithRelationInput | PqrTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PqrTests.
     */
    cursor?: PqrTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PqrTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PqrTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PqrTests.
     */
    distinct?: PqrTestScalarFieldEnum | PqrTestScalarFieldEnum[]
  }

  /**
   * PqrTest findMany
   */
  export type PqrTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * Filter, which PqrTests to fetch.
     */
    where?: PqrTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PqrTests to fetch.
     */
    orderBy?: PqrTestOrderByWithRelationInput | PqrTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PqrTests.
     */
    cursor?: PqrTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PqrTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PqrTests.
     */
    skip?: number
    distinct?: PqrTestScalarFieldEnum | PqrTestScalarFieldEnum[]
  }

  /**
   * PqrTest create
   */
  export type PqrTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * The data needed to create a PqrTest.
     */
    data: XOR<PqrTestCreateInput, PqrTestUncheckedCreateInput>
  }

  /**
   * PqrTest createMany
   */
  export type PqrTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PqrTests.
     */
    data: PqrTestCreateManyInput | PqrTestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PqrTest createManyAndReturn
   */
  export type PqrTestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * The data used to create many PqrTests.
     */
    data: PqrTestCreateManyInput | PqrTestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PqrTest update
   */
  export type PqrTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * The data needed to update a PqrTest.
     */
    data: XOR<PqrTestUpdateInput, PqrTestUncheckedUpdateInput>
    /**
     * Choose, which PqrTest to update.
     */
    where: PqrTestWhereUniqueInput
  }

  /**
   * PqrTest updateMany
   */
  export type PqrTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PqrTests.
     */
    data: XOR<PqrTestUpdateManyMutationInput, PqrTestUncheckedUpdateManyInput>
    /**
     * Filter which PqrTests to update
     */
    where?: PqrTestWhereInput
    /**
     * Limit how many PqrTests to update.
     */
    limit?: number
  }

  /**
   * PqrTest updateManyAndReturn
   */
  export type PqrTestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * The data used to update PqrTests.
     */
    data: XOR<PqrTestUpdateManyMutationInput, PqrTestUncheckedUpdateManyInput>
    /**
     * Filter which PqrTests to update
     */
    where?: PqrTestWhereInput
    /**
     * Limit how many PqrTests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PqrTest upsert
   */
  export type PqrTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * The filter to search for the PqrTest to update in case it exists.
     */
    where: PqrTestWhereUniqueInput
    /**
     * In case the PqrTest found by the `where` argument doesn't exist, create a new PqrTest with this data.
     */
    create: XOR<PqrTestCreateInput, PqrTestUncheckedCreateInput>
    /**
     * In case the PqrTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PqrTestUpdateInput, PqrTestUncheckedUpdateInput>
  }

  /**
   * PqrTest delete
   */
  export type PqrTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
    /**
     * Filter which PqrTest to delete.
     */
    where: PqrTestWhereUniqueInput
  }

  /**
   * PqrTest deleteMany
   */
  export type PqrTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PqrTests to delete
     */
    where?: PqrTestWhereInput
    /**
     * Limit how many PqrTests to delete.
     */
    limit?: number
  }

  /**
   * PqrTest without action
   */
  export type PqrTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PqrTest
     */
    select?: PqrTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PqrTest
     */
    omit?: PqrTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PqrTestInclude<ExtArgs> | null
  }


  /**
   * Model WelderCert
   */

  export type AggregateWelderCert = {
    _count: WelderCertCountAggregateOutputType | null
    _min: WelderCertMinAggregateOutputType | null
    _max: WelderCertMaxAggregateOutputType | null
  }

  export type WelderCertMinAggregateOutputType = {
    id: string | null
    welderId: string | null
    wpsId: string | null
    certNumber: string | null
    issuedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    certPdfUrl: string | null
    createdAt: Date | null
  }

  export type WelderCertMaxAggregateOutputType = {
    id: string | null
    welderId: string | null
    wpsId: string | null
    certNumber: string | null
    issuedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    certPdfUrl: string | null
    createdAt: Date | null
  }

  export type WelderCertCountAggregateOutputType = {
    id: number
    welderId: number
    wpsId: number
    certNumber: number
    issuedAt: number
    expiresAt: number
    isActive: number
    certPdfUrl: number
    createdAt: number
    _all: number
  }


  export type WelderCertMinAggregateInputType = {
    id?: true
    welderId?: true
    wpsId?: true
    certNumber?: true
    issuedAt?: true
    expiresAt?: true
    isActive?: true
    certPdfUrl?: true
    createdAt?: true
  }

  export type WelderCertMaxAggregateInputType = {
    id?: true
    welderId?: true
    wpsId?: true
    certNumber?: true
    issuedAt?: true
    expiresAt?: true
    isActive?: true
    certPdfUrl?: true
    createdAt?: true
  }

  export type WelderCertCountAggregateInputType = {
    id?: true
    welderId?: true
    wpsId?: true
    certNumber?: true
    issuedAt?: true
    expiresAt?: true
    isActive?: true
    certPdfUrl?: true
    createdAt?: true
    _all?: true
  }

  export type WelderCertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WelderCert to aggregate.
     */
    where?: WelderCertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelderCerts to fetch.
     */
    orderBy?: WelderCertOrderByWithRelationInput | WelderCertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WelderCertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelderCerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelderCerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WelderCerts
    **/
    _count?: true | WelderCertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WelderCertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WelderCertMaxAggregateInputType
  }

  export type GetWelderCertAggregateType<T extends WelderCertAggregateArgs> = {
        [P in keyof T & keyof AggregateWelderCert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWelderCert[P]>
      : GetScalarType<T[P], AggregateWelderCert[P]>
  }




  export type WelderCertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WelderCertWhereInput
    orderBy?: WelderCertOrderByWithAggregationInput | WelderCertOrderByWithAggregationInput[]
    by: WelderCertScalarFieldEnum[] | WelderCertScalarFieldEnum
    having?: WelderCertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WelderCertCountAggregateInputType | true
    _min?: WelderCertMinAggregateInputType
    _max?: WelderCertMaxAggregateInputType
  }

  export type WelderCertGroupByOutputType = {
    id: string
    welderId: string
    wpsId: string
    certNumber: string
    issuedAt: Date
    expiresAt: Date
    isActive: boolean
    certPdfUrl: string | null
    createdAt: Date
    _count: WelderCertCountAggregateOutputType | null
    _min: WelderCertMinAggregateOutputType | null
    _max: WelderCertMaxAggregateOutputType | null
  }

  type GetWelderCertGroupByPayload<T extends WelderCertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WelderCertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WelderCertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WelderCertGroupByOutputType[P]>
            : GetScalarType<T[P], WelderCertGroupByOutputType[P]>
        }
      >
    >


  export type WelderCertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    welderId?: boolean
    wpsId?: boolean
    certNumber?: boolean
    issuedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    certPdfUrl?: boolean
    createdAt?: boolean
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["welderCert"]>

  export type WelderCertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    welderId?: boolean
    wpsId?: boolean
    certNumber?: boolean
    issuedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    certPdfUrl?: boolean
    createdAt?: boolean
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["welderCert"]>

  export type WelderCertSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    welderId?: boolean
    wpsId?: boolean
    certNumber?: boolean
    issuedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    certPdfUrl?: boolean
    createdAt?: boolean
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["welderCert"]>

  export type WelderCertSelectScalar = {
    id?: boolean
    welderId?: boolean
    wpsId?: boolean
    certNumber?: boolean
    issuedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    certPdfUrl?: boolean
    createdAt?: boolean
  }

  export type WelderCertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "welderId" | "wpsId" | "certNumber" | "issuedAt" | "expiresAt" | "isActive" | "certPdfUrl" | "createdAt", ExtArgs["result"]["welderCert"]>
  export type WelderCertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }
  export type WelderCertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }
  export type WelderCertIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welder?: boolean | UserDefaultArgs<ExtArgs>
    wps?: boolean | WpsSpecDefaultArgs<ExtArgs>
  }

  export type $WelderCertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WelderCert"
    objects: {
      welder: Prisma.$UserPayload<ExtArgs>
      wps: Prisma.$WpsSpecPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      welderId: string
      wpsId: string
      certNumber: string
      issuedAt: Date
      expiresAt: Date
      isActive: boolean
      certPdfUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["welderCert"]>
    composites: {}
  }

  type WelderCertGetPayload<S extends boolean | null | undefined | WelderCertDefaultArgs> = $Result.GetResult<Prisma.$WelderCertPayload, S>

  type WelderCertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WelderCertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WelderCertCountAggregateInputType | true
    }

  export interface WelderCertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WelderCert'], meta: { name: 'WelderCert' } }
    /**
     * Find zero or one WelderCert that matches the filter.
     * @param {WelderCertFindUniqueArgs} args - Arguments to find a WelderCert
     * @example
     * // Get one WelderCert
     * const welderCert = await prisma.welderCert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WelderCertFindUniqueArgs>(args: SelectSubset<T, WelderCertFindUniqueArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WelderCert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WelderCertFindUniqueOrThrowArgs} args - Arguments to find a WelderCert
     * @example
     * // Get one WelderCert
     * const welderCert = await prisma.welderCert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WelderCertFindUniqueOrThrowArgs>(args: SelectSubset<T, WelderCertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WelderCert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelderCertFindFirstArgs} args - Arguments to find a WelderCert
     * @example
     * // Get one WelderCert
     * const welderCert = await prisma.welderCert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WelderCertFindFirstArgs>(args?: SelectSubset<T, WelderCertFindFirstArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WelderCert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelderCertFindFirstOrThrowArgs} args - Arguments to find a WelderCert
     * @example
     * // Get one WelderCert
     * const welderCert = await prisma.welderCert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WelderCertFindFirstOrThrowArgs>(args?: SelectSubset<T, WelderCertFindFirstOrThrowArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WelderCerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelderCertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WelderCerts
     * const welderCerts = await prisma.welderCert.findMany()
     * 
     * // Get first 10 WelderCerts
     * const welderCerts = await prisma.welderCert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const welderCertWithIdOnly = await prisma.welderCert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WelderCertFindManyArgs>(args?: SelectSubset<T, WelderCertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WelderCert.
     * @param {WelderCertCreateArgs} args - Arguments to create a WelderCert.
     * @example
     * // Create one WelderCert
     * const WelderCert = await prisma.welderCert.create({
     *   data: {
     *     // ... data to create a WelderCert
     *   }
     * })
     * 
     */
    create<T extends WelderCertCreateArgs>(args: SelectSubset<T, WelderCertCreateArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WelderCerts.
     * @param {WelderCertCreateManyArgs} args - Arguments to create many WelderCerts.
     * @example
     * // Create many WelderCerts
     * const welderCert = await prisma.welderCert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WelderCertCreateManyArgs>(args?: SelectSubset<T, WelderCertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WelderCerts and returns the data saved in the database.
     * @param {WelderCertCreateManyAndReturnArgs} args - Arguments to create many WelderCerts.
     * @example
     * // Create many WelderCerts
     * const welderCert = await prisma.welderCert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WelderCerts and only return the `id`
     * const welderCertWithIdOnly = await prisma.welderCert.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WelderCertCreateManyAndReturnArgs>(args?: SelectSubset<T, WelderCertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WelderCert.
     * @param {WelderCertDeleteArgs} args - Arguments to delete one WelderCert.
     * @example
     * // Delete one WelderCert
     * const WelderCert = await prisma.welderCert.delete({
     *   where: {
     *     // ... filter to delete one WelderCert
     *   }
     * })
     * 
     */
    delete<T extends WelderCertDeleteArgs>(args: SelectSubset<T, WelderCertDeleteArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WelderCert.
     * @param {WelderCertUpdateArgs} args - Arguments to update one WelderCert.
     * @example
     * // Update one WelderCert
     * const welderCert = await prisma.welderCert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WelderCertUpdateArgs>(args: SelectSubset<T, WelderCertUpdateArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WelderCerts.
     * @param {WelderCertDeleteManyArgs} args - Arguments to filter WelderCerts to delete.
     * @example
     * // Delete a few WelderCerts
     * const { count } = await prisma.welderCert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WelderCertDeleteManyArgs>(args?: SelectSubset<T, WelderCertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WelderCerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelderCertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WelderCerts
     * const welderCert = await prisma.welderCert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WelderCertUpdateManyArgs>(args: SelectSubset<T, WelderCertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WelderCerts and returns the data updated in the database.
     * @param {WelderCertUpdateManyAndReturnArgs} args - Arguments to update many WelderCerts.
     * @example
     * // Update many WelderCerts
     * const welderCert = await prisma.welderCert.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WelderCerts and only return the `id`
     * const welderCertWithIdOnly = await prisma.welderCert.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WelderCertUpdateManyAndReturnArgs>(args: SelectSubset<T, WelderCertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WelderCert.
     * @param {WelderCertUpsertArgs} args - Arguments to update or create a WelderCert.
     * @example
     * // Update or create a WelderCert
     * const welderCert = await prisma.welderCert.upsert({
     *   create: {
     *     // ... data to create a WelderCert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WelderCert we want to update
     *   }
     * })
     */
    upsert<T extends WelderCertUpsertArgs>(args: SelectSubset<T, WelderCertUpsertArgs<ExtArgs>>): Prisma__WelderCertClient<$Result.GetResult<Prisma.$WelderCertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WelderCerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelderCertCountArgs} args - Arguments to filter WelderCerts to count.
     * @example
     * // Count the number of WelderCerts
     * const count = await prisma.welderCert.count({
     *   where: {
     *     // ... the filter for the WelderCerts we want to count
     *   }
     * })
    **/
    count<T extends WelderCertCountArgs>(
      args?: Subset<T, WelderCertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WelderCertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WelderCert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelderCertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WelderCertAggregateArgs>(args: Subset<T, WelderCertAggregateArgs>): Prisma.PrismaPromise<GetWelderCertAggregateType<T>>

    /**
     * Group by WelderCert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelderCertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WelderCertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WelderCertGroupByArgs['orderBy'] }
        : { orderBy?: WelderCertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WelderCertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWelderCertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WelderCert model
   */
  readonly fields: WelderCertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WelderCert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WelderCertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    welder<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wps<T extends WpsSpecDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WpsSpecDefaultArgs<ExtArgs>>): Prisma__WpsSpecClient<$Result.GetResult<Prisma.$WpsSpecPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WelderCert model
   */
  interface WelderCertFieldRefs {
    readonly id: FieldRef<"WelderCert", 'String'>
    readonly welderId: FieldRef<"WelderCert", 'String'>
    readonly wpsId: FieldRef<"WelderCert", 'String'>
    readonly certNumber: FieldRef<"WelderCert", 'String'>
    readonly issuedAt: FieldRef<"WelderCert", 'DateTime'>
    readonly expiresAt: FieldRef<"WelderCert", 'DateTime'>
    readonly isActive: FieldRef<"WelderCert", 'Boolean'>
    readonly certPdfUrl: FieldRef<"WelderCert", 'String'>
    readonly createdAt: FieldRef<"WelderCert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WelderCert findUnique
   */
  export type WelderCertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * Filter, which WelderCert to fetch.
     */
    where: WelderCertWhereUniqueInput
  }

  /**
   * WelderCert findUniqueOrThrow
   */
  export type WelderCertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * Filter, which WelderCert to fetch.
     */
    where: WelderCertWhereUniqueInput
  }

  /**
   * WelderCert findFirst
   */
  export type WelderCertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * Filter, which WelderCert to fetch.
     */
    where?: WelderCertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelderCerts to fetch.
     */
    orderBy?: WelderCertOrderByWithRelationInput | WelderCertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WelderCerts.
     */
    cursor?: WelderCertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelderCerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelderCerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WelderCerts.
     */
    distinct?: WelderCertScalarFieldEnum | WelderCertScalarFieldEnum[]
  }

  /**
   * WelderCert findFirstOrThrow
   */
  export type WelderCertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * Filter, which WelderCert to fetch.
     */
    where?: WelderCertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelderCerts to fetch.
     */
    orderBy?: WelderCertOrderByWithRelationInput | WelderCertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WelderCerts.
     */
    cursor?: WelderCertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelderCerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelderCerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WelderCerts.
     */
    distinct?: WelderCertScalarFieldEnum | WelderCertScalarFieldEnum[]
  }

  /**
   * WelderCert findMany
   */
  export type WelderCertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * Filter, which WelderCerts to fetch.
     */
    where?: WelderCertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelderCerts to fetch.
     */
    orderBy?: WelderCertOrderByWithRelationInput | WelderCertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WelderCerts.
     */
    cursor?: WelderCertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelderCerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelderCerts.
     */
    skip?: number
    distinct?: WelderCertScalarFieldEnum | WelderCertScalarFieldEnum[]
  }

  /**
   * WelderCert create
   */
  export type WelderCertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * The data needed to create a WelderCert.
     */
    data: XOR<WelderCertCreateInput, WelderCertUncheckedCreateInput>
  }

  /**
   * WelderCert createMany
   */
  export type WelderCertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WelderCerts.
     */
    data: WelderCertCreateManyInput | WelderCertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WelderCert createManyAndReturn
   */
  export type WelderCertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * The data used to create many WelderCerts.
     */
    data: WelderCertCreateManyInput | WelderCertCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WelderCert update
   */
  export type WelderCertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * The data needed to update a WelderCert.
     */
    data: XOR<WelderCertUpdateInput, WelderCertUncheckedUpdateInput>
    /**
     * Choose, which WelderCert to update.
     */
    where: WelderCertWhereUniqueInput
  }

  /**
   * WelderCert updateMany
   */
  export type WelderCertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WelderCerts.
     */
    data: XOR<WelderCertUpdateManyMutationInput, WelderCertUncheckedUpdateManyInput>
    /**
     * Filter which WelderCerts to update
     */
    where?: WelderCertWhereInput
    /**
     * Limit how many WelderCerts to update.
     */
    limit?: number
  }

  /**
   * WelderCert updateManyAndReturn
   */
  export type WelderCertUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * The data used to update WelderCerts.
     */
    data: XOR<WelderCertUpdateManyMutationInput, WelderCertUncheckedUpdateManyInput>
    /**
     * Filter which WelderCerts to update
     */
    where?: WelderCertWhereInput
    /**
     * Limit how many WelderCerts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WelderCert upsert
   */
  export type WelderCertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * The filter to search for the WelderCert to update in case it exists.
     */
    where: WelderCertWhereUniqueInput
    /**
     * In case the WelderCert found by the `where` argument doesn't exist, create a new WelderCert with this data.
     */
    create: XOR<WelderCertCreateInput, WelderCertUncheckedCreateInput>
    /**
     * In case the WelderCert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WelderCertUpdateInput, WelderCertUncheckedUpdateInput>
  }

  /**
   * WelderCert delete
   */
  export type WelderCertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
    /**
     * Filter which WelderCert to delete.
     */
    where: WelderCertWhereUniqueInput
  }

  /**
   * WelderCert deleteMany
   */
  export type WelderCertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WelderCerts to delete
     */
    where?: WelderCertWhereInput
    /**
     * Limit how many WelderCerts to delete.
     */
    limit?: number
  }

  /**
   * WelderCert without action
   */
  export type WelderCertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelderCert
     */
    select?: WelderCertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelderCert
     */
    omit?: WelderCertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelderCertInclude<ExtArgs> | null
  }


  /**
   * Model Inspection
   */

  export type AggregateInspection = {
    _count: InspectionCountAggregateOutputType | null
    _min: InspectionMinAggregateOutputType | null
    _max: InspectionMaxAggregateOutputType | null
  }

  export type InspectionMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    inspectorId: string | null
    inspectionType: $Enums.InspectionType | null
    result: string | null
    notes: string | null
    reportUrl: string | null
    inspectedAt: Date | null
    createdAt: Date | null
  }

  export type InspectionMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    inspectorId: string | null
    inspectionType: $Enums.InspectionType | null
    result: string | null
    notes: string | null
    reportUrl: string | null
    inspectedAt: Date | null
    createdAt: Date | null
  }

  export type InspectionCountAggregateOutputType = {
    id: number
    jobId: number
    inspectorId: number
    inspectionType: number
    jointNumbers: number
    result: number
    notes: number
    reportUrl: number
    inspectedAt: number
    createdAt: number
    _all: number
  }


  export type InspectionMinAggregateInputType = {
    id?: true
    jobId?: true
    inspectorId?: true
    inspectionType?: true
    result?: true
    notes?: true
    reportUrl?: true
    inspectedAt?: true
    createdAt?: true
  }

  export type InspectionMaxAggregateInputType = {
    id?: true
    jobId?: true
    inspectorId?: true
    inspectionType?: true
    result?: true
    notes?: true
    reportUrl?: true
    inspectedAt?: true
    createdAt?: true
  }

  export type InspectionCountAggregateInputType = {
    id?: true
    jobId?: true
    inspectorId?: true
    inspectionType?: true
    jointNumbers?: true
    result?: true
    notes?: true
    reportUrl?: true
    inspectedAt?: true
    createdAt?: true
    _all?: true
  }

  export type InspectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inspection to aggregate.
     */
    where?: InspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inspections to fetch.
     */
    orderBy?: InspectionOrderByWithRelationInput | InspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inspections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inspections
    **/
    _count?: true | InspectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InspectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InspectionMaxAggregateInputType
  }

  export type GetInspectionAggregateType<T extends InspectionAggregateArgs> = {
        [P in keyof T & keyof AggregateInspection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInspection[P]>
      : GetScalarType<T[P], AggregateInspection[P]>
  }




  export type InspectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InspectionWhereInput
    orderBy?: InspectionOrderByWithAggregationInput | InspectionOrderByWithAggregationInput[]
    by: InspectionScalarFieldEnum[] | InspectionScalarFieldEnum
    having?: InspectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InspectionCountAggregateInputType | true
    _min?: InspectionMinAggregateInputType
    _max?: InspectionMaxAggregateInputType
  }

  export type InspectionGroupByOutputType = {
    id: string
    jobId: string | null
    inspectorId: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers: string[]
    result: string
    notes: string | null
    reportUrl: string | null
    inspectedAt: Date
    createdAt: Date
    _count: InspectionCountAggregateOutputType | null
    _min: InspectionMinAggregateOutputType | null
    _max: InspectionMaxAggregateOutputType | null
  }

  type GetInspectionGroupByPayload<T extends InspectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InspectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InspectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InspectionGroupByOutputType[P]>
            : GetScalarType<T[P], InspectionGroupByOutputType[P]>
        }
      >
    >


  export type InspectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    inspectorId?: boolean
    inspectionType?: boolean
    jointNumbers?: boolean
    result?: boolean
    notes?: boolean
    reportUrl?: boolean
    inspectedAt?: boolean
    createdAt?: boolean
    job?: boolean | Inspection$jobArgs<ExtArgs>
    inspector?: boolean | Inspection$inspectorArgs<ExtArgs>
    weldLogs?: boolean | Inspection$weldLogsArgs<ExtArgs>
    repairLogs?: boolean | Inspection$repairLogsArgs<ExtArgs>
    _count?: boolean | InspectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inspection"]>

  export type InspectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    inspectorId?: boolean
    inspectionType?: boolean
    jointNumbers?: boolean
    result?: boolean
    notes?: boolean
    reportUrl?: boolean
    inspectedAt?: boolean
    createdAt?: boolean
    job?: boolean | Inspection$jobArgs<ExtArgs>
    inspector?: boolean | Inspection$inspectorArgs<ExtArgs>
  }, ExtArgs["result"]["inspection"]>

  export type InspectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    inspectorId?: boolean
    inspectionType?: boolean
    jointNumbers?: boolean
    result?: boolean
    notes?: boolean
    reportUrl?: boolean
    inspectedAt?: boolean
    createdAt?: boolean
    job?: boolean | Inspection$jobArgs<ExtArgs>
    inspector?: boolean | Inspection$inspectorArgs<ExtArgs>
  }, ExtArgs["result"]["inspection"]>

  export type InspectionSelectScalar = {
    id?: boolean
    jobId?: boolean
    inspectorId?: boolean
    inspectionType?: boolean
    jointNumbers?: boolean
    result?: boolean
    notes?: boolean
    reportUrl?: boolean
    inspectedAt?: boolean
    createdAt?: boolean
  }

  export type InspectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "inspectorId" | "inspectionType" | "jointNumbers" | "result" | "notes" | "reportUrl" | "inspectedAt" | "createdAt", ExtArgs["result"]["inspection"]>
  export type InspectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | Inspection$jobArgs<ExtArgs>
    inspector?: boolean | Inspection$inspectorArgs<ExtArgs>
    weldLogs?: boolean | Inspection$weldLogsArgs<ExtArgs>
    repairLogs?: boolean | Inspection$repairLogsArgs<ExtArgs>
    _count?: boolean | InspectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InspectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | Inspection$jobArgs<ExtArgs>
    inspector?: boolean | Inspection$inspectorArgs<ExtArgs>
  }
  export type InspectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | Inspection$jobArgs<ExtArgs>
    inspector?: boolean | Inspection$inspectorArgs<ExtArgs>
  }

  export type $InspectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inspection"
    objects: {
      job: Prisma.$JobPayload<ExtArgs> | null
      inspector: Prisma.$UserPayload<ExtArgs> | null
      weldLogs: Prisma.$WeldLogPayload<ExtArgs>[]
      repairLogs: Prisma.$RepairLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string | null
      inspectorId: string | null
      inspectionType: $Enums.InspectionType
      jointNumbers: string[]
      result: string
      notes: string | null
      reportUrl: string | null
      inspectedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["inspection"]>
    composites: {}
  }

  type InspectionGetPayload<S extends boolean | null | undefined | InspectionDefaultArgs> = $Result.GetResult<Prisma.$InspectionPayload, S>

  type InspectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InspectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InspectionCountAggregateInputType | true
    }

  export interface InspectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inspection'], meta: { name: 'Inspection' } }
    /**
     * Find zero or one Inspection that matches the filter.
     * @param {InspectionFindUniqueArgs} args - Arguments to find a Inspection
     * @example
     * // Get one Inspection
     * const inspection = await prisma.inspection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InspectionFindUniqueArgs>(args: SelectSubset<T, InspectionFindUniqueArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inspection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InspectionFindUniqueOrThrowArgs} args - Arguments to find a Inspection
     * @example
     * // Get one Inspection
     * const inspection = await prisma.inspection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InspectionFindUniqueOrThrowArgs>(args: SelectSubset<T, InspectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inspection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspectionFindFirstArgs} args - Arguments to find a Inspection
     * @example
     * // Get one Inspection
     * const inspection = await prisma.inspection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InspectionFindFirstArgs>(args?: SelectSubset<T, InspectionFindFirstArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inspection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspectionFindFirstOrThrowArgs} args - Arguments to find a Inspection
     * @example
     * // Get one Inspection
     * const inspection = await prisma.inspection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InspectionFindFirstOrThrowArgs>(args?: SelectSubset<T, InspectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inspections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inspections
     * const inspections = await prisma.inspection.findMany()
     * 
     * // Get first 10 Inspections
     * const inspections = await prisma.inspection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inspectionWithIdOnly = await prisma.inspection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InspectionFindManyArgs>(args?: SelectSubset<T, InspectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inspection.
     * @param {InspectionCreateArgs} args - Arguments to create a Inspection.
     * @example
     * // Create one Inspection
     * const Inspection = await prisma.inspection.create({
     *   data: {
     *     // ... data to create a Inspection
     *   }
     * })
     * 
     */
    create<T extends InspectionCreateArgs>(args: SelectSubset<T, InspectionCreateArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inspections.
     * @param {InspectionCreateManyArgs} args - Arguments to create many Inspections.
     * @example
     * // Create many Inspections
     * const inspection = await prisma.inspection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InspectionCreateManyArgs>(args?: SelectSubset<T, InspectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inspections and returns the data saved in the database.
     * @param {InspectionCreateManyAndReturnArgs} args - Arguments to create many Inspections.
     * @example
     * // Create many Inspections
     * const inspection = await prisma.inspection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inspections and only return the `id`
     * const inspectionWithIdOnly = await prisma.inspection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InspectionCreateManyAndReturnArgs>(args?: SelectSubset<T, InspectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Inspection.
     * @param {InspectionDeleteArgs} args - Arguments to delete one Inspection.
     * @example
     * // Delete one Inspection
     * const Inspection = await prisma.inspection.delete({
     *   where: {
     *     // ... filter to delete one Inspection
     *   }
     * })
     * 
     */
    delete<T extends InspectionDeleteArgs>(args: SelectSubset<T, InspectionDeleteArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inspection.
     * @param {InspectionUpdateArgs} args - Arguments to update one Inspection.
     * @example
     * // Update one Inspection
     * const inspection = await prisma.inspection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InspectionUpdateArgs>(args: SelectSubset<T, InspectionUpdateArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inspections.
     * @param {InspectionDeleteManyArgs} args - Arguments to filter Inspections to delete.
     * @example
     * // Delete a few Inspections
     * const { count } = await prisma.inspection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InspectionDeleteManyArgs>(args?: SelectSubset<T, InspectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inspections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inspections
     * const inspection = await prisma.inspection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InspectionUpdateManyArgs>(args: SelectSubset<T, InspectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inspections and returns the data updated in the database.
     * @param {InspectionUpdateManyAndReturnArgs} args - Arguments to update many Inspections.
     * @example
     * // Update many Inspections
     * const inspection = await prisma.inspection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Inspections and only return the `id`
     * const inspectionWithIdOnly = await prisma.inspection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InspectionUpdateManyAndReturnArgs>(args: SelectSubset<T, InspectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Inspection.
     * @param {InspectionUpsertArgs} args - Arguments to update or create a Inspection.
     * @example
     * // Update or create a Inspection
     * const inspection = await prisma.inspection.upsert({
     *   create: {
     *     // ... data to create a Inspection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inspection we want to update
     *   }
     * })
     */
    upsert<T extends InspectionUpsertArgs>(args: SelectSubset<T, InspectionUpsertArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inspections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspectionCountArgs} args - Arguments to filter Inspections to count.
     * @example
     * // Count the number of Inspections
     * const count = await prisma.inspection.count({
     *   where: {
     *     // ... the filter for the Inspections we want to count
     *   }
     * })
    **/
    count<T extends InspectionCountArgs>(
      args?: Subset<T, InspectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InspectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inspection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InspectionAggregateArgs>(args: Subset<T, InspectionAggregateArgs>): Prisma.PrismaPromise<GetInspectionAggregateType<T>>

    /**
     * Group by Inspection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InspectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InspectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InspectionGroupByArgs['orderBy'] }
        : { orderBy?: InspectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InspectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInspectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inspection model
   */
  readonly fields: InspectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inspection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InspectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends Inspection$jobArgs<ExtArgs> = {}>(args?: Subset<T, Inspection$jobArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    inspector<T extends Inspection$inspectorArgs<ExtArgs> = {}>(args?: Subset<T, Inspection$inspectorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    weldLogs<T extends Inspection$weldLogsArgs<ExtArgs> = {}>(args?: Subset<T, Inspection$weldLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    repairLogs<T extends Inspection$repairLogsArgs<ExtArgs> = {}>(args?: Subset<T, Inspection$repairLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inspection model
   */
  interface InspectionFieldRefs {
    readonly id: FieldRef<"Inspection", 'String'>
    readonly jobId: FieldRef<"Inspection", 'String'>
    readonly inspectorId: FieldRef<"Inspection", 'String'>
    readonly inspectionType: FieldRef<"Inspection", 'InspectionType'>
    readonly jointNumbers: FieldRef<"Inspection", 'String[]'>
    readonly result: FieldRef<"Inspection", 'String'>
    readonly notes: FieldRef<"Inspection", 'String'>
    readonly reportUrl: FieldRef<"Inspection", 'String'>
    readonly inspectedAt: FieldRef<"Inspection", 'DateTime'>
    readonly createdAt: FieldRef<"Inspection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Inspection findUnique
   */
  export type InspectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * Filter, which Inspection to fetch.
     */
    where: InspectionWhereUniqueInput
  }

  /**
   * Inspection findUniqueOrThrow
   */
  export type InspectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * Filter, which Inspection to fetch.
     */
    where: InspectionWhereUniqueInput
  }

  /**
   * Inspection findFirst
   */
  export type InspectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * Filter, which Inspection to fetch.
     */
    where?: InspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inspections to fetch.
     */
    orderBy?: InspectionOrderByWithRelationInput | InspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inspections.
     */
    cursor?: InspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inspections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inspections.
     */
    distinct?: InspectionScalarFieldEnum | InspectionScalarFieldEnum[]
  }

  /**
   * Inspection findFirstOrThrow
   */
  export type InspectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * Filter, which Inspection to fetch.
     */
    where?: InspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inspections to fetch.
     */
    orderBy?: InspectionOrderByWithRelationInput | InspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inspections.
     */
    cursor?: InspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inspections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inspections.
     */
    distinct?: InspectionScalarFieldEnum | InspectionScalarFieldEnum[]
  }

  /**
   * Inspection findMany
   */
  export type InspectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * Filter, which Inspections to fetch.
     */
    where?: InspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inspections to fetch.
     */
    orderBy?: InspectionOrderByWithRelationInput | InspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inspections.
     */
    cursor?: InspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inspections.
     */
    skip?: number
    distinct?: InspectionScalarFieldEnum | InspectionScalarFieldEnum[]
  }

  /**
   * Inspection create
   */
  export type InspectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Inspection.
     */
    data: XOR<InspectionCreateInput, InspectionUncheckedCreateInput>
  }

  /**
   * Inspection createMany
   */
  export type InspectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inspections.
     */
    data: InspectionCreateManyInput | InspectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inspection createManyAndReturn
   */
  export type InspectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * The data used to create many Inspections.
     */
    data: InspectionCreateManyInput | InspectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inspection update
   */
  export type InspectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Inspection.
     */
    data: XOR<InspectionUpdateInput, InspectionUncheckedUpdateInput>
    /**
     * Choose, which Inspection to update.
     */
    where: InspectionWhereUniqueInput
  }

  /**
   * Inspection updateMany
   */
  export type InspectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inspections.
     */
    data: XOR<InspectionUpdateManyMutationInput, InspectionUncheckedUpdateManyInput>
    /**
     * Filter which Inspections to update
     */
    where?: InspectionWhereInput
    /**
     * Limit how many Inspections to update.
     */
    limit?: number
  }

  /**
   * Inspection updateManyAndReturn
   */
  export type InspectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * The data used to update Inspections.
     */
    data: XOR<InspectionUpdateManyMutationInput, InspectionUncheckedUpdateManyInput>
    /**
     * Filter which Inspections to update
     */
    where?: InspectionWhereInput
    /**
     * Limit how many Inspections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inspection upsert
   */
  export type InspectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Inspection to update in case it exists.
     */
    where: InspectionWhereUniqueInput
    /**
     * In case the Inspection found by the `where` argument doesn't exist, create a new Inspection with this data.
     */
    create: XOR<InspectionCreateInput, InspectionUncheckedCreateInput>
    /**
     * In case the Inspection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InspectionUpdateInput, InspectionUncheckedUpdateInput>
  }

  /**
   * Inspection delete
   */
  export type InspectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
    /**
     * Filter which Inspection to delete.
     */
    where: InspectionWhereUniqueInput
  }

  /**
   * Inspection deleteMany
   */
  export type InspectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inspections to delete
     */
    where?: InspectionWhereInput
    /**
     * Limit how many Inspections to delete.
     */
    limit?: number
  }

  /**
   * Inspection.job
   */
  export type Inspection$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
  }

  /**
   * Inspection.inspector
   */
  export type Inspection$inspectorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Inspection.weldLogs
   */
  export type Inspection$weldLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    where?: WeldLogWhereInput
    orderBy?: WeldLogOrderByWithRelationInput | WeldLogOrderByWithRelationInput[]
    cursor?: WeldLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeldLogScalarFieldEnum | WeldLogScalarFieldEnum[]
  }

  /**
   * Inspection.repairLogs
   */
  export type Inspection$repairLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    where?: RepairLogWhereInput
    orderBy?: RepairLogOrderByWithRelationInput | RepairLogOrderByWithRelationInput[]
    cursor?: RepairLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepairLogScalarFieldEnum | RepairLogScalarFieldEnum[]
  }

  /**
   * Inspection without action
   */
  export type InspectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inspection
     */
    select?: InspectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inspection
     */
    omit?: InspectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InspectionInclude<ExtArgs> | null
  }


  /**
   * Model WeldLog
   */

  export type AggregateWeldLog = {
    _count: WeldLogCountAggregateOutputType | null
    _avg: WeldLogAvgAggregateOutputType | null
    _sum: WeldLogSumAggregateOutputType | null
    _min: WeldLogMinAggregateOutputType | null
    _max: WeldLogMaxAggregateOutputType | null
  }

  export type WeldLogAvgAggregateOutputType = {
    length: number | null
  }

  export type WeldLogSumAggregateOutputType = {
    length: number | null
  }

  export type WeldLogMinAggregateOutputType = {
    id: string | null
    inspectionId: string | null
    weldNumber: string | null
    jointId: string | null
    process: string | null
    position: string | null
    welderId: string | null
    length: number | null
    createdAt: Date | null
  }

  export type WeldLogMaxAggregateOutputType = {
    id: string | null
    inspectionId: string | null
    weldNumber: string | null
    jointId: string | null
    process: string | null
    position: string | null
    welderId: string | null
    length: number | null
    createdAt: Date | null
  }

  export type WeldLogCountAggregateOutputType = {
    id: number
    inspectionId: number
    weldNumber: number
    jointId: number
    process: number
    position: number
    welderId: number
    length: number
    defects: number
    createdAt: number
    _all: number
  }


  export type WeldLogAvgAggregateInputType = {
    length?: true
  }

  export type WeldLogSumAggregateInputType = {
    length?: true
  }

  export type WeldLogMinAggregateInputType = {
    id?: true
    inspectionId?: true
    weldNumber?: true
    jointId?: true
    process?: true
    position?: true
    welderId?: true
    length?: true
    createdAt?: true
  }

  export type WeldLogMaxAggregateInputType = {
    id?: true
    inspectionId?: true
    weldNumber?: true
    jointId?: true
    process?: true
    position?: true
    welderId?: true
    length?: true
    createdAt?: true
  }

  export type WeldLogCountAggregateInputType = {
    id?: true
    inspectionId?: true
    weldNumber?: true
    jointId?: true
    process?: true
    position?: true
    welderId?: true
    length?: true
    defects?: true
    createdAt?: true
    _all?: true
  }

  export type WeldLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeldLog to aggregate.
     */
    where?: WeldLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldLogs to fetch.
     */
    orderBy?: WeldLogOrderByWithRelationInput | WeldLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeldLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeldLogs
    **/
    _count?: true | WeldLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeldLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeldLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeldLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeldLogMaxAggregateInputType
  }

  export type GetWeldLogAggregateType<T extends WeldLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWeldLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeldLog[P]>
      : GetScalarType<T[P], AggregateWeldLog[P]>
  }




  export type WeldLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeldLogWhereInput
    orderBy?: WeldLogOrderByWithAggregationInput | WeldLogOrderByWithAggregationInput[]
    by: WeldLogScalarFieldEnum[] | WeldLogScalarFieldEnum
    having?: WeldLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeldLogCountAggregateInputType | true
    _avg?: WeldLogAvgAggregateInputType
    _sum?: WeldLogSumAggregateInputType
    _min?: WeldLogMinAggregateInputType
    _max?: WeldLogMaxAggregateInputType
  }

  export type WeldLogGroupByOutputType = {
    id: string
    inspectionId: string
    weldNumber: string
    jointId: string | null
    process: string
    position: string
    welderId: string | null
    length: number | null
    defects: string[]
    createdAt: Date
    _count: WeldLogCountAggregateOutputType | null
    _avg: WeldLogAvgAggregateOutputType | null
    _sum: WeldLogSumAggregateOutputType | null
    _min: WeldLogMinAggregateOutputType | null
    _max: WeldLogMaxAggregateOutputType | null
  }

  type GetWeldLogGroupByPayload<T extends WeldLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeldLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeldLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeldLogGroupByOutputType[P]>
            : GetScalarType<T[P], WeldLogGroupByOutputType[P]>
        }
      >
    >


  export type WeldLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    jointId?: boolean
    process?: boolean
    position?: boolean
    welderId?: boolean
    length?: boolean
    defects?: boolean
    createdAt?: boolean
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weldLog"]>

  export type WeldLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    jointId?: boolean
    process?: boolean
    position?: boolean
    welderId?: boolean
    length?: boolean
    defects?: boolean
    createdAt?: boolean
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weldLog"]>

  export type WeldLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    jointId?: boolean
    process?: boolean
    position?: boolean
    welderId?: boolean
    length?: boolean
    defects?: boolean
    createdAt?: boolean
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weldLog"]>

  export type WeldLogSelectScalar = {
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    jointId?: boolean
    process?: boolean
    position?: boolean
    welderId?: boolean
    length?: boolean
    defects?: boolean
    createdAt?: boolean
  }

  export type WeldLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "inspectionId" | "weldNumber" | "jointId" | "process" | "position" | "welderId" | "length" | "defects" | "createdAt", ExtArgs["result"]["weldLog"]>
  export type WeldLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }
  export type WeldLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }
  export type WeldLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }

  export type $WeldLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeldLog"
    objects: {
      inspection: Prisma.$InspectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inspectionId: string
      weldNumber: string
      jointId: string | null
      process: string
      position: string
      welderId: string | null
      length: number | null
      defects: string[]
      createdAt: Date
    }, ExtArgs["result"]["weldLog"]>
    composites: {}
  }

  type WeldLogGetPayload<S extends boolean | null | undefined | WeldLogDefaultArgs> = $Result.GetResult<Prisma.$WeldLogPayload, S>

  type WeldLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WeldLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WeldLogCountAggregateInputType | true
    }

  export interface WeldLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeldLog'], meta: { name: 'WeldLog' } }
    /**
     * Find zero or one WeldLog that matches the filter.
     * @param {WeldLogFindUniqueArgs} args - Arguments to find a WeldLog
     * @example
     * // Get one WeldLog
     * const weldLog = await prisma.weldLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeldLogFindUniqueArgs>(args: SelectSubset<T, WeldLogFindUniqueArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WeldLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WeldLogFindUniqueOrThrowArgs} args - Arguments to find a WeldLog
     * @example
     * // Get one WeldLog
     * const weldLog = await prisma.weldLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeldLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WeldLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeldLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldLogFindFirstArgs} args - Arguments to find a WeldLog
     * @example
     * // Get one WeldLog
     * const weldLog = await prisma.weldLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeldLogFindFirstArgs>(args?: SelectSubset<T, WeldLogFindFirstArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeldLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldLogFindFirstOrThrowArgs} args - Arguments to find a WeldLog
     * @example
     * // Get one WeldLog
     * const weldLog = await prisma.weldLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeldLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WeldLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WeldLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeldLogs
     * const weldLogs = await prisma.weldLog.findMany()
     * 
     * // Get first 10 WeldLogs
     * const weldLogs = await prisma.weldLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weldLogWithIdOnly = await prisma.weldLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeldLogFindManyArgs>(args?: SelectSubset<T, WeldLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WeldLog.
     * @param {WeldLogCreateArgs} args - Arguments to create a WeldLog.
     * @example
     * // Create one WeldLog
     * const WeldLog = await prisma.weldLog.create({
     *   data: {
     *     // ... data to create a WeldLog
     *   }
     * })
     * 
     */
    create<T extends WeldLogCreateArgs>(args: SelectSubset<T, WeldLogCreateArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WeldLogs.
     * @param {WeldLogCreateManyArgs} args - Arguments to create many WeldLogs.
     * @example
     * // Create many WeldLogs
     * const weldLog = await prisma.weldLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeldLogCreateManyArgs>(args?: SelectSubset<T, WeldLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeldLogs and returns the data saved in the database.
     * @param {WeldLogCreateManyAndReturnArgs} args - Arguments to create many WeldLogs.
     * @example
     * // Create many WeldLogs
     * const weldLog = await prisma.weldLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeldLogs and only return the `id`
     * const weldLogWithIdOnly = await prisma.weldLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeldLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WeldLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WeldLog.
     * @param {WeldLogDeleteArgs} args - Arguments to delete one WeldLog.
     * @example
     * // Delete one WeldLog
     * const WeldLog = await prisma.weldLog.delete({
     *   where: {
     *     // ... filter to delete one WeldLog
     *   }
     * })
     * 
     */
    delete<T extends WeldLogDeleteArgs>(args: SelectSubset<T, WeldLogDeleteArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WeldLog.
     * @param {WeldLogUpdateArgs} args - Arguments to update one WeldLog.
     * @example
     * // Update one WeldLog
     * const weldLog = await prisma.weldLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeldLogUpdateArgs>(args: SelectSubset<T, WeldLogUpdateArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WeldLogs.
     * @param {WeldLogDeleteManyArgs} args - Arguments to filter WeldLogs to delete.
     * @example
     * // Delete a few WeldLogs
     * const { count } = await prisma.weldLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeldLogDeleteManyArgs>(args?: SelectSubset<T, WeldLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeldLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeldLogs
     * const weldLog = await prisma.weldLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeldLogUpdateManyArgs>(args: SelectSubset<T, WeldLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeldLogs and returns the data updated in the database.
     * @param {WeldLogUpdateManyAndReturnArgs} args - Arguments to update many WeldLogs.
     * @example
     * // Update many WeldLogs
     * const weldLog = await prisma.weldLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WeldLogs and only return the `id`
     * const weldLogWithIdOnly = await prisma.weldLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WeldLogUpdateManyAndReturnArgs>(args: SelectSubset<T, WeldLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WeldLog.
     * @param {WeldLogUpsertArgs} args - Arguments to update or create a WeldLog.
     * @example
     * // Update or create a WeldLog
     * const weldLog = await prisma.weldLog.upsert({
     *   create: {
     *     // ... data to create a WeldLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeldLog we want to update
     *   }
     * })
     */
    upsert<T extends WeldLogUpsertArgs>(args: SelectSubset<T, WeldLogUpsertArgs<ExtArgs>>): Prisma__WeldLogClient<$Result.GetResult<Prisma.$WeldLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WeldLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldLogCountArgs} args - Arguments to filter WeldLogs to count.
     * @example
     * // Count the number of WeldLogs
     * const count = await prisma.weldLog.count({
     *   where: {
     *     // ... the filter for the WeldLogs we want to count
     *   }
     * })
    **/
    count<T extends WeldLogCountArgs>(
      args?: Subset<T, WeldLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeldLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeldLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeldLogAggregateArgs>(args: Subset<T, WeldLogAggregateArgs>): Prisma.PrismaPromise<GetWeldLogAggregateType<T>>

    /**
     * Group by WeldLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeldLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeldLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeldLogGroupByArgs['orderBy'] }
        : { orderBy?: WeldLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeldLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeldLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeldLog model
   */
  readonly fields: WeldLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeldLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeldLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inspection<T extends InspectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InspectionDefaultArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeldLog model
   */
  interface WeldLogFieldRefs {
    readonly id: FieldRef<"WeldLog", 'String'>
    readonly inspectionId: FieldRef<"WeldLog", 'String'>
    readonly weldNumber: FieldRef<"WeldLog", 'String'>
    readonly jointId: FieldRef<"WeldLog", 'String'>
    readonly process: FieldRef<"WeldLog", 'String'>
    readonly position: FieldRef<"WeldLog", 'String'>
    readonly welderId: FieldRef<"WeldLog", 'String'>
    readonly length: FieldRef<"WeldLog", 'Float'>
    readonly defects: FieldRef<"WeldLog", 'String[]'>
    readonly createdAt: FieldRef<"WeldLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WeldLog findUnique
   */
  export type WeldLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * Filter, which WeldLog to fetch.
     */
    where: WeldLogWhereUniqueInput
  }

  /**
   * WeldLog findUniqueOrThrow
   */
  export type WeldLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * Filter, which WeldLog to fetch.
     */
    where: WeldLogWhereUniqueInput
  }

  /**
   * WeldLog findFirst
   */
  export type WeldLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * Filter, which WeldLog to fetch.
     */
    where?: WeldLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldLogs to fetch.
     */
    orderBy?: WeldLogOrderByWithRelationInput | WeldLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeldLogs.
     */
    cursor?: WeldLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeldLogs.
     */
    distinct?: WeldLogScalarFieldEnum | WeldLogScalarFieldEnum[]
  }

  /**
   * WeldLog findFirstOrThrow
   */
  export type WeldLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * Filter, which WeldLog to fetch.
     */
    where?: WeldLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldLogs to fetch.
     */
    orderBy?: WeldLogOrderByWithRelationInput | WeldLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeldLogs.
     */
    cursor?: WeldLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeldLogs.
     */
    distinct?: WeldLogScalarFieldEnum | WeldLogScalarFieldEnum[]
  }

  /**
   * WeldLog findMany
   */
  export type WeldLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * Filter, which WeldLogs to fetch.
     */
    where?: WeldLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeldLogs to fetch.
     */
    orderBy?: WeldLogOrderByWithRelationInput | WeldLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeldLogs.
     */
    cursor?: WeldLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeldLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeldLogs.
     */
    skip?: number
    distinct?: WeldLogScalarFieldEnum | WeldLogScalarFieldEnum[]
  }

  /**
   * WeldLog create
   */
  export type WeldLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * The data needed to create a WeldLog.
     */
    data: XOR<WeldLogCreateInput, WeldLogUncheckedCreateInput>
  }

  /**
   * WeldLog createMany
   */
  export type WeldLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeldLogs.
     */
    data: WeldLogCreateManyInput | WeldLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeldLog createManyAndReturn
   */
  export type WeldLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * The data used to create many WeldLogs.
     */
    data: WeldLogCreateManyInput | WeldLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeldLog update
   */
  export type WeldLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * The data needed to update a WeldLog.
     */
    data: XOR<WeldLogUpdateInput, WeldLogUncheckedUpdateInput>
    /**
     * Choose, which WeldLog to update.
     */
    where: WeldLogWhereUniqueInput
  }

  /**
   * WeldLog updateMany
   */
  export type WeldLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeldLogs.
     */
    data: XOR<WeldLogUpdateManyMutationInput, WeldLogUncheckedUpdateManyInput>
    /**
     * Filter which WeldLogs to update
     */
    where?: WeldLogWhereInput
    /**
     * Limit how many WeldLogs to update.
     */
    limit?: number
  }

  /**
   * WeldLog updateManyAndReturn
   */
  export type WeldLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * The data used to update WeldLogs.
     */
    data: XOR<WeldLogUpdateManyMutationInput, WeldLogUncheckedUpdateManyInput>
    /**
     * Filter which WeldLogs to update
     */
    where?: WeldLogWhereInput
    /**
     * Limit how many WeldLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeldLog upsert
   */
  export type WeldLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * The filter to search for the WeldLog to update in case it exists.
     */
    where: WeldLogWhereUniqueInput
    /**
     * In case the WeldLog found by the `where` argument doesn't exist, create a new WeldLog with this data.
     */
    create: XOR<WeldLogCreateInput, WeldLogUncheckedCreateInput>
    /**
     * In case the WeldLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeldLogUpdateInput, WeldLogUncheckedUpdateInput>
  }

  /**
   * WeldLog delete
   */
  export type WeldLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
    /**
     * Filter which WeldLog to delete.
     */
    where: WeldLogWhereUniqueInput
  }

  /**
   * WeldLog deleteMany
   */
  export type WeldLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeldLogs to delete
     */
    where?: WeldLogWhereInput
    /**
     * Limit how many WeldLogs to delete.
     */
    limit?: number
  }

  /**
   * WeldLog without action
   */
  export type WeldLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeldLog
     */
    select?: WeldLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeldLog
     */
    omit?: WeldLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeldLogInclude<ExtArgs> | null
  }


  /**
   * Model RepairLog
   */

  export type AggregateRepairLog = {
    _count: RepairLogCountAggregateOutputType | null
    _min: RepairLogMinAggregateOutputType | null
    _max: RepairLogMaxAggregateOutputType | null
  }

  export type RepairLogMinAggregateOutputType = {
    id: string | null
    inspectionId: string | null
    weldNumber: string | null
    defectType: string | null
    repairMethod: string | null
    repairedBy: string | null
    repairedAt: Date | null
    isCompleted: boolean | null
    notes: string | null
    createdAt: Date | null
  }

  export type RepairLogMaxAggregateOutputType = {
    id: string | null
    inspectionId: string | null
    weldNumber: string | null
    defectType: string | null
    repairMethod: string | null
    repairedBy: string | null
    repairedAt: Date | null
    isCompleted: boolean | null
    notes: string | null
    createdAt: Date | null
  }

  export type RepairLogCountAggregateOutputType = {
    id: number
    inspectionId: number
    weldNumber: number
    defectType: number
    repairMethod: number
    repairedBy: number
    repairedAt: number
    isCompleted: number
    notes: number
    createdAt: number
    _all: number
  }


  export type RepairLogMinAggregateInputType = {
    id?: true
    inspectionId?: true
    weldNumber?: true
    defectType?: true
    repairMethod?: true
    repairedBy?: true
    repairedAt?: true
    isCompleted?: true
    notes?: true
    createdAt?: true
  }

  export type RepairLogMaxAggregateInputType = {
    id?: true
    inspectionId?: true
    weldNumber?: true
    defectType?: true
    repairMethod?: true
    repairedBy?: true
    repairedAt?: true
    isCompleted?: true
    notes?: true
    createdAt?: true
  }

  export type RepairLogCountAggregateInputType = {
    id?: true
    inspectionId?: true
    weldNumber?: true
    defectType?: true
    repairMethod?: true
    repairedBy?: true
    repairedAt?: true
    isCompleted?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type RepairLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepairLog to aggregate.
     */
    where?: RepairLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepairLogs to fetch.
     */
    orderBy?: RepairLogOrderByWithRelationInput | RepairLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepairLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepairLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepairLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RepairLogs
    **/
    _count?: true | RepairLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepairLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepairLogMaxAggregateInputType
  }

  export type GetRepairLogAggregateType<T extends RepairLogAggregateArgs> = {
        [P in keyof T & keyof AggregateRepairLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepairLog[P]>
      : GetScalarType<T[P], AggregateRepairLog[P]>
  }




  export type RepairLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepairLogWhereInput
    orderBy?: RepairLogOrderByWithAggregationInput | RepairLogOrderByWithAggregationInput[]
    by: RepairLogScalarFieldEnum[] | RepairLogScalarFieldEnum
    having?: RepairLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepairLogCountAggregateInputType | true
    _min?: RepairLogMinAggregateInputType
    _max?: RepairLogMaxAggregateInputType
  }

  export type RepairLogGroupByOutputType = {
    id: string
    inspectionId: string
    weldNumber: string
    defectType: string
    repairMethod: string
    repairedBy: string | null
    repairedAt: Date | null
    isCompleted: boolean
    notes: string | null
    createdAt: Date
    _count: RepairLogCountAggregateOutputType | null
    _min: RepairLogMinAggregateOutputType | null
    _max: RepairLogMaxAggregateOutputType | null
  }

  type GetRepairLogGroupByPayload<T extends RepairLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepairLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepairLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepairLogGroupByOutputType[P]>
            : GetScalarType<T[P], RepairLogGroupByOutputType[P]>
        }
      >
    >


  export type RepairLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    defectType?: boolean
    repairMethod?: boolean
    repairedBy?: boolean
    repairedAt?: boolean
    isCompleted?: boolean
    notes?: boolean
    createdAt?: boolean
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repairLog"]>

  export type RepairLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    defectType?: boolean
    repairMethod?: boolean
    repairedBy?: boolean
    repairedAt?: boolean
    isCompleted?: boolean
    notes?: boolean
    createdAt?: boolean
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repairLog"]>

  export type RepairLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    defectType?: boolean
    repairMethod?: boolean
    repairedBy?: boolean
    repairedAt?: boolean
    isCompleted?: boolean
    notes?: boolean
    createdAt?: boolean
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repairLog"]>

  export type RepairLogSelectScalar = {
    id?: boolean
    inspectionId?: boolean
    weldNumber?: boolean
    defectType?: boolean
    repairMethod?: boolean
    repairedBy?: boolean
    repairedAt?: boolean
    isCompleted?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type RepairLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "inspectionId" | "weldNumber" | "defectType" | "repairMethod" | "repairedBy" | "repairedAt" | "isCompleted" | "notes" | "createdAt", ExtArgs["result"]["repairLog"]>
  export type RepairLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }
  export type RepairLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }
  export type RepairLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inspection?: boolean | InspectionDefaultArgs<ExtArgs>
  }

  export type $RepairLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RepairLog"
    objects: {
      inspection: Prisma.$InspectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inspectionId: string
      weldNumber: string
      defectType: string
      repairMethod: string
      repairedBy: string | null
      repairedAt: Date | null
      isCompleted: boolean
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["repairLog"]>
    composites: {}
  }

  type RepairLogGetPayload<S extends boolean | null | undefined | RepairLogDefaultArgs> = $Result.GetResult<Prisma.$RepairLogPayload, S>

  type RepairLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RepairLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RepairLogCountAggregateInputType | true
    }

  export interface RepairLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RepairLog'], meta: { name: 'RepairLog' } }
    /**
     * Find zero or one RepairLog that matches the filter.
     * @param {RepairLogFindUniqueArgs} args - Arguments to find a RepairLog
     * @example
     * // Get one RepairLog
     * const repairLog = await prisma.repairLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RepairLogFindUniqueArgs>(args: SelectSubset<T, RepairLogFindUniqueArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RepairLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RepairLogFindUniqueOrThrowArgs} args - Arguments to find a RepairLog
     * @example
     * // Get one RepairLog
     * const repairLog = await prisma.repairLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RepairLogFindUniqueOrThrowArgs>(args: SelectSubset<T, RepairLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RepairLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairLogFindFirstArgs} args - Arguments to find a RepairLog
     * @example
     * // Get one RepairLog
     * const repairLog = await prisma.repairLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RepairLogFindFirstArgs>(args?: SelectSubset<T, RepairLogFindFirstArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RepairLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairLogFindFirstOrThrowArgs} args - Arguments to find a RepairLog
     * @example
     * // Get one RepairLog
     * const repairLog = await prisma.repairLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RepairLogFindFirstOrThrowArgs>(args?: SelectSubset<T, RepairLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RepairLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RepairLogs
     * const repairLogs = await prisma.repairLog.findMany()
     * 
     * // Get first 10 RepairLogs
     * const repairLogs = await prisma.repairLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repairLogWithIdOnly = await prisma.repairLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RepairLogFindManyArgs>(args?: SelectSubset<T, RepairLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RepairLog.
     * @param {RepairLogCreateArgs} args - Arguments to create a RepairLog.
     * @example
     * // Create one RepairLog
     * const RepairLog = await prisma.repairLog.create({
     *   data: {
     *     // ... data to create a RepairLog
     *   }
     * })
     * 
     */
    create<T extends RepairLogCreateArgs>(args: SelectSubset<T, RepairLogCreateArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RepairLogs.
     * @param {RepairLogCreateManyArgs} args - Arguments to create many RepairLogs.
     * @example
     * // Create many RepairLogs
     * const repairLog = await prisma.repairLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RepairLogCreateManyArgs>(args?: SelectSubset<T, RepairLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RepairLogs and returns the data saved in the database.
     * @param {RepairLogCreateManyAndReturnArgs} args - Arguments to create many RepairLogs.
     * @example
     * // Create many RepairLogs
     * const repairLog = await prisma.repairLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RepairLogs and only return the `id`
     * const repairLogWithIdOnly = await prisma.repairLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RepairLogCreateManyAndReturnArgs>(args?: SelectSubset<T, RepairLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RepairLog.
     * @param {RepairLogDeleteArgs} args - Arguments to delete one RepairLog.
     * @example
     * // Delete one RepairLog
     * const RepairLog = await prisma.repairLog.delete({
     *   where: {
     *     // ... filter to delete one RepairLog
     *   }
     * })
     * 
     */
    delete<T extends RepairLogDeleteArgs>(args: SelectSubset<T, RepairLogDeleteArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RepairLog.
     * @param {RepairLogUpdateArgs} args - Arguments to update one RepairLog.
     * @example
     * // Update one RepairLog
     * const repairLog = await prisma.repairLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RepairLogUpdateArgs>(args: SelectSubset<T, RepairLogUpdateArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RepairLogs.
     * @param {RepairLogDeleteManyArgs} args - Arguments to filter RepairLogs to delete.
     * @example
     * // Delete a few RepairLogs
     * const { count } = await prisma.repairLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RepairLogDeleteManyArgs>(args?: SelectSubset<T, RepairLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RepairLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RepairLogs
     * const repairLog = await prisma.repairLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RepairLogUpdateManyArgs>(args: SelectSubset<T, RepairLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RepairLogs and returns the data updated in the database.
     * @param {RepairLogUpdateManyAndReturnArgs} args - Arguments to update many RepairLogs.
     * @example
     * // Update many RepairLogs
     * const repairLog = await prisma.repairLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RepairLogs and only return the `id`
     * const repairLogWithIdOnly = await prisma.repairLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RepairLogUpdateManyAndReturnArgs>(args: SelectSubset<T, RepairLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RepairLog.
     * @param {RepairLogUpsertArgs} args - Arguments to update or create a RepairLog.
     * @example
     * // Update or create a RepairLog
     * const repairLog = await prisma.repairLog.upsert({
     *   create: {
     *     // ... data to create a RepairLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RepairLog we want to update
     *   }
     * })
     */
    upsert<T extends RepairLogUpsertArgs>(args: SelectSubset<T, RepairLogUpsertArgs<ExtArgs>>): Prisma__RepairLogClient<$Result.GetResult<Prisma.$RepairLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RepairLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairLogCountArgs} args - Arguments to filter RepairLogs to count.
     * @example
     * // Count the number of RepairLogs
     * const count = await prisma.repairLog.count({
     *   where: {
     *     // ... the filter for the RepairLogs we want to count
     *   }
     * })
    **/
    count<T extends RepairLogCountArgs>(
      args?: Subset<T, RepairLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepairLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RepairLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepairLogAggregateArgs>(args: Subset<T, RepairLogAggregateArgs>): Prisma.PrismaPromise<GetRepairLogAggregateType<T>>

    /**
     * Group by RepairLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepairLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepairLogGroupByArgs['orderBy'] }
        : { orderBy?: RepairLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepairLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepairLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RepairLog model
   */
  readonly fields: RepairLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RepairLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepairLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inspection<T extends InspectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InspectionDefaultArgs<ExtArgs>>): Prisma__InspectionClient<$Result.GetResult<Prisma.$InspectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RepairLog model
   */
  interface RepairLogFieldRefs {
    readonly id: FieldRef<"RepairLog", 'String'>
    readonly inspectionId: FieldRef<"RepairLog", 'String'>
    readonly weldNumber: FieldRef<"RepairLog", 'String'>
    readonly defectType: FieldRef<"RepairLog", 'String'>
    readonly repairMethod: FieldRef<"RepairLog", 'String'>
    readonly repairedBy: FieldRef<"RepairLog", 'String'>
    readonly repairedAt: FieldRef<"RepairLog", 'DateTime'>
    readonly isCompleted: FieldRef<"RepairLog", 'Boolean'>
    readonly notes: FieldRef<"RepairLog", 'String'>
    readonly createdAt: FieldRef<"RepairLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RepairLog findUnique
   */
  export type RepairLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * Filter, which RepairLog to fetch.
     */
    where: RepairLogWhereUniqueInput
  }

  /**
   * RepairLog findUniqueOrThrow
   */
  export type RepairLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * Filter, which RepairLog to fetch.
     */
    where: RepairLogWhereUniqueInput
  }

  /**
   * RepairLog findFirst
   */
  export type RepairLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * Filter, which RepairLog to fetch.
     */
    where?: RepairLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepairLogs to fetch.
     */
    orderBy?: RepairLogOrderByWithRelationInput | RepairLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepairLogs.
     */
    cursor?: RepairLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepairLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepairLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepairLogs.
     */
    distinct?: RepairLogScalarFieldEnum | RepairLogScalarFieldEnum[]
  }

  /**
   * RepairLog findFirstOrThrow
   */
  export type RepairLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * Filter, which RepairLog to fetch.
     */
    where?: RepairLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepairLogs to fetch.
     */
    orderBy?: RepairLogOrderByWithRelationInput | RepairLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepairLogs.
     */
    cursor?: RepairLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepairLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepairLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepairLogs.
     */
    distinct?: RepairLogScalarFieldEnum | RepairLogScalarFieldEnum[]
  }

  /**
   * RepairLog findMany
   */
  export type RepairLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * Filter, which RepairLogs to fetch.
     */
    where?: RepairLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepairLogs to fetch.
     */
    orderBy?: RepairLogOrderByWithRelationInput | RepairLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RepairLogs.
     */
    cursor?: RepairLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepairLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepairLogs.
     */
    skip?: number
    distinct?: RepairLogScalarFieldEnum | RepairLogScalarFieldEnum[]
  }

  /**
   * RepairLog create
   */
  export type RepairLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * The data needed to create a RepairLog.
     */
    data: XOR<RepairLogCreateInput, RepairLogUncheckedCreateInput>
  }

  /**
   * RepairLog createMany
   */
  export type RepairLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RepairLogs.
     */
    data: RepairLogCreateManyInput | RepairLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RepairLog createManyAndReturn
   */
  export type RepairLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * The data used to create many RepairLogs.
     */
    data: RepairLogCreateManyInput | RepairLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RepairLog update
   */
  export type RepairLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * The data needed to update a RepairLog.
     */
    data: XOR<RepairLogUpdateInput, RepairLogUncheckedUpdateInput>
    /**
     * Choose, which RepairLog to update.
     */
    where: RepairLogWhereUniqueInput
  }

  /**
   * RepairLog updateMany
   */
  export type RepairLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RepairLogs.
     */
    data: XOR<RepairLogUpdateManyMutationInput, RepairLogUncheckedUpdateManyInput>
    /**
     * Filter which RepairLogs to update
     */
    where?: RepairLogWhereInput
    /**
     * Limit how many RepairLogs to update.
     */
    limit?: number
  }

  /**
   * RepairLog updateManyAndReturn
   */
  export type RepairLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * The data used to update RepairLogs.
     */
    data: XOR<RepairLogUpdateManyMutationInput, RepairLogUncheckedUpdateManyInput>
    /**
     * Filter which RepairLogs to update
     */
    where?: RepairLogWhereInput
    /**
     * Limit how many RepairLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RepairLog upsert
   */
  export type RepairLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * The filter to search for the RepairLog to update in case it exists.
     */
    where: RepairLogWhereUniqueInput
    /**
     * In case the RepairLog found by the `where` argument doesn't exist, create a new RepairLog with this data.
     */
    create: XOR<RepairLogCreateInput, RepairLogUncheckedCreateInput>
    /**
     * In case the RepairLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepairLogUpdateInput, RepairLogUncheckedUpdateInput>
  }

  /**
   * RepairLog delete
   */
  export type RepairLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
    /**
     * Filter which RepairLog to delete.
     */
    where: RepairLogWhereUniqueInput
  }

  /**
   * RepairLog deleteMany
   */
  export type RepairLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepairLogs to delete
     */
    where?: RepairLogWhereInput
    /**
     * Limit how many RepairLogs to delete.
     */
    limit?: number
  }

  /**
   * RepairLog without action
   */
  export type RepairLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepairLog
     */
    select?: RepairLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RepairLog
     */
    omit?: RepairLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepairLogInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    terms: number | null
  }

  export type CustomerSumAggregateOutputType = {
    terms: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    gstHst: string | null
    terms: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    gstHst: string | null
    terms: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    email: number
    phone: number
    address: number
    city: number
    province: number
    postal: number
    gstHst: number
    terms: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    terms?: true
  }

  export type CustomerSumAggregateInputType = {
    terms?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    gstHst?: true
    terms?: true
    isActive?: true
    createdAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    gstHst?: true
    terms?: true
    isActive?: true
    createdAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    gstHst?: true
    terms?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    companyId: string | null
    name: string
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    gstHst: string | null
    terms: number
    isActive: boolean
    createdAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    gstHst?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
    company?: boolean | Customer$companyArgs<ExtArgs>
    jobs?: boolean | Customer$jobsArgs<ExtArgs>
    quotes?: boolean | Customer$quotesArgs<ExtArgs>
    invoices?: boolean | Customer$invoicesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    gstHst?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
    company?: boolean | Customer$companyArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    gstHst?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
    company?: boolean | Customer$companyArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    gstHst?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "name" | "email" | "phone" | "address" | "city" | "province" | "postal" | "gstHst" | "terms" | "isActive" | "createdAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Customer$companyArgs<ExtArgs>
    jobs?: boolean | Customer$jobsArgs<ExtArgs>
    quotes?: boolean | Customer$quotesArgs<ExtArgs>
    invoices?: boolean | Customer$invoicesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Customer$companyArgs<ExtArgs>
  }
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Customer$companyArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs> | null
      jobs: Prisma.$JobPayload<ExtArgs>[]
      quotes: Prisma.$QuotePayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string | null
      name: string
      email: string | null
      phone: string | null
      address: string | null
      city: string | null
      province: string | null
      postal: string | null
      gstHst: string | null
      terms: number
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends Customer$companyArgs<ExtArgs> = {}>(args?: Subset<T, Customer$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    jobs<T extends Customer$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quotes<T extends Customer$quotesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$quotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Customer$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly companyId: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly city: FieldRef<"Customer", 'String'>
    readonly province: FieldRef<"Customer", 'String'>
    readonly postal: FieldRef<"Customer", 'String'>
    readonly gstHst: FieldRef<"Customer", 'String'>
    readonly terms: FieldRef<"Customer", 'Int'>
    readonly isActive: FieldRef<"Customer", 'Boolean'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.company
   */
  export type Customer$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Customer.jobs
   */
  export type Customer$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Customer.quotes
   */
  export type Customer$quotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    where?: QuoteWhereInput
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    cursor?: QuoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Customer.invoices
   */
  export type Customer$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorAvgAggregateOutputType = {
    terms: number | null
  }

  export type VendorSumAggregateOutputType = {
    terms: number | null
  }

  export type VendorMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    terms: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    terms: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    email: number
    phone: number
    address: number
    city: number
    province: number
    postal: number
    terms: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type VendorAvgAggregateInputType = {
    terms?: true
  }

  export type VendorSumAggregateInputType = {
    terms?: true
  }

  export type VendorMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    terms?: true
    isActive?: true
    createdAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    terms?: true
    isActive?: true
    createdAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    terms?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _avg?: VendorAvgAggregateInputType
    _sum?: VendorSumAggregateInputType
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: string
    companyId: string | null
    name: string
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    terms: number
    isActive: boolean
    createdAt: Date
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
    company?: boolean | Vendor$companyArgs<ExtArgs>
    purchaseOrders?: boolean | Vendor$purchaseOrdersArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
    company?: boolean | Vendor$companyArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
    company?: boolean | Vendor$companyArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    terms?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type VendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "name" | "email" | "phone" | "address" | "city" | "province" | "postal" | "terms" | "isActive" | "createdAt", ExtArgs["result"]["vendor"]>
  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Vendor$companyArgs<ExtArgs>
    purchaseOrders?: boolean | Vendor$purchaseOrdersArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Vendor$companyArgs<ExtArgs>
  }
  export type VendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Vendor$companyArgs<ExtArgs>
  }

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs> | null
      purchaseOrders: Prisma.$PurchaseOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string | null
      name: string
      email: string | null
      phone: string | null
      address: string | null
      city: string | null
      province: string | null
      postal: string | null
      terms: number
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendors and returns the data saved in the database.
     * @param {VendorCreateManyAndReturnArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors and returns the data updated in the database.
     * @param {VendorUpdateManyAndReturnArgs} args - Arguments to update many Vendors.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VendorUpdateManyAndReturnArgs>(args: SelectSubset<T, VendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends Vendor$companyArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    purchaseOrders<T extends Vendor$purchaseOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$purchaseOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'String'>
    readonly companyId: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly email: FieldRef<"Vendor", 'String'>
    readonly phone: FieldRef<"Vendor", 'String'>
    readonly address: FieldRef<"Vendor", 'String'>
    readonly city: FieldRef<"Vendor", 'String'>
    readonly province: FieldRef<"Vendor", 'String'>
    readonly postal: FieldRef<"Vendor", 'String'>
    readonly terms: FieldRef<"Vendor", 'Int'>
    readonly isActive: FieldRef<"Vendor", 'Boolean'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor createManyAndReturn
   */
  export type VendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor updateManyAndReturn
   */
  export type VendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to delete.
     */
    limit?: number
  }

  /**
   * Vendor.company
   */
  export type Vendor$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Vendor.purchaseOrders
   */
  export type Vendor$purchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model PurchaseOrder
   */

  export type AggregatePurchaseOrder = {
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  export type PurchaseOrderAvgAggregateOutputType = {
    subtotal: number | null
    tax: number | null
    total: number | null
  }

  export type PurchaseOrderSumAggregateOutputType = {
    subtotal: number | null
    tax: number | null
    total: number | null
  }

  export type PurchaseOrderMinAggregateOutputType = {
    id: string | null
    poNumber: string | null
    vendorId: string | null
    status: $Enums.PoStatus | null
    orderDate: Date | null
    requiredBy: Date | null
    subtotal: number | null
    tax: number | null
    total: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseOrderMaxAggregateOutputType = {
    id: string | null
    poNumber: string | null
    vendorId: string | null
    status: $Enums.PoStatus | null
    orderDate: Date | null
    requiredBy: Date | null
    subtotal: number | null
    tax: number | null
    total: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseOrderCountAggregateOutputType = {
    id: number
    poNumber: number
    vendorId: number
    status: number
    orderDate: number
    requiredBy: number
    subtotal: number
    tax: number
    total: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PurchaseOrderAvgAggregateInputType = {
    subtotal?: true
    tax?: true
    total?: true
  }

  export type PurchaseOrderSumAggregateInputType = {
    subtotal?: true
    tax?: true
    total?: true
  }

  export type PurchaseOrderMinAggregateInputType = {
    id?: true
    poNumber?: true
    vendorId?: true
    status?: true
    orderDate?: true
    requiredBy?: true
    subtotal?: true
    tax?: true
    total?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseOrderMaxAggregateInputType = {
    id?: true
    poNumber?: true
    vendorId?: true
    status?: true
    orderDate?: true
    requiredBy?: true
    subtotal?: true
    tax?: true
    total?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseOrderCountAggregateInputType = {
    id?: true
    poNumber?: true
    vendorId?: true
    status?: true
    orderDate?: true
    requiredBy?: true
    subtotal?: true
    tax?: true
    total?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PurchaseOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrder to aggregate.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseOrders
    **/
    _count?: true | PurchaseOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseOrderMaxAggregateInputType
  }

  export type GetPurchaseOrderAggregateType<T extends PurchaseOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseOrder[P]>
      : GetScalarType<T[P], AggregatePurchaseOrder[P]>
  }




  export type PurchaseOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithAggregationInput | PurchaseOrderOrderByWithAggregationInput[]
    by: PurchaseOrderScalarFieldEnum[] | PurchaseOrderScalarFieldEnum
    having?: PurchaseOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseOrderCountAggregateInputType | true
    _avg?: PurchaseOrderAvgAggregateInputType
    _sum?: PurchaseOrderSumAggregateInputType
    _min?: PurchaseOrderMinAggregateInputType
    _max?: PurchaseOrderMaxAggregateInputType
  }

  export type PurchaseOrderGroupByOutputType = {
    id: string
    poNumber: string
    vendorId: string
    status: $Enums.PoStatus
    orderDate: Date
    requiredBy: Date | null
    subtotal: number
    tax: number
    total: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  type GetPurchaseOrderGroupByPayload<T extends PurchaseOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poNumber?: boolean
    vendorId?: boolean
    status?: boolean
    orderDate?: boolean
    requiredBy?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    items?: boolean | PurchaseOrder$itemsArgs<ExtArgs>
    _count?: boolean | PurchaseOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poNumber?: boolean
    vendorId?: boolean
    status?: boolean
    orderDate?: boolean
    requiredBy?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poNumber?: boolean
    vendorId?: boolean
    status?: boolean
    orderDate?: boolean
    requiredBy?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectScalar = {
    id?: boolean
    poNumber?: boolean
    vendorId?: boolean
    status?: boolean
    orderDate?: boolean
    requiredBy?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PurchaseOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "poNumber" | "vendorId" | "status" | "orderDate" | "requiredBy" | "subtotal" | "tax" | "total" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["purchaseOrder"]>
  export type PurchaseOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    items?: boolean | PurchaseOrder$itemsArgs<ExtArgs>
    _count?: boolean | PurchaseOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PurchaseOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type PurchaseOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }

  export type $PurchaseOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PurchaseOrder"
    objects: {
      vendor: Prisma.$VendorPayload<ExtArgs>
      items: Prisma.$PurchaseOrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      poNumber: string
      vendorId: string
      status: $Enums.PoStatus
      orderDate: Date
      requiredBy: Date | null
      subtotal: number
      tax: number
      total: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["purchaseOrder"]>
    composites: {}
  }

  type PurchaseOrderGetPayload<S extends boolean | null | undefined | PurchaseOrderDefaultArgs> = $Result.GetResult<Prisma.$PurchaseOrderPayload, S>

  type PurchaseOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PurchaseOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PurchaseOrderCountAggregateInputType | true
    }

  export interface PurchaseOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseOrder'], meta: { name: 'PurchaseOrder' } }
    /**
     * Find zero or one PurchaseOrder that matches the filter.
     * @param {PurchaseOrderFindUniqueArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseOrderFindUniqueArgs>(args: SelectSubset<T, PurchaseOrderFindUniqueArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PurchaseOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PurchaseOrderFindUniqueOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PurchaseOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseOrderFindFirstArgs>(args?: SelectSubset<T, PurchaseOrderFindFirstArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PurchaseOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PurchaseOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany()
     * 
     * // Get first 10 PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PurchaseOrderFindManyArgs>(args?: SelectSubset<T, PurchaseOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PurchaseOrder.
     * @param {PurchaseOrderCreateArgs} args - Arguments to create a PurchaseOrder.
     * @example
     * // Create one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.create({
     *   data: {
     *     // ... data to create a PurchaseOrder
     *   }
     * })
     * 
     */
    create<T extends PurchaseOrderCreateArgs>(args: SelectSubset<T, PurchaseOrderCreateArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PurchaseOrders.
     * @param {PurchaseOrderCreateManyArgs} args - Arguments to create many PurchaseOrders.
     * @example
     * // Create many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseOrderCreateManyArgs>(args?: SelectSubset<T, PurchaseOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PurchaseOrders and returns the data saved in the database.
     * @param {PurchaseOrderCreateManyAndReturnArgs} args - Arguments to create many PurchaseOrders.
     * @example
     * // Create many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PurchaseOrders and only return the `id`
     * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PurchaseOrder.
     * @param {PurchaseOrderDeleteArgs} args - Arguments to delete one PurchaseOrder.
     * @example
     * // Delete one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.delete({
     *   where: {
     *     // ... filter to delete one PurchaseOrder
     *   }
     * })
     * 
     */
    delete<T extends PurchaseOrderDeleteArgs>(args: SelectSubset<T, PurchaseOrderDeleteArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PurchaseOrder.
     * @param {PurchaseOrderUpdateArgs} args - Arguments to update one PurchaseOrder.
     * @example
     * // Update one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseOrderUpdateArgs>(args: SelectSubset<T, PurchaseOrderUpdateArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PurchaseOrders.
     * @param {PurchaseOrderDeleteManyArgs} args - Arguments to filter PurchaseOrders to delete.
     * @example
     * // Delete a few PurchaseOrders
     * const { count } = await prisma.purchaseOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseOrderDeleteManyArgs>(args?: SelectSubset<T, PurchaseOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseOrderUpdateManyArgs>(args: SelectSubset<T, PurchaseOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrders and returns the data updated in the database.
     * @param {PurchaseOrderUpdateManyAndReturnArgs} args - Arguments to update many PurchaseOrders.
     * @example
     * // Update many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PurchaseOrders and only return the `id`
     * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PurchaseOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, PurchaseOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PurchaseOrder.
     * @param {PurchaseOrderUpsertArgs} args - Arguments to update or create a PurchaseOrder.
     * @example
     * // Update or create a PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.upsert({
     *   create: {
     *     // ... data to create a PurchaseOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseOrder we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseOrderUpsertArgs>(args: SelectSubset<T, PurchaseOrderUpsertArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderCountArgs} args - Arguments to filter PurchaseOrders to count.
     * @example
     * // Count the number of PurchaseOrders
     * const count = await prisma.purchaseOrder.count({
     *   where: {
     *     // ... the filter for the PurchaseOrders we want to count
     *   }
     * })
    **/
    count<T extends PurchaseOrderCountArgs>(
      args?: Subset<T, PurchaseOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseOrderAggregateArgs>(args: Subset<T, PurchaseOrderAggregateArgs>): Prisma.PrismaPromise<GetPurchaseOrderAggregateType<T>>

    /**
     * Group by PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseOrderGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseOrder model
   */
  readonly fields: PurchaseOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends VendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendorDefaultArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends PurchaseOrder$itemsArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrder$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PurchaseOrder model
   */
  interface PurchaseOrderFieldRefs {
    readonly id: FieldRef<"PurchaseOrder", 'String'>
    readonly poNumber: FieldRef<"PurchaseOrder", 'String'>
    readonly vendorId: FieldRef<"PurchaseOrder", 'String'>
    readonly status: FieldRef<"PurchaseOrder", 'PoStatus'>
    readonly orderDate: FieldRef<"PurchaseOrder", 'DateTime'>
    readonly requiredBy: FieldRef<"PurchaseOrder", 'DateTime'>
    readonly subtotal: FieldRef<"PurchaseOrder", 'Float'>
    readonly tax: FieldRef<"PurchaseOrder", 'Float'>
    readonly total: FieldRef<"PurchaseOrder", 'Float'>
    readonly notes: FieldRef<"PurchaseOrder", 'String'>
    readonly createdAt: FieldRef<"PurchaseOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"PurchaseOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PurchaseOrder findUnique
   */
  export type PurchaseOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder findUniqueOrThrow
   */
  export type PurchaseOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder findFirst
   */
  export type PurchaseOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder findFirstOrThrow
   */
  export type PurchaseOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder findMany
   */
  export type PurchaseOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrders to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder create
   */
  export type PurchaseOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseOrder.
     */
    data: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
  }

  /**
   * PurchaseOrder createMany
   */
  export type PurchaseOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseOrders.
     */
    data: PurchaseOrderCreateManyInput | PurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PurchaseOrder createManyAndReturn
   */
  export type PurchaseOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * The data used to create many PurchaseOrders.
     */
    data: PurchaseOrderCreateManyInput | PurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseOrder update
   */
  export type PurchaseOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseOrder.
     */
    data: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
    /**
     * Choose, which PurchaseOrder to update.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder updateMany
   */
  export type PurchaseOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseOrders.
     */
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrders to update
     */
    where?: PurchaseOrderWhereInput
    /**
     * Limit how many PurchaseOrders to update.
     */
    limit?: number
  }

  /**
   * PurchaseOrder updateManyAndReturn
   */
  export type PurchaseOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * The data used to update PurchaseOrders.
     */
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrders to update
     */
    where?: PurchaseOrderWhereInput
    /**
     * Limit how many PurchaseOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseOrder upsert
   */
  export type PurchaseOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseOrder to update in case it exists.
     */
    where: PurchaseOrderWhereUniqueInput
    /**
     * In case the PurchaseOrder found by the `where` argument doesn't exist, create a new PurchaseOrder with this data.
     */
    create: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
    /**
     * In case the PurchaseOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
  }

  /**
   * PurchaseOrder delete
   */
  export type PurchaseOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter which PurchaseOrder to delete.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder deleteMany
   */
  export type PurchaseOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrders to delete
     */
    where?: PurchaseOrderWhereInput
    /**
     * Limit how many PurchaseOrders to delete.
     */
    limit?: number
  }

  /**
   * PurchaseOrder.items
   */
  export type PurchaseOrder$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    where?: PurchaseOrderItemWhereInput
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    cursor?: PurchaseOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrder without action
   */
  export type PurchaseOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrder
     */
    omit?: PurchaseOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
  }


  /**
   * Model PurchaseOrderItem
   */

  export type AggregatePurchaseOrderItem = {
    _count: PurchaseOrderItemCountAggregateOutputType | null
    _avg: PurchaseOrderItemAvgAggregateOutputType | null
    _sum: PurchaseOrderItemSumAggregateOutputType | null
    _min: PurchaseOrderItemMinAggregateOutputType | null
    _max: PurchaseOrderItemMaxAggregateOutputType | null
  }

  export type PurchaseOrderItemAvgAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
    qtyReceived: number | null
  }

  export type PurchaseOrderItemSumAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
    qtyReceived: number | null
  }

  export type PurchaseOrderItemMinAggregateOutputType = {
    id: string | null
    poId: string | null
    materialId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitCost: number | null
    totalCost: number | null
    qtyReceived: number | null
    createdAt: Date | null
  }

  export type PurchaseOrderItemMaxAggregateOutputType = {
    id: string | null
    poId: string | null
    materialId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitCost: number | null
    totalCost: number | null
    qtyReceived: number | null
    createdAt: Date | null
  }

  export type PurchaseOrderItemCountAggregateOutputType = {
    id: number
    poId: number
    materialId: number
    description: number
    quantity: number
    unit: number
    unitCost: number
    totalCost: number
    qtyReceived: number
    createdAt: number
    _all: number
  }


  export type PurchaseOrderItemAvgAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
    qtyReceived?: true
  }

  export type PurchaseOrderItemSumAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
    qtyReceived?: true
  }

  export type PurchaseOrderItemMinAggregateInputType = {
    id?: true
    poId?: true
    materialId?: true
    description?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    qtyReceived?: true
    createdAt?: true
  }

  export type PurchaseOrderItemMaxAggregateInputType = {
    id?: true
    poId?: true
    materialId?: true
    description?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    qtyReceived?: true
    createdAt?: true
  }

  export type PurchaseOrderItemCountAggregateInputType = {
    id?: true
    poId?: true
    materialId?: true
    description?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    qtyReceived?: true
    createdAt?: true
    _all?: true
  }

  export type PurchaseOrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrderItem to aggregate.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseOrderItems
    **/
    _count?: true | PurchaseOrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseOrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseOrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseOrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseOrderItemMaxAggregateInputType
  }

  export type GetPurchaseOrderItemAggregateType<T extends PurchaseOrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseOrderItem[P]>
      : GetScalarType<T[P], AggregatePurchaseOrderItem[P]>
  }




  export type PurchaseOrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderItemWhereInput
    orderBy?: PurchaseOrderItemOrderByWithAggregationInput | PurchaseOrderItemOrderByWithAggregationInput[]
    by: PurchaseOrderItemScalarFieldEnum[] | PurchaseOrderItemScalarFieldEnum
    having?: PurchaseOrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseOrderItemCountAggregateInputType | true
    _avg?: PurchaseOrderItemAvgAggregateInputType
    _sum?: PurchaseOrderItemSumAggregateInputType
    _min?: PurchaseOrderItemMinAggregateInputType
    _max?: PurchaseOrderItemMaxAggregateInputType
  }

  export type PurchaseOrderItemGroupByOutputType = {
    id: string
    poId: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived: number
    createdAt: Date
    _count: PurchaseOrderItemCountAggregateOutputType | null
    _avg: PurchaseOrderItemAvgAggregateOutputType | null
    _sum: PurchaseOrderItemSumAggregateOutputType | null
    _min: PurchaseOrderItemMinAggregateOutputType | null
    _max: PurchaseOrderItemMaxAggregateOutputType | null
  }

  type GetPurchaseOrderItemGroupByPayload<T extends PurchaseOrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseOrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseOrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseOrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseOrderItemGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseOrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    qtyReceived?: boolean
    createdAt?: boolean
    po?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrderItem"]>

  export type PurchaseOrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    qtyReceived?: boolean
    createdAt?: boolean
    po?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrderItem"]>

  export type PurchaseOrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    poId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    qtyReceived?: boolean
    createdAt?: boolean
    po?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrderItem"]>

  export type PurchaseOrderItemSelectScalar = {
    id?: boolean
    poId?: boolean
    materialId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    qtyReceived?: boolean
    createdAt?: boolean
  }

  export type PurchaseOrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "poId" | "materialId" | "description" | "quantity" | "unit" | "unitCost" | "totalCost" | "qtyReceived" | "createdAt", ExtArgs["result"]["purchaseOrderItem"]>
  export type PurchaseOrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    po?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }
  export type PurchaseOrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    po?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }
  export type PurchaseOrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    po?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    material?: boolean | MaterialDefaultArgs<ExtArgs>
  }

  export type $PurchaseOrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PurchaseOrderItem"
    objects: {
      po: Prisma.$PurchaseOrderPayload<ExtArgs>
      material: Prisma.$MaterialPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      poId: string
      materialId: string
      description: string
      quantity: number
      unit: string
      unitCost: number
      totalCost: number
      qtyReceived: number
      createdAt: Date
    }, ExtArgs["result"]["purchaseOrderItem"]>
    composites: {}
  }

  type PurchaseOrderItemGetPayload<S extends boolean | null | undefined | PurchaseOrderItemDefaultArgs> = $Result.GetResult<Prisma.$PurchaseOrderItemPayload, S>

  type PurchaseOrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PurchaseOrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PurchaseOrderItemCountAggregateInputType | true
    }

  export interface PurchaseOrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseOrderItem'], meta: { name: 'PurchaseOrderItem' } }
    /**
     * Find zero or one PurchaseOrderItem that matches the filter.
     * @param {PurchaseOrderItemFindUniqueArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseOrderItemFindUniqueArgs>(args: SelectSubset<T, PurchaseOrderItemFindUniqueArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PurchaseOrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PurchaseOrderItemFindUniqueOrThrowArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseOrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseOrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PurchaseOrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemFindFirstArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseOrderItemFindFirstArgs>(args?: SelectSubset<T, PurchaseOrderItemFindFirstArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PurchaseOrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemFindFirstOrThrowArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseOrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseOrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PurchaseOrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseOrderItems
     * const purchaseOrderItems = await prisma.purchaseOrderItem.findMany()
     * 
     * // Get first 10 PurchaseOrderItems
     * const purchaseOrderItems = await prisma.purchaseOrderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseOrderItemWithIdOnly = await prisma.purchaseOrderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PurchaseOrderItemFindManyArgs>(args?: SelectSubset<T, PurchaseOrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PurchaseOrderItem.
     * @param {PurchaseOrderItemCreateArgs} args - Arguments to create a PurchaseOrderItem.
     * @example
     * // Create one PurchaseOrderItem
     * const PurchaseOrderItem = await prisma.purchaseOrderItem.create({
     *   data: {
     *     // ... data to create a PurchaseOrderItem
     *   }
     * })
     * 
     */
    create<T extends PurchaseOrderItemCreateArgs>(args: SelectSubset<T, PurchaseOrderItemCreateArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PurchaseOrderItems.
     * @param {PurchaseOrderItemCreateManyArgs} args - Arguments to create many PurchaseOrderItems.
     * @example
     * // Create many PurchaseOrderItems
     * const purchaseOrderItem = await prisma.purchaseOrderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseOrderItemCreateManyArgs>(args?: SelectSubset<T, PurchaseOrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PurchaseOrderItems and returns the data saved in the database.
     * @param {PurchaseOrderItemCreateManyAndReturnArgs} args - Arguments to create many PurchaseOrderItems.
     * @example
     * // Create many PurchaseOrderItems
     * const purchaseOrderItem = await prisma.purchaseOrderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PurchaseOrderItems and only return the `id`
     * const purchaseOrderItemWithIdOnly = await prisma.purchaseOrderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseOrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseOrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PurchaseOrderItem.
     * @param {PurchaseOrderItemDeleteArgs} args - Arguments to delete one PurchaseOrderItem.
     * @example
     * // Delete one PurchaseOrderItem
     * const PurchaseOrderItem = await prisma.purchaseOrderItem.delete({
     *   where: {
     *     // ... filter to delete one PurchaseOrderItem
     *   }
     * })
     * 
     */
    delete<T extends PurchaseOrderItemDeleteArgs>(args: SelectSubset<T, PurchaseOrderItemDeleteArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PurchaseOrderItem.
     * @param {PurchaseOrderItemUpdateArgs} args - Arguments to update one PurchaseOrderItem.
     * @example
     * // Update one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseOrderItemUpdateArgs>(args: SelectSubset<T, PurchaseOrderItemUpdateArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PurchaseOrderItems.
     * @param {PurchaseOrderItemDeleteManyArgs} args - Arguments to filter PurchaseOrderItems to delete.
     * @example
     * // Delete a few PurchaseOrderItems
     * const { count } = await prisma.purchaseOrderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseOrderItemDeleteManyArgs>(args?: SelectSubset<T, PurchaseOrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseOrderItems
     * const purchaseOrderItem = await prisma.purchaseOrderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseOrderItemUpdateManyArgs>(args: SelectSubset<T, PurchaseOrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrderItems and returns the data updated in the database.
     * @param {PurchaseOrderItemUpdateManyAndReturnArgs} args - Arguments to update many PurchaseOrderItems.
     * @example
     * // Update many PurchaseOrderItems
     * const purchaseOrderItem = await prisma.purchaseOrderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PurchaseOrderItems and only return the `id`
     * const purchaseOrderItemWithIdOnly = await prisma.purchaseOrderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PurchaseOrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, PurchaseOrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PurchaseOrderItem.
     * @param {PurchaseOrderItemUpsertArgs} args - Arguments to update or create a PurchaseOrderItem.
     * @example
     * // Update or create a PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.upsert({
     *   create: {
     *     // ... data to create a PurchaseOrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseOrderItem we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseOrderItemUpsertArgs>(args: SelectSubset<T, PurchaseOrderItemUpsertArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PurchaseOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemCountArgs} args - Arguments to filter PurchaseOrderItems to count.
     * @example
     * // Count the number of PurchaseOrderItems
     * const count = await prisma.purchaseOrderItem.count({
     *   where: {
     *     // ... the filter for the PurchaseOrderItems we want to count
     *   }
     * })
    **/
    count<T extends PurchaseOrderItemCountArgs>(
      args?: Subset<T, PurchaseOrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseOrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseOrderItemAggregateArgs>(args: Subset<T, PurchaseOrderItemAggregateArgs>): Prisma.PrismaPromise<GetPurchaseOrderItemAggregateType<T>>

    /**
     * Group by PurchaseOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseOrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseOrderItemGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseOrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseOrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseOrderItem model
   */
  readonly fields: PurchaseOrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseOrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseOrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    po<T extends PurchaseOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrderDefaultArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    material<T extends MaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialDefaultArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PurchaseOrderItem model
   */
  interface PurchaseOrderItemFieldRefs {
    readonly id: FieldRef<"PurchaseOrderItem", 'String'>
    readonly poId: FieldRef<"PurchaseOrderItem", 'String'>
    readonly materialId: FieldRef<"PurchaseOrderItem", 'String'>
    readonly description: FieldRef<"PurchaseOrderItem", 'String'>
    readonly quantity: FieldRef<"PurchaseOrderItem", 'Float'>
    readonly unit: FieldRef<"PurchaseOrderItem", 'String'>
    readonly unitCost: FieldRef<"PurchaseOrderItem", 'Float'>
    readonly totalCost: FieldRef<"PurchaseOrderItem", 'Float'>
    readonly qtyReceived: FieldRef<"PurchaseOrderItem", 'Float'>
    readonly createdAt: FieldRef<"PurchaseOrderItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PurchaseOrderItem findUnique
   */
  export type PurchaseOrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem findUniqueOrThrow
   */
  export type PurchaseOrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem findFirst
   */
  export type PurchaseOrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrderItems.
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrderItems.
     */
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrderItem findFirstOrThrow
   */
  export type PurchaseOrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrderItems.
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrderItems.
     */
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrderItem findMany
   */
  export type PurchaseOrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItems to fetch.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseOrderItems.
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrderItem create
   */
  export type PurchaseOrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseOrderItem.
     */
    data: XOR<PurchaseOrderItemCreateInput, PurchaseOrderItemUncheckedCreateInput>
  }

  /**
   * PurchaseOrderItem createMany
   */
  export type PurchaseOrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseOrderItems.
     */
    data: PurchaseOrderItemCreateManyInput | PurchaseOrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PurchaseOrderItem createManyAndReturn
   */
  export type PurchaseOrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many PurchaseOrderItems.
     */
    data: PurchaseOrderItemCreateManyInput | PurchaseOrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseOrderItem update
   */
  export type PurchaseOrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseOrderItem.
     */
    data: XOR<PurchaseOrderItemUpdateInput, PurchaseOrderItemUncheckedUpdateInput>
    /**
     * Choose, which PurchaseOrderItem to update.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem updateMany
   */
  export type PurchaseOrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseOrderItems.
     */
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrderItems to update
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * Limit how many PurchaseOrderItems to update.
     */
    limit?: number
  }

  /**
   * PurchaseOrderItem updateManyAndReturn
   */
  export type PurchaseOrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * The data used to update PurchaseOrderItems.
     */
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrderItems to update
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * Limit how many PurchaseOrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseOrderItem upsert
   */
  export type PurchaseOrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseOrderItem to update in case it exists.
     */
    where: PurchaseOrderItemWhereUniqueInput
    /**
     * In case the PurchaseOrderItem found by the `where` argument doesn't exist, create a new PurchaseOrderItem with this data.
     */
    create: XOR<PurchaseOrderItemCreateInput, PurchaseOrderItemUncheckedCreateInput>
    /**
     * In case the PurchaseOrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseOrderItemUpdateInput, PurchaseOrderItemUncheckedUpdateInput>
  }

  /**
   * PurchaseOrderItem delete
   */
  export type PurchaseOrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter which PurchaseOrderItem to delete.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem deleteMany
   */
  export type PurchaseOrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrderItems to delete
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * Limit how many PurchaseOrderItems to delete.
     */
    limit?: number
  }

  /**
   * PurchaseOrderItem without action
   */
  export type PurchaseOrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseOrderItem
     */
    omit?: PurchaseOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
  }


  /**
   * Model Quote
   */

  export type AggregateQuote = {
    _count: QuoteCountAggregateOutputType | null
    _avg: QuoteAvgAggregateOutputType | null
    _sum: QuoteSumAggregateOutputType | null
    _min: QuoteMinAggregateOutputType | null
    _max: QuoteMaxAggregateOutputType | null
  }

  export type QuoteAvgAggregateOutputType = {
    subtotal: number | null
    tax: number | null
    total: number | null
  }

  export type QuoteSumAggregateOutputType = {
    subtotal: number | null
    tax: number | null
    total: number | null
  }

  export type QuoteMinAggregateOutputType = {
    id: string | null
    quoteNumber: string | null
    customerId: string | null
    title: string | null
    subtotal: number | null
    tax: number | null
    total: number | null
    validUntil: Date | null
    status: $Enums.QuoteStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuoteMaxAggregateOutputType = {
    id: string | null
    quoteNumber: string | null
    customerId: string | null
    title: string | null
    subtotal: number | null
    tax: number | null
    total: number | null
    validUntil: Date | null
    status: $Enums.QuoteStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuoteCountAggregateOutputType = {
    id: number
    quoteNumber: number
    customerId: number
    title: number
    subtotal: number
    tax: number
    total: number
    validUntil: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuoteAvgAggregateInputType = {
    subtotal?: true
    tax?: true
    total?: true
  }

  export type QuoteSumAggregateInputType = {
    subtotal?: true
    tax?: true
    total?: true
  }

  export type QuoteMinAggregateInputType = {
    id?: true
    quoteNumber?: true
    customerId?: true
    title?: true
    subtotal?: true
    tax?: true
    total?: true
    validUntil?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuoteMaxAggregateInputType = {
    id?: true
    quoteNumber?: true
    customerId?: true
    title?: true
    subtotal?: true
    tax?: true
    total?: true
    validUntil?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuoteCountAggregateInputType = {
    id?: true
    quoteNumber?: true
    customerId?: true
    title?: true
    subtotal?: true
    tax?: true
    total?: true
    validUntil?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quote to aggregate.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quotes
    **/
    _count?: true | QuoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuoteMaxAggregateInputType
  }

  export type GetQuoteAggregateType<T extends QuoteAggregateArgs> = {
        [P in keyof T & keyof AggregateQuote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuote[P]>
      : GetScalarType<T[P], AggregateQuote[P]>
  }




  export type QuoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteWhereInput
    orderBy?: QuoteOrderByWithAggregationInput | QuoteOrderByWithAggregationInput[]
    by: QuoteScalarFieldEnum[] | QuoteScalarFieldEnum
    having?: QuoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuoteCountAggregateInputType | true
    _avg?: QuoteAvgAggregateInputType
    _sum?: QuoteSumAggregateInputType
    _min?: QuoteMinAggregateInputType
    _max?: QuoteMaxAggregateInputType
  }

  export type QuoteGroupByOutputType = {
    id: string
    quoteNumber: string
    customerId: string
    title: string
    subtotal: number
    tax: number
    total: number
    validUntil: Date | null
    status: $Enums.QuoteStatus
    createdAt: Date
    updatedAt: Date
    _count: QuoteCountAggregateOutputType | null
    _avg: QuoteAvgAggregateOutputType | null
    _sum: QuoteSumAggregateOutputType | null
    _min: QuoteMinAggregateOutputType | null
    _max: QuoteMaxAggregateOutputType | null
  }

  type GetQuoteGroupByPayload<T extends QuoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuoteGroupByOutputType[P]>
            : GetScalarType<T[P], QuoteGroupByOutputType[P]>
        }
      >
    >


  export type QuoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteNumber?: boolean
    customerId?: boolean
    title?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    validUntil?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    items?: boolean | Quote$itemsArgs<ExtArgs>
    jobs?: boolean | Quote$jobsArgs<ExtArgs>
    _count?: boolean | QuoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteNumber?: boolean
    customerId?: boolean
    title?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    validUntil?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteNumber?: boolean
    customerId?: boolean
    title?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    validUntil?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectScalar = {
    id?: boolean
    quoteNumber?: boolean
    customerId?: boolean
    title?: boolean
    subtotal?: boolean
    tax?: boolean
    total?: boolean
    validUntil?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quoteNumber" | "customerId" | "title" | "subtotal" | "tax" | "total" | "validUntil" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["quote"]>
  export type QuoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    items?: boolean | Quote$itemsArgs<ExtArgs>
    jobs?: boolean | Quote$jobsArgs<ExtArgs>
    _count?: boolean | QuoteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type QuoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $QuotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quote"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      items: Prisma.$QuoteItemPayload<ExtArgs>[]
      jobs: Prisma.$JobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quoteNumber: string
      customerId: string
      title: string
      subtotal: number
      tax: number
      total: number
      validUntil: Date | null
      status: $Enums.QuoteStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["quote"]>
    composites: {}
  }

  type QuoteGetPayload<S extends boolean | null | undefined | QuoteDefaultArgs> = $Result.GetResult<Prisma.$QuotePayload, S>

  type QuoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuoteCountAggregateInputType | true
    }

  export interface QuoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quote'], meta: { name: 'Quote' } }
    /**
     * Find zero or one Quote that matches the filter.
     * @param {QuoteFindUniqueArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuoteFindUniqueArgs>(args: SelectSubset<T, QuoteFindUniqueArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Quote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuoteFindUniqueOrThrowArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuoteFindUniqueOrThrowArgs>(args: SelectSubset<T, QuoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindFirstArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuoteFindFirstArgs>(args?: SelectSubset<T, QuoteFindFirstArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindFirstOrThrowArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuoteFindFirstOrThrowArgs>(args?: SelectSubset<T, QuoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Quotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quotes
     * const quotes = await prisma.quote.findMany()
     * 
     * // Get first 10 Quotes
     * const quotes = await prisma.quote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quoteWithIdOnly = await prisma.quote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuoteFindManyArgs>(args?: SelectSubset<T, QuoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Quote.
     * @param {QuoteCreateArgs} args - Arguments to create a Quote.
     * @example
     * // Create one Quote
     * const Quote = await prisma.quote.create({
     *   data: {
     *     // ... data to create a Quote
     *   }
     * })
     * 
     */
    create<T extends QuoteCreateArgs>(args: SelectSubset<T, QuoteCreateArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Quotes.
     * @param {QuoteCreateManyArgs} args - Arguments to create many Quotes.
     * @example
     * // Create many Quotes
     * const quote = await prisma.quote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuoteCreateManyArgs>(args?: SelectSubset<T, QuoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quotes and returns the data saved in the database.
     * @param {QuoteCreateManyAndReturnArgs} args - Arguments to create many Quotes.
     * @example
     * // Create many Quotes
     * const quote = await prisma.quote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quotes and only return the `id`
     * const quoteWithIdOnly = await prisma.quote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuoteCreateManyAndReturnArgs>(args?: SelectSubset<T, QuoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Quote.
     * @param {QuoteDeleteArgs} args - Arguments to delete one Quote.
     * @example
     * // Delete one Quote
     * const Quote = await prisma.quote.delete({
     *   where: {
     *     // ... filter to delete one Quote
     *   }
     * })
     * 
     */
    delete<T extends QuoteDeleteArgs>(args: SelectSubset<T, QuoteDeleteArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Quote.
     * @param {QuoteUpdateArgs} args - Arguments to update one Quote.
     * @example
     * // Update one Quote
     * const quote = await prisma.quote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuoteUpdateArgs>(args: SelectSubset<T, QuoteUpdateArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Quotes.
     * @param {QuoteDeleteManyArgs} args - Arguments to filter Quotes to delete.
     * @example
     * // Delete a few Quotes
     * const { count } = await prisma.quote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuoteDeleteManyArgs>(args?: SelectSubset<T, QuoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quotes
     * const quote = await prisma.quote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuoteUpdateManyArgs>(args: SelectSubset<T, QuoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotes and returns the data updated in the database.
     * @param {QuoteUpdateManyAndReturnArgs} args - Arguments to update many Quotes.
     * @example
     * // Update many Quotes
     * const quote = await prisma.quote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quotes and only return the `id`
     * const quoteWithIdOnly = await prisma.quote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuoteUpdateManyAndReturnArgs>(args: SelectSubset<T, QuoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Quote.
     * @param {QuoteUpsertArgs} args - Arguments to update or create a Quote.
     * @example
     * // Update or create a Quote
     * const quote = await prisma.quote.upsert({
     *   create: {
     *     // ... data to create a Quote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quote we want to update
     *   }
     * })
     */
    upsert<T extends QuoteUpsertArgs>(args: SelectSubset<T, QuoteUpsertArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Quotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteCountArgs} args - Arguments to filter Quotes to count.
     * @example
     * // Count the number of Quotes
     * const count = await prisma.quote.count({
     *   where: {
     *     // ... the filter for the Quotes we want to count
     *   }
     * })
    **/
    count<T extends QuoteCountArgs>(
      args?: Subset<T, QuoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuoteAggregateArgs>(args: Subset<T, QuoteAggregateArgs>): Prisma.PrismaPromise<GetQuoteAggregateType<T>>

    /**
     * Group by Quote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuoteGroupByArgs['orderBy'] }
        : { orderBy?: QuoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quote model
   */
  readonly fields: QuoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Quote$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Quote$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobs<T extends Quote$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Quote$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quote model
   */
  interface QuoteFieldRefs {
    readonly id: FieldRef<"Quote", 'String'>
    readonly quoteNumber: FieldRef<"Quote", 'String'>
    readonly customerId: FieldRef<"Quote", 'String'>
    readonly title: FieldRef<"Quote", 'String'>
    readonly subtotal: FieldRef<"Quote", 'Float'>
    readonly tax: FieldRef<"Quote", 'Float'>
    readonly total: FieldRef<"Quote", 'Float'>
    readonly validUntil: FieldRef<"Quote", 'DateTime'>
    readonly status: FieldRef<"Quote", 'QuoteStatus'>
    readonly createdAt: FieldRef<"Quote", 'DateTime'>
    readonly updatedAt: FieldRef<"Quote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Quote findUnique
   */
  export type QuoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote findUniqueOrThrow
   */
  export type QuoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote findFirst
   */
  export type QuoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotes.
     */
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote findFirstOrThrow
   */
  export type QuoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotes.
     */
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote findMany
   */
  export type QuoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quotes to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote create
   */
  export type QuoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Quote.
     */
    data: XOR<QuoteCreateInput, QuoteUncheckedCreateInput>
  }

  /**
   * Quote createMany
   */
  export type QuoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quotes.
     */
    data: QuoteCreateManyInput | QuoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quote createManyAndReturn
   */
  export type QuoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data used to create many Quotes.
     */
    data: QuoteCreateManyInput | QuoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quote update
   */
  export type QuoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Quote.
     */
    data: XOR<QuoteUpdateInput, QuoteUncheckedUpdateInput>
    /**
     * Choose, which Quote to update.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote updateMany
   */
  export type QuoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quotes.
     */
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyInput>
    /**
     * Filter which Quotes to update
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to update.
     */
    limit?: number
  }

  /**
   * Quote updateManyAndReturn
   */
  export type QuoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data used to update Quotes.
     */
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyInput>
    /**
     * Filter which Quotes to update
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quote upsert
   */
  export type QuoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Quote to update in case it exists.
     */
    where: QuoteWhereUniqueInput
    /**
     * In case the Quote found by the `where` argument doesn't exist, create a new Quote with this data.
     */
    create: XOR<QuoteCreateInput, QuoteUncheckedCreateInput>
    /**
     * In case the Quote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuoteUpdateInput, QuoteUncheckedUpdateInput>
  }

  /**
   * Quote delete
   */
  export type QuoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter which Quote to delete.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote deleteMany
   */
  export type QuoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quotes to delete
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to delete.
     */
    limit?: number
  }

  /**
   * Quote.items
   */
  export type Quote$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    where?: QuoteItemWhereInput
    orderBy?: QuoteItemOrderByWithRelationInput | QuoteItemOrderByWithRelationInput[]
    cursor?: QuoteItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuoteItemScalarFieldEnum | QuoteItemScalarFieldEnum[]
  }

  /**
   * Quote.jobs
   */
  export type Quote$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Quote without action
   */
  export type QuoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
  }


  /**
   * Model QuoteItem
   */

  export type AggregateQuoteItem = {
    _count: QuoteItemCountAggregateOutputType | null
    _avg: QuoteItemAvgAggregateOutputType | null
    _sum: QuoteItemSumAggregateOutputType | null
    _min: QuoteItemMinAggregateOutputType | null
    _max: QuoteItemMaxAggregateOutputType | null
  }

  export type QuoteItemAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type QuoteItemSumAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type QuoteItemMinAggregateOutputType = {
    id: string | null
    quoteId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
  }

  export type QuoteItemMaxAggregateOutputType = {
    id: string | null
    quoteId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
  }

  export type QuoteItemCountAggregateOutputType = {
    id: number
    quoteId: number
    description: number
    quantity: number
    unit: number
    unitPrice: number
    totalPrice: number
    createdAt: number
    _all: number
  }


  export type QuoteItemAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type QuoteItemSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type QuoteItemMinAggregateInputType = {
    id?: true
    quoteId?: true
    description?: true
    quantity?: true
    unit?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
  }

  export type QuoteItemMaxAggregateInputType = {
    id?: true
    quoteId?: true
    description?: true
    quantity?: true
    unit?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
  }

  export type QuoteItemCountAggregateInputType = {
    id?: true
    quoteId?: true
    description?: true
    quantity?: true
    unit?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
    _all?: true
  }

  export type QuoteItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuoteItem to aggregate.
     */
    where?: QuoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuoteItems to fetch.
     */
    orderBy?: QuoteItemOrderByWithRelationInput | QuoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuoteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuoteItems
    **/
    _count?: true | QuoteItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuoteItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuoteItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuoteItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuoteItemMaxAggregateInputType
  }

  export type GetQuoteItemAggregateType<T extends QuoteItemAggregateArgs> = {
        [P in keyof T & keyof AggregateQuoteItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuoteItem[P]>
      : GetScalarType<T[P], AggregateQuoteItem[P]>
  }




  export type QuoteItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteItemWhereInput
    orderBy?: QuoteItemOrderByWithAggregationInput | QuoteItemOrderByWithAggregationInput[]
    by: QuoteItemScalarFieldEnum[] | QuoteItemScalarFieldEnum
    having?: QuoteItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuoteItemCountAggregateInputType | true
    _avg?: QuoteItemAvgAggregateInputType
    _sum?: QuoteItemSumAggregateInputType
    _min?: QuoteItemMinAggregateInputType
    _max?: QuoteItemMaxAggregateInputType
  }

  export type QuoteItemGroupByOutputType = {
    id: string
    quoteId: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt: Date
    _count: QuoteItemCountAggregateOutputType | null
    _avg: QuoteItemAvgAggregateOutputType | null
    _sum: QuoteItemSumAggregateOutputType | null
    _min: QuoteItemMinAggregateOutputType | null
    _max: QuoteItemMaxAggregateOutputType | null
  }

  type GetQuoteItemGroupByPayload<T extends QuoteItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuoteItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuoteItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuoteItemGroupByOutputType[P]>
            : GetScalarType<T[P], QuoteItemGroupByOutputType[P]>
        }
      >
    >


  export type QuoteItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quoteItem"]>

  export type QuoteItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quoteItem"]>

  export type QuoteItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quoteItem"]>

  export type QuoteItemSelectScalar = {
    id?: boolean
    quoteId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
  }

  export type QuoteItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quoteId" | "description" | "quantity" | "unit" | "unitPrice" | "totalPrice" | "createdAt", ExtArgs["result"]["quoteItem"]>
  export type QuoteItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }
  export type QuoteItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }
  export type QuoteItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }

  export type $QuoteItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuoteItem"
    objects: {
      quote: Prisma.$QuotePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quoteId: string
      description: string
      quantity: number
      unit: string
      unitPrice: number
      totalPrice: number
      createdAt: Date
    }, ExtArgs["result"]["quoteItem"]>
    composites: {}
  }

  type QuoteItemGetPayload<S extends boolean | null | undefined | QuoteItemDefaultArgs> = $Result.GetResult<Prisma.$QuoteItemPayload, S>

  type QuoteItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuoteItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuoteItemCountAggregateInputType | true
    }

  export interface QuoteItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuoteItem'], meta: { name: 'QuoteItem' } }
    /**
     * Find zero or one QuoteItem that matches the filter.
     * @param {QuoteItemFindUniqueArgs} args - Arguments to find a QuoteItem
     * @example
     * // Get one QuoteItem
     * const quoteItem = await prisma.quoteItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuoteItemFindUniqueArgs>(args: SelectSubset<T, QuoteItemFindUniqueArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuoteItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuoteItemFindUniqueOrThrowArgs} args - Arguments to find a QuoteItem
     * @example
     * // Get one QuoteItem
     * const quoteItem = await prisma.quoteItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuoteItemFindUniqueOrThrowArgs>(args: SelectSubset<T, QuoteItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuoteItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteItemFindFirstArgs} args - Arguments to find a QuoteItem
     * @example
     * // Get one QuoteItem
     * const quoteItem = await prisma.quoteItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuoteItemFindFirstArgs>(args?: SelectSubset<T, QuoteItemFindFirstArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuoteItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteItemFindFirstOrThrowArgs} args - Arguments to find a QuoteItem
     * @example
     * // Get one QuoteItem
     * const quoteItem = await prisma.quoteItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuoteItemFindFirstOrThrowArgs>(args?: SelectSubset<T, QuoteItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuoteItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuoteItems
     * const quoteItems = await prisma.quoteItem.findMany()
     * 
     * // Get first 10 QuoteItems
     * const quoteItems = await prisma.quoteItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quoteItemWithIdOnly = await prisma.quoteItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuoteItemFindManyArgs>(args?: SelectSubset<T, QuoteItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuoteItem.
     * @param {QuoteItemCreateArgs} args - Arguments to create a QuoteItem.
     * @example
     * // Create one QuoteItem
     * const QuoteItem = await prisma.quoteItem.create({
     *   data: {
     *     // ... data to create a QuoteItem
     *   }
     * })
     * 
     */
    create<T extends QuoteItemCreateArgs>(args: SelectSubset<T, QuoteItemCreateArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuoteItems.
     * @param {QuoteItemCreateManyArgs} args - Arguments to create many QuoteItems.
     * @example
     * // Create many QuoteItems
     * const quoteItem = await prisma.quoteItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuoteItemCreateManyArgs>(args?: SelectSubset<T, QuoteItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuoteItems and returns the data saved in the database.
     * @param {QuoteItemCreateManyAndReturnArgs} args - Arguments to create many QuoteItems.
     * @example
     * // Create many QuoteItems
     * const quoteItem = await prisma.quoteItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuoteItems and only return the `id`
     * const quoteItemWithIdOnly = await prisma.quoteItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuoteItemCreateManyAndReturnArgs>(args?: SelectSubset<T, QuoteItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuoteItem.
     * @param {QuoteItemDeleteArgs} args - Arguments to delete one QuoteItem.
     * @example
     * // Delete one QuoteItem
     * const QuoteItem = await prisma.quoteItem.delete({
     *   where: {
     *     // ... filter to delete one QuoteItem
     *   }
     * })
     * 
     */
    delete<T extends QuoteItemDeleteArgs>(args: SelectSubset<T, QuoteItemDeleteArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuoteItem.
     * @param {QuoteItemUpdateArgs} args - Arguments to update one QuoteItem.
     * @example
     * // Update one QuoteItem
     * const quoteItem = await prisma.quoteItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuoteItemUpdateArgs>(args: SelectSubset<T, QuoteItemUpdateArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuoteItems.
     * @param {QuoteItemDeleteManyArgs} args - Arguments to filter QuoteItems to delete.
     * @example
     * // Delete a few QuoteItems
     * const { count } = await prisma.quoteItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuoteItemDeleteManyArgs>(args?: SelectSubset<T, QuoteItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuoteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuoteItems
     * const quoteItem = await prisma.quoteItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuoteItemUpdateManyArgs>(args: SelectSubset<T, QuoteItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuoteItems and returns the data updated in the database.
     * @param {QuoteItemUpdateManyAndReturnArgs} args - Arguments to update many QuoteItems.
     * @example
     * // Update many QuoteItems
     * const quoteItem = await prisma.quoteItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuoteItems and only return the `id`
     * const quoteItemWithIdOnly = await prisma.quoteItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuoteItemUpdateManyAndReturnArgs>(args: SelectSubset<T, QuoteItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuoteItem.
     * @param {QuoteItemUpsertArgs} args - Arguments to update or create a QuoteItem.
     * @example
     * // Update or create a QuoteItem
     * const quoteItem = await prisma.quoteItem.upsert({
     *   create: {
     *     // ... data to create a QuoteItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuoteItem we want to update
     *   }
     * })
     */
    upsert<T extends QuoteItemUpsertArgs>(args: SelectSubset<T, QuoteItemUpsertArgs<ExtArgs>>): Prisma__QuoteItemClient<$Result.GetResult<Prisma.$QuoteItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuoteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteItemCountArgs} args - Arguments to filter QuoteItems to count.
     * @example
     * // Count the number of QuoteItems
     * const count = await prisma.quoteItem.count({
     *   where: {
     *     // ... the filter for the QuoteItems we want to count
     *   }
     * })
    **/
    count<T extends QuoteItemCountArgs>(
      args?: Subset<T, QuoteItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuoteItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuoteItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuoteItemAggregateArgs>(args: Subset<T, QuoteItemAggregateArgs>): Prisma.PrismaPromise<GetQuoteItemAggregateType<T>>

    /**
     * Group by QuoteItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuoteItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuoteItemGroupByArgs['orderBy'] }
        : { orderBy?: QuoteItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuoteItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuoteItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuoteItem model
   */
  readonly fields: QuoteItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuoteItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuoteItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quote<T extends QuoteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuoteDefaultArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuoteItem model
   */
  interface QuoteItemFieldRefs {
    readonly id: FieldRef<"QuoteItem", 'String'>
    readonly quoteId: FieldRef<"QuoteItem", 'String'>
    readonly description: FieldRef<"QuoteItem", 'String'>
    readonly quantity: FieldRef<"QuoteItem", 'Float'>
    readonly unit: FieldRef<"QuoteItem", 'String'>
    readonly unitPrice: FieldRef<"QuoteItem", 'Float'>
    readonly totalPrice: FieldRef<"QuoteItem", 'Float'>
    readonly createdAt: FieldRef<"QuoteItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuoteItem findUnique
   */
  export type QuoteItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * Filter, which QuoteItem to fetch.
     */
    where: QuoteItemWhereUniqueInput
  }

  /**
   * QuoteItem findUniqueOrThrow
   */
  export type QuoteItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * Filter, which QuoteItem to fetch.
     */
    where: QuoteItemWhereUniqueInput
  }

  /**
   * QuoteItem findFirst
   */
  export type QuoteItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * Filter, which QuoteItem to fetch.
     */
    where?: QuoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuoteItems to fetch.
     */
    orderBy?: QuoteItemOrderByWithRelationInput | QuoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuoteItems.
     */
    cursor?: QuoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuoteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuoteItems.
     */
    distinct?: QuoteItemScalarFieldEnum | QuoteItemScalarFieldEnum[]
  }

  /**
   * QuoteItem findFirstOrThrow
   */
  export type QuoteItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * Filter, which QuoteItem to fetch.
     */
    where?: QuoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuoteItems to fetch.
     */
    orderBy?: QuoteItemOrderByWithRelationInput | QuoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuoteItems.
     */
    cursor?: QuoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuoteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuoteItems.
     */
    distinct?: QuoteItemScalarFieldEnum | QuoteItemScalarFieldEnum[]
  }

  /**
   * QuoteItem findMany
   */
  export type QuoteItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * Filter, which QuoteItems to fetch.
     */
    where?: QuoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuoteItems to fetch.
     */
    orderBy?: QuoteItemOrderByWithRelationInput | QuoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuoteItems.
     */
    cursor?: QuoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuoteItems.
     */
    skip?: number
    distinct?: QuoteItemScalarFieldEnum | QuoteItemScalarFieldEnum[]
  }

  /**
   * QuoteItem create
   */
  export type QuoteItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * The data needed to create a QuoteItem.
     */
    data: XOR<QuoteItemCreateInput, QuoteItemUncheckedCreateInput>
  }

  /**
   * QuoteItem createMany
   */
  export type QuoteItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuoteItems.
     */
    data: QuoteItemCreateManyInput | QuoteItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuoteItem createManyAndReturn
   */
  export type QuoteItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * The data used to create many QuoteItems.
     */
    data: QuoteItemCreateManyInput | QuoteItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuoteItem update
   */
  export type QuoteItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * The data needed to update a QuoteItem.
     */
    data: XOR<QuoteItemUpdateInput, QuoteItemUncheckedUpdateInput>
    /**
     * Choose, which QuoteItem to update.
     */
    where: QuoteItemWhereUniqueInput
  }

  /**
   * QuoteItem updateMany
   */
  export type QuoteItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuoteItems.
     */
    data: XOR<QuoteItemUpdateManyMutationInput, QuoteItemUncheckedUpdateManyInput>
    /**
     * Filter which QuoteItems to update
     */
    where?: QuoteItemWhereInput
    /**
     * Limit how many QuoteItems to update.
     */
    limit?: number
  }

  /**
   * QuoteItem updateManyAndReturn
   */
  export type QuoteItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * The data used to update QuoteItems.
     */
    data: XOR<QuoteItemUpdateManyMutationInput, QuoteItemUncheckedUpdateManyInput>
    /**
     * Filter which QuoteItems to update
     */
    where?: QuoteItemWhereInput
    /**
     * Limit how many QuoteItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuoteItem upsert
   */
  export type QuoteItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * The filter to search for the QuoteItem to update in case it exists.
     */
    where: QuoteItemWhereUniqueInput
    /**
     * In case the QuoteItem found by the `where` argument doesn't exist, create a new QuoteItem with this data.
     */
    create: XOR<QuoteItemCreateInput, QuoteItemUncheckedCreateInput>
    /**
     * In case the QuoteItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuoteItemUpdateInput, QuoteItemUncheckedUpdateInput>
  }

  /**
   * QuoteItem delete
   */
  export type QuoteItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
    /**
     * Filter which QuoteItem to delete.
     */
    where: QuoteItemWhereUniqueInput
  }

  /**
   * QuoteItem deleteMany
   */
  export type QuoteItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuoteItems to delete
     */
    where?: QuoteItemWhereInput
    /**
     * Limit how many QuoteItems to delete.
     */
    limit?: number
  }

  /**
   * QuoteItem without action
   */
  export type QuoteItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteItem
     */
    select?: QuoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuoteItem
     */
    omit?: QuoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteItemInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    subtotal: number | null
    gstHst: number | null
    pst: number | null
    total: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    subtotal: number | null
    gstHst: number | null
    pst: number | null
    total: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: string | null
    invoiceNumber: string | null
    customerId: string | null
    jobId: string | null
    subtotal: number | null
    gstHst: number | null
    pst: number | null
    total: number | null
    status: $Enums.InvoiceStatus | null
    issuedAt: Date | null
    dueAt: Date | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: string | null
    invoiceNumber: string | null
    customerId: string | null
    jobId: string | null
    subtotal: number | null
    gstHst: number | null
    pst: number | null
    total: number | null
    status: $Enums.InvoiceStatus | null
    issuedAt: Date | null
    dueAt: Date | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    invoiceNumber: number
    customerId: number
    jobId: number
    subtotal: number
    gstHst: number
    pst: number
    total: number
    status: number
    issuedAt: number
    dueAt: number
    paidAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    subtotal?: true
    gstHst?: true
    pst?: true
    total?: true
  }

  export type InvoiceSumAggregateInputType = {
    subtotal?: true
    gstHst?: true
    pst?: true
    total?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    invoiceNumber?: true
    customerId?: true
    jobId?: true
    subtotal?: true
    gstHst?: true
    pst?: true
    total?: true
    status?: true
    issuedAt?: true
    dueAt?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    invoiceNumber?: true
    customerId?: true
    jobId?: true
    subtotal?: true
    gstHst?: true
    pst?: true
    total?: true
    status?: true
    issuedAt?: true
    dueAt?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    invoiceNumber?: true
    customerId?: true
    jobId?: true
    subtotal?: true
    gstHst?: true
    pst?: true
    total?: true
    status?: true
    issuedAt?: true
    dueAt?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: string
    invoiceNumber: string
    customerId: string
    jobId: string | null
    subtotal: number
    gstHst: number
    pst: number
    total: number
    status: $Enums.InvoiceStatus
    issuedAt: Date | null
    dueAt: Date | null
    paidAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    customerId?: boolean
    jobId?: boolean
    subtotal?: boolean
    gstHst?: boolean
    pst?: boolean
    total?: boolean
    status?: boolean
    issuedAt?: boolean
    dueAt?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    job?: boolean | Invoice$jobArgs<ExtArgs>
    items?: boolean | Invoice$itemsArgs<ExtArgs>
    payments?: boolean | Invoice$paymentsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    customerId?: boolean
    jobId?: boolean
    subtotal?: boolean
    gstHst?: boolean
    pst?: boolean
    total?: boolean
    status?: boolean
    issuedAt?: boolean
    dueAt?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    job?: boolean | Invoice$jobArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    customerId?: boolean
    jobId?: boolean
    subtotal?: boolean
    gstHst?: boolean
    pst?: boolean
    total?: boolean
    status?: boolean
    issuedAt?: boolean
    dueAt?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    job?: boolean | Invoice$jobArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    invoiceNumber?: boolean
    customerId?: boolean
    jobId?: boolean
    subtotal?: boolean
    gstHst?: boolean
    pst?: boolean
    total?: boolean
    status?: boolean
    issuedAt?: boolean
    dueAt?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceNumber" | "customerId" | "jobId" | "subtotal" | "gstHst" | "pst" | "total" | "status" | "issuedAt" | "dueAt" | "paidAt" | "createdAt" | "updatedAt", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    job?: boolean | Invoice$jobArgs<ExtArgs>
    items?: boolean | Invoice$itemsArgs<ExtArgs>
    payments?: boolean | Invoice$paymentsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    job?: boolean | Invoice$jobArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    job?: boolean | Invoice$jobArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs> | null
      items: Prisma.$InvoiceItemPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      invoiceNumber: string
      customerId: string
      jobId: string | null
      subtotal: number
      gstHst: number
      pst: number
      total: number
      status: $Enums.InvoiceStatus
      issuedAt: Date | null
      dueAt: Date | null
      paidAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends Invoice$jobArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$jobArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    items<T extends Invoice$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Invoice$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'String'>
    readonly invoiceNumber: FieldRef<"Invoice", 'String'>
    readonly customerId: FieldRef<"Invoice", 'String'>
    readonly jobId: FieldRef<"Invoice", 'String'>
    readonly subtotal: FieldRef<"Invoice", 'Float'>
    readonly gstHst: FieldRef<"Invoice", 'Float'>
    readonly pst: FieldRef<"Invoice", 'Float'>
    readonly total: FieldRef<"Invoice", 'Float'>
    readonly status: FieldRef<"Invoice", 'InvoiceStatus'>
    readonly issuedAt: FieldRef<"Invoice", 'DateTime'>
    readonly dueAt: FieldRef<"Invoice", 'DateTime'>
    readonly paidAt: FieldRef<"Invoice", 'DateTime'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly updatedAt: FieldRef<"Invoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice.job
   */
  export type Invoice$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
  }

  /**
   * Invoice.items
   */
  export type Invoice$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    cursor?: InvoiceItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * Invoice.payments
   */
  export type Invoice$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model InvoiceItem
   */

  export type AggregateInvoiceItem = {
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  export type InvoiceItemAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type InvoiceItemSumAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type InvoiceItemMinAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
  }

  export type InvoiceItemMaxAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    description: string | null
    quantity: number | null
    unit: string | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
  }

  export type InvoiceItemCountAggregateOutputType = {
    id: number
    invoiceId: number
    description: number
    quantity: number
    unit: number
    unitPrice: number
    totalPrice: number
    createdAt: number
    _all: number
  }


  export type InvoiceItemAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type InvoiceItemSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type InvoiceItemMinAggregateInputType = {
    id?: true
    invoiceId?: true
    description?: true
    quantity?: true
    unit?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
  }

  export type InvoiceItemMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    description?: true
    quantity?: true
    unit?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
  }

  export type InvoiceItemCountAggregateInputType = {
    id?: true
    invoiceId?: true
    description?: true
    quantity?: true
    unit?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
    _all?: true
  }

  export type InvoiceItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItem to aggregate.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceItems
    **/
    _count?: true | InvoiceItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type GetInvoiceItemAggregateType<T extends InvoiceItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceItem[P]>
      : GetScalarType<T[P], AggregateInvoiceItem[P]>
  }




  export type InvoiceItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithAggregationInput | InvoiceItemOrderByWithAggregationInput[]
    by: InvoiceItemScalarFieldEnum[] | InvoiceItemScalarFieldEnum
    having?: InvoiceItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceItemCountAggregateInputType | true
    _avg?: InvoiceItemAvgAggregateInputType
    _sum?: InvoiceItemSumAggregateInputType
    _min?: InvoiceItemMinAggregateInputType
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type InvoiceItemGroupByOutputType = {
    id: string
    invoiceId: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt: Date
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  type GetInvoiceItemGroupByPayload<T extends InvoiceItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    description?: boolean
    quantity?: boolean
    unit?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
  }

  export type InvoiceItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "description" | "quantity" | "unit" | "unitPrice" | "totalPrice" | "createdAt", ExtArgs["result"]["invoiceItem"]>
  export type InvoiceItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }

  export type $InvoiceItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvoiceItem"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      invoiceId: string
      description: string
      quantity: number
      unit: string
      unitPrice: number
      totalPrice: number
      createdAt: Date
    }, ExtArgs["result"]["invoiceItem"]>
    composites: {}
  }

  type InvoiceItemGetPayload<S extends boolean | null | undefined | InvoiceItemDefaultArgs> = $Result.GetResult<Prisma.$InvoiceItemPayload, S>

  type InvoiceItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceItemCountAggregateInputType | true
    }

  export interface InvoiceItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvoiceItem'], meta: { name: 'InvoiceItem' } }
    /**
     * Find zero or one InvoiceItem that matches the filter.
     * @param {InvoiceItemFindUniqueArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceItemFindUniqueArgs>(args: SelectSubset<T, InvoiceItemFindUniqueArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InvoiceItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceItemFindUniqueOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceItemFindFirstArgs>(args?: SelectSubset<T, InvoiceItemFindFirstArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InvoiceItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany()
     * 
     * // Get first 10 InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceItemFindManyArgs>(args?: SelectSubset<T, InvoiceItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InvoiceItem.
     * @param {InvoiceItemCreateArgs} args - Arguments to create a InvoiceItem.
     * @example
     * // Create one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.create({
     *   data: {
     *     // ... data to create a InvoiceItem
     *   }
     * })
     * 
     */
    create<T extends InvoiceItemCreateArgs>(args: SelectSubset<T, InvoiceItemCreateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InvoiceItems.
     * @param {InvoiceItemCreateManyArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceItemCreateManyArgs>(args?: SelectSubset<T, InvoiceItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InvoiceItems and returns the data saved in the database.
     * @param {InvoiceItemCreateManyAndReturnArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InvoiceItem.
     * @param {InvoiceItemDeleteArgs} args - Arguments to delete one InvoiceItem.
     * @example
     * // Delete one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.delete({
     *   where: {
     *     // ... filter to delete one InvoiceItem
     *   }
     * })
     * 
     */
    delete<T extends InvoiceItemDeleteArgs>(args: SelectSubset<T, InvoiceItemDeleteArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InvoiceItem.
     * @param {InvoiceItemUpdateArgs} args - Arguments to update one InvoiceItem.
     * @example
     * // Update one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceItemUpdateArgs>(args: SelectSubset<T, InvoiceItemUpdateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InvoiceItems.
     * @param {InvoiceItemDeleteManyArgs} args - Arguments to filter InvoiceItems to delete.
     * @example
     * // Delete a few InvoiceItems
     * const { count } = await prisma.invoiceItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceItemDeleteManyArgs>(args?: SelectSubset<T, InvoiceItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceItemUpdateManyArgs>(args: SelectSubset<T, InvoiceItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems and returns the data updated in the database.
     * @param {InvoiceItemUpdateManyAndReturnArgs} args - Arguments to update many InvoiceItems.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceItemUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InvoiceItem.
     * @param {InvoiceItemUpsertArgs} args - Arguments to update or create a InvoiceItem.
     * @example
     * // Update or create a InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.upsert({
     *   create: {
     *     // ... data to create a InvoiceItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceItem we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceItemUpsertArgs>(args: SelectSubset<T, InvoiceItemUpsertArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemCountArgs} args - Arguments to filter InvoiceItems to count.
     * @example
     * // Count the number of InvoiceItems
     * const count = await prisma.invoiceItem.count({
     *   where: {
     *     // ... the filter for the InvoiceItems we want to count
     *   }
     * })
    **/
    count<T extends InvoiceItemCountArgs>(
      args?: Subset<T, InvoiceItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceItemAggregateArgs>(args: Subset<T, InvoiceItemAggregateArgs>): Prisma.PrismaPromise<GetInvoiceItemAggregateType<T>>

    /**
     * Group by InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceItemGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvoiceItem model
   */
  readonly fields: InvoiceItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InvoiceItem model
   */
  interface InvoiceItemFieldRefs {
    readonly id: FieldRef<"InvoiceItem", 'String'>
    readonly invoiceId: FieldRef<"InvoiceItem", 'String'>
    readonly description: FieldRef<"InvoiceItem", 'String'>
    readonly quantity: FieldRef<"InvoiceItem", 'Float'>
    readonly unit: FieldRef<"InvoiceItem", 'String'>
    readonly unitPrice: FieldRef<"InvoiceItem", 'Float'>
    readonly totalPrice: FieldRef<"InvoiceItem", 'Float'>
    readonly createdAt: FieldRef<"InvoiceItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InvoiceItem findUnique
   */
  export type InvoiceItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findUniqueOrThrow
   */
  export type InvoiceItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findFirst
   */
  export type InvoiceItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findFirstOrThrow
   */
  export type InvoiceItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findMany
   */
  export type InvoiceItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItems to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem create
   */
  export type InvoiceItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InvoiceItem.
     */
    data: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
  }

  /**
   * InvoiceItem createMany
   */
  export type InvoiceItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InvoiceItem createManyAndReturn
   */
  export type InvoiceItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem update
   */
  export type InvoiceItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InvoiceItem.
     */
    data: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
    /**
     * Choose, which InvoiceItem to update.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem updateMany
   */
  export type InvoiceItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
  }

  /**
   * InvoiceItem updateManyAndReturn
   */
  export type InvoiceItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem upsert
   */
  export type InvoiceItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InvoiceItem to update in case it exists.
     */
    where: InvoiceItemWhereUniqueInput
    /**
     * In case the InvoiceItem found by the `where` argument doesn't exist, create a new InvoiceItem with this data.
     */
    create: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
    /**
     * In case the InvoiceItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
  }

  /**
   * InvoiceItem delete
   */
  export type InvoiceItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter which InvoiceItem to delete.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem deleteMany
   */
  export type InvoiceItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItems to delete
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to delete.
     */
    limit?: number
  }

  /**
   * InvoiceItem without action
   */
  export type InvoiceItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    amount: number | null
    paymentMethod: $Enums.PaymentMethod | null
    reference: string | null
    paidAt: Date | null
    createdAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    amount: number | null
    paymentMethod: $Enums.PaymentMethod | null
    reference: string | null
    paidAt: Date | null
    createdAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    invoiceId: number
    amount: number
    paymentMethod: number
    reference: number
    paidAt: number
    createdAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    paymentMethod?: true
    reference?: true
    paidAt?: true
    createdAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    paymentMethod?: true
    reference?: true
    paidAt?: true
    createdAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    paymentMethod?: true
    reference?: true
    paidAt?: true
    createdAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    invoiceId: string
    amount: number
    paymentMethod: $Enums.PaymentMethod
    reference: string | null
    paidAt: Date
    createdAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    paidAt?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    paidAt?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    paidAt?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    paidAt?: boolean
    createdAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "amount" | "paymentMethod" | "reference" | "paidAt" | "createdAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      invoiceId: string
      amount: number
      paymentMethod: $Enums.PaymentMethod
      reference: string | null
      paidAt: Date
      createdAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly invoiceId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Float'>
    readonly paymentMethod: FieldRef<"Payment", 'PaymentMethod'>
    readonly reference: FieldRef<"Payment", 'String'>
    readonly paidAt: FieldRef<"Payment", 'DateTime'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Equipment
   */

  export type AggregateEquipment = {
    _count: EquipmentCountAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  export type EquipmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: $Enums.EquipmentType | null
    manufacturer: string | null
    model: string | null
    serialNumber: string | null
    purchaseDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type EquipmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: $Enums.EquipmentType | null
    manufacturer: string | null
    model: string | null
    serialNumber: string | null
    purchaseDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type EquipmentCountAggregateOutputType = {
    id: number
    name: number
    category: number
    manufacturer: number
    model: number
    serialNumber: number
    purchaseDate: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type EquipmentMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    manufacturer?: true
    model?: true
    serialNumber?: true
    purchaseDate?: true
    isActive?: true
    createdAt?: true
  }

  export type EquipmentMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    manufacturer?: true
    model?: true
    serialNumber?: true
    purchaseDate?: true
    isActive?: true
    createdAt?: true
  }

  export type EquipmentCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    manufacturer?: true
    model?: true
    serialNumber?: true
    purchaseDate?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type EquipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipment to aggregate.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipment
    **/
    _count?: true | EquipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipmentMaxAggregateInputType
  }

  export type GetEquipmentAggregateType<T extends EquipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipment[P]>
      : GetScalarType<T[P], AggregateEquipment[P]>
  }




  export type EquipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentWhereInput
    orderBy?: EquipmentOrderByWithAggregationInput | EquipmentOrderByWithAggregationInput[]
    by: EquipmentScalarFieldEnum[] | EquipmentScalarFieldEnum
    having?: EquipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipmentCountAggregateInputType | true
    _min?: EquipmentMinAggregateInputType
    _max?: EquipmentMaxAggregateInputType
  }

  export type EquipmentGroupByOutputType = {
    id: string
    name: string
    category: $Enums.EquipmentType
    manufacturer: string | null
    model: string | null
    serialNumber: string | null
    purchaseDate: Date | null
    isActive: boolean
    createdAt: Date
    _count: EquipmentCountAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  type GetEquipmentGroupByPayload<T extends EquipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
            : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
        }
      >
    >


  export type EquipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    manufacturer?: boolean
    model?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    serviceLogs?: boolean | Equipment$serviceLogsArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    manufacturer?: boolean
    model?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    manufacturer?: boolean
    model?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    manufacturer?: boolean
    model?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type EquipmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "manufacturer" | "model" | "serialNumber" | "purchaseDate" | "isActive" | "createdAt", ExtArgs["result"]["equipment"]>
  export type EquipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceLogs?: boolean | Equipment$serviceLogsArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EquipmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EquipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Equipment"
    objects: {
      serviceLogs: Prisma.$ServiceLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: $Enums.EquipmentType
      manufacturer: string | null
      model: string | null
      serialNumber: string | null
      purchaseDate: Date | null
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["equipment"]>
    composites: {}
  }

  type EquipmentGetPayload<S extends boolean | null | undefined | EquipmentDefaultArgs> = $Result.GetResult<Prisma.$EquipmentPayload, S>

  type EquipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquipmentCountAggregateInputType | true
    }

  export interface EquipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipment'], meta: { name: 'Equipment' } }
    /**
     * Find zero or one Equipment that matches the filter.
     * @param {EquipmentFindUniqueArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipmentFindUniqueArgs>(args: SelectSubset<T, EquipmentFindUniqueArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Equipment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipmentFindUniqueOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindFirstArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipmentFindFirstArgs>(args?: SelectSubset<T, EquipmentFindFirstArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindFirstOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipment
     * const equipment = await prisma.equipment.findMany()
     * 
     * // Get first 10 Equipment
     * const equipment = await prisma.equipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipmentWithIdOnly = await prisma.equipment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquipmentFindManyArgs>(args?: SelectSubset<T, EquipmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Equipment.
     * @param {EquipmentCreateArgs} args - Arguments to create a Equipment.
     * @example
     * // Create one Equipment
     * const Equipment = await prisma.equipment.create({
     *   data: {
     *     // ... data to create a Equipment
     *   }
     * })
     * 
     */
    create<T extends EquipmentCreateArgs>(args: SelectSubset<T, EquipmentCreateArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Equipment.
     * @param {EquipmentCreateManyArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipmentCreateManyArgs>(args?: SelectSubset<T, EquipmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipment and returns the data saved in the database.
     * @param {EquipmentCreateManyAndReturnArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipment and only return the `id`
     * const equipmentWithIdOnly = await prisma.equipment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipmentCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Equipment.
     * @param {EquipmentDeleteArgs} args - Arguments to delete one Equipment.
     * @example
     * // Delete one Equipment
     * const Equipment = await prisma.equipment.delete({
     *   where: {
     *     // ... filter to delete one Equipment
     *   }
     * })
     * 
     */
    delete<T extends EquipmentDeleteArgs>(args: SelectSubset<T, EquipmentDeleteArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Equipment.
     * @param {EquipmentUpdateArgs} args - Arguments to update one Equipment.
     * @example
     * // Update one Equipment
     * const equipment = await prisma.equipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipmentUpdateArgs>(args: SelectSubset<T, EquipmentUpdateArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Equipment.
     * @param {EquipmentDeleteManyArgs} args - Arguments to filter Equipment to delete.
     * @example
     * // Delete a few Equipment
     * const { count } = await prisma.equipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipmentDeleteManyArgs>(args?: SelectSubset<T, EquipmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipmentUpdateManyArgs>(args: SelectSubset<T, EquipmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment and returns the data updated in the database.
     * @param {EquipmentUpdateManyAndReturnArgs} args - Arguments to update many Equipment.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Equipment and only return the `id`
     * const equipmentWithIdOnly = await prisma.equipment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipmentUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Equipment.
     * @param {EquipmentUpsertArgs} args - Arguments to update or create a Equipment.
     * @example
     * // Update or create a Equipment
     * const equipment = await prisma.equipment.upsert({
     *   create: {
     *     // ... data to create a Equipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipment we want to update
     *   }
     * })
     */
    upsert<T extends EquipmentUpsertArgs>(args: SelectSubset<T, EquipmentUpsertArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCountArgs} args - Arguments to filter Equipment to count.
     * @example
     * // Count the number of Equipment
     * const count = await prisma.equipment.count({
     *   where: {
     *     // ... the filter for the Equipment we want to count
     *   }
     * })
    **/
    count<T extends EquipmentCountArgs>(
      args?: Subset<T, EquipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipmentAggregateArgs>(args: Subset<T, EquipmentAggregateArgs>): Prisma.PrismaPromise<GetEquipmentAggregateType<T>>

    /**
     * Group by Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipmentGroupByArgs['orderBy'] }
        : { orderBy?: EquipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipment model
   */
  readonly fields: EquipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    serviceLogs<T extends Equipment$serviceLogsArgs<ExtArgs> = {}>(args?: Subset<T, Equipment$serviceLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Equipment model
   */
  interface EquipmentFieldRefs {
    readonly id: FieldRef<"Equipment", 'String'>
    readonly name: FieldRef<"Equipment", 'String'>
    readonly category: FieldRef<"Equipment", 'EquipmentType'>
    readonly manufacturer: FieldRef<"Equipment", 'String'>
    readonly model: FieldRef<"Equipment", 'String'>
    readonly serialNumber: FieldRef<"Equipment", 'String'>
    readonly purchaseDate: FieldRef<"Equipment", 'DateTime'>
    readonly isActive: FieldRef<"Equipment", 'Boolean'>
    readonly createdAt: FieldRef<"Equipment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Equipment findUnique
   */
  export type EquipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment findUniqueOrThrow
   */
  export type EquipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment findFirst
   */
  export type EquipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * Equipment findFirstOrThrow
   */
  export type EquipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * Equipment findMany
   */
  export type EquipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * Equipment create
   */
  export type EquipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipment.
     */
    data: XOR<EquipmentCreateInput, EquipmentUncheckedCreateInput>
  }

  /**
   * Equipment createMany
   */
  export type EquipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipment.
     */
    data: EquipmentCreateManyInput | EquipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipment createManyAndReturn
   */
  export type EquipmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * The data used to create many Equipment.
     */
    data: EquipmentCreateManyInput | EquipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipment update
   */
  export type EquipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipment.
     */
    data: XOR<EquipmentUpdateInput, EquipmentUncheckedUpdateInput>
    /**
     * Choose, which Equipment to update.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment updateMany
   */
  export type EquipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipment.
     */
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyInput>
    /**
     * Filter which Equipment to update
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to update.
     */
    limit?: number
  }

  /**
   * Equipment updateManyAndReturn
   */
  export type EquipmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * The data used to update Equipment.
     */
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyInput>
    /**
     * Filter which Equipment to update
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to update.
     */
    limit?: number
  }

  /**
   * Equipment upsert
   */
  export type EquipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipment to update in case it exists.
     */
    where: EquipmentWhereUniqueInput
    /**
     * In case the Equipment found by the `where` argument doesn't exist, create a new Equipment with this data.
     */
    create: XOR<EquipmentCreateInput, EquipmentUncheckedCreateInput>
    /**
     * In case the Equipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipmentUpdateInput, EquipmentUncheckedUpdateInput>
  }

  /**
   * Equipment delete
   */
  export type EquipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter which Equipment to delete.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment deleteMany
   */
  export type EquipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipment to delete
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to delete.
     */
    limit?: number
  }

  /**
   * Equipment.serviceLogs
   */
  export type Equipment$serviceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    where?: ServiceLogWhereInput
    orderBy?: ServiceLogOrderByWithRelationInput | ServiceLogOrderByWithRelationInput[]
    cursor?: ServiceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceLogScalarFieldEnum | ServiceLogScalarFieldEnum[]
  }

  /**
   * Equipment without action
   */
  export type EquipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
  }


  /**
   * Model ServiceLog
   */

  export type AggregateServiceLog = {
    _count: ServiceLogCountAggregateOutputType | null
    _avg: ServiceLogAvgAggregateOutputType | null
    _sum: ServiceLogSumAggregateOutputType | null
    _min: ServiceLogMinAggregateOutputType | null
    _max: ServiceLogMaxAggregateOutputType | null
  }

  export type ServiceLogAvgAggregateOutputType = {
    cost: number | null
  }

  export type ServiceLogSumAggregateOutputType = {
    cost: number | null
  }

  export type ServiceLogMinAggregateOutputType = {
    id: string | null
    equipmentId: string | null
    serviceType: $Enums.ServiceType | null
    description: string | null
    cost: number | null
    servicedAt: Date | null
    nextDue: Date | null
    createdAt: Date | null
  }

  export type ServiceLogMaxAggregateOutputType = {
    id: string | null
    equipmentId: string | null
    serviceType: $Enums.ServiceType | null
    description: string | null
    cost: number | null
    servicedAt: Date | null
    nextDue: Date | null
    createdAt: Date | null
  }

  export type ServiceLogCountAggregateOutputType = {
    id: number
    equipmentId: number
    serviceType: number
    description: number
    cost: number
    servicedAt: number
    nextDue: number
    createdAt: number
    _all: number
  }


  export type ServiceLogAvgAggregateInputType = {
    cost?: true
  }

  export type ServiceLogSumAggregateInputType = {
    cost?: true
  }

  export type ServiceLogMinAggregateInputType = {
    id?: true
    equipmentId?: true
    serviceType?: true
    description?: true
    cost?: true
    servicedAt?: true
    nextDue?: true
    createdAt?: true
  }

  export type ServiceLogMaxAggregateInputType = {
    id?: true
    equipmentId?: true
    serviceType?: true
    description?: true
    cost?: true
    servicedAt?: true
    nextDue?: true
    createdAt?: true
  }

  export type ServiceLogCountAggregateInputType = {
    id?: true
    equipmentId?: true
    serviceType?: true
    description?: true
    cost?: true
    servicedAt?: true
    nextDue?: true
    createdAt?: true
    _all?: true
  }

  export type ServiceLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceLog to aggregate.
     */
    where?: ServiceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceLogs to fetch.
     */
    orderBy?: ServiceLogOrderByWithRelationInput | ServiceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceLogs
    **/
    _count?: true | ServiceLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceLogMaxAggregateInputType
  }

  export type GetServiceLogAggregateType<T extends ServiceLogAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceLog[P]>
      : GetScalarType<T[P], AggregateServiceLog[P]>
  }




  export type ServiceLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceLogWhereInput
    orderBy?: ServiceLogOrderByWithAggregationInput | ServiceLogOrderByWithAggregationInput[]
    by: ServiceLogScalarFieldEnum[] | ServiceLogScalarFieldEnum
    having?: ServiceLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceLogCountAggregateInputType | true
    _avg?: ServiceLogAvgAggregateInputType
    _sum?: ServiceLogSumAggregateInputType
    _min?: ServiceLogMinAggregateInputType
    _max?: ServiceLogMaxAggregateInputType
  }

  export type ServiceLogGroupByOutputType = {
    id: string
    equipmentId: string
    serviceType: $Enums.ServiceType
    description: string
    cost: number | null
    servicedAt: Date
    nextDue: Date | null
    createdAt: Date
    _count: ServiceLogCountAggregateOutputType | null
    _avg: ServiceLogAvgAggregateOutputType | null
    _sum: ServiceLogSumAggregateOutputType | null
    _min: ServiceLogMinAggregateOutputType | null
    _max: ServiceLogMaxAggregateOutputType | null
  }

  type GetServiceLogGroupByPayload<T extends ServiceLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceLogGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceLogGroupByOutputType[P]>
        }
      >
    >


  export type ServiceLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    equipmentId?: boolean
    serviceType?: boolean
    description?: boolean
    cost?: boolean
    servicedAt?: boolean
    nextDue?: boolean
    createdAt?: boolean
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceLog"]>

  export type ServiceLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    equipmentId?: boolean
    serviceType?: boolean
    description?: boolean
    cost?: boolean
    servicedAt?: boolean
    nextDue?: boolean
    createdAt?: boolean
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceLog"]>

  export type ServiceLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    equipmentId?: boolean
    serviceType?: boolean
    description?: boolean
    cost?: boolean
    servicedAt?: boolean
    nextDue?: boolean
    createdAt?: boolean
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceLog"]>

  export type ServiceLogSelectScalar = {
    id?: boolean
    equipmentId?: boolean
    serviceType?: boolean
    description?: boolean
    cost?: boolean
    servicedAt?: boolean
    nextDue?: boolean
    createdAt?: boolean
  }

  export type ServiceLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "equipmentId" | "serviceType" | "description" | "cost" | "servicedAt" | "nextDue" | "createdAt", ExtArgs["result"]["serviceLog"]>
  export type ServiceLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
  }
  export type ServiceLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
  }
  export type ServiceLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
  }

  export type $ServiceLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceLog"
    objects: {
      equipment: Prisma.$EquipmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      equipmentId: string
      serviceType: $Enums.ServiceType
      description: string
      cost: number | null
      servicedAt: Date
      nextDue: Date | null
      createdAt: Date
    }, ExtArgs["result"]["serviceLog"]>
    composites: {}
  }

  type ServiceLogGetPayload<S extends boolean | null | undefined | ServiceLogDefaultArgs> = $Result.GetResult<Prisma.$ServiceLogPayload, S>

  type ServiceLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceLogCountAggregateInputType | true
    }

  export interface ServiceLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceLog'], meta: { name: 'ServiceLog' } }
    /**
     * Find zero or one ServiceLog that matches the filter.
     * @param {ServiceLogFindUniqueArgs} args - Arguments to find a ServiceLog
     * @example
     * // Get one ServiceLog
     * const serviceLog = await prisma.serviceLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceLogFindUniqueArgs>(args: SelectSubset<T, ServiceLogFindUniqueArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceLogFindUniqueOrThrowArgs} args - Arguments to find a ServiceLog
     * @example
     * // Get one ServiceLog
     * const serviceLog = await prisma.serviceLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceLogFindFirstArgs} args - Arguments to find a ServiceLog
     * @example
     * // Get one ServiceLog
     * const serviceLog = await prisma.serviceLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceLogFindFirstArgs>(args?: SelectSubset<T, ServiceLogFindFirstArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceLogFindFirstOrThrowArgs} args - Arguments to find a ServiceLog
     * @example
     * // Get one ServiceLog
     * const serviceLog = await prisma.serviceLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceLogs
     * const serviceLogs = await prisma.serviceLog.findMany()
     * 
     * // Get first 10 ServiceLogs
     * const serviceLogs = await prisma.serviceLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceLogWithIdOnly = await prisma.serviceLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceLogFindManyArgs>(args?: SelectSubset<T, ServiceLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceLog.
     * @param {ServiceLogCreateArgs} args - Arguments to create a ServiceLog.
     * @example
     * // Create one ServiceLog
     * const ServiceLog = await prisma.serviceLog.create({
     *   data: {
     *     // ... data to create a ServiceLog
     *   }
     * })
     * 
     */
    create<T extends ServiceLogCreateArgs>(args: SelectSubset<T, ServiceLogCreateArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceLogs.
     * @param {ServiceLogCreateManyArgs} args - Arguments to create many ServiceLogs.
     * @example
     * // Create many ServiceLogs
     * const serviceLog = await prisma.serviceLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceLogCreateManyArgs>(args?: SelectSubset<T, ServiceLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceLogs and returns the data saved in the database.
     * @param {ServiceLogCreateManyAndReturnArgs} args - Arguments to create many ServiceLogs.
     * @example
     * // Create many ServiceLogs
     * const serviceLog = await prisma.serviceLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceLogs and only return the `id`
     * const serviceLogWithIdOnly = await prisma.serviceLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceLog.
     * @param {ServiceLogDeleteArgs} args - Arguments to delete one ServiceLog.
     * @example
     * // Delete one ServiceLog
     * const ServiceLog = await prisma.serviceLog.delete({
     *   where: {
     *     // ... filter to delete one ServiceLog
     *   }
     * })
     * 
     */
    delete<T extends ServiceLogDeleteArgs>(args: SelectSubset<T, ServiceLogDeleteArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceLog.
     * @param {ServiceLogUpdateArgs} args - Arguments to update one ServiceLog.
     * @example
     * // Update one ServiceLog
     * const serviceLog = await prisma.serviceLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceLogUpdateArgs>(args: SelectSubset<T, ServiceLogUpdateArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceLogs.
     * @param {ServiceLogDeleteManyArgs} args - Arguments to filter ServiceLogs to delete.
     * @example
     * // Delete a few ServiceLogs
     * const { count } = await prisma.serviceLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceLogDeleteManyArgs>(args?: SelectSubset<T, ServiceLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceLogs
     * const serviceLog = await prisma.serviceLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceLogUpdateManyArgs>(args: SelectSubset<T, ServiceLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceLogs and returns the data updated in the database.
     * @param {ServiceLogUpdateManyAndReturnArgs} args - Arguments to update many ServiceLogs.
     * @example
     * // Update many ServiceLogs
     * const serviceLog = await prisma.serviceLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceLogs and only return the `id`
     * const serviceLogWithIdOnly = await prisma.serviceLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceLog.
     * @param {ServiceLogUpsertArgs} args - Arguments to update or create a ServiceLog.
     * @example
     * // Update or create a ServiceLog
     * const serviceLog = await prisma.serviceLog.upsert({
     *   create: {
     *     // ... data to create a ServiceLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceLog we want to update
     *   }
     * })
     */
    upsert<T extends ServiceLogUpsertArgs>(args: SelectSubset<T, ServiceLogUpsertArgs<ExtArgs>>): Prisma__ServiceLogClient<$Result.GetResult<Prisma.$ServiceLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceLogCountArgs} args - Arguments to filter ServiceLogs to count.
     * @example
     * // Count the number of ServiceLogs
     * const count = await prisma.serviceLog.count({
     *   where: {
     *     // ... the filter for the ServiceLogs we want to count
     *   }
     * })
    **/
    count<T extends ServiceLogCountArgs>(
      args?: Subset<T, ServiceLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceLogAggregateArgs>(args: Subset<T, ServiceLogAggregateArgs>): Prisma.PrismaPromise<GetServiceLogAggregateType<T>>

    /**
     * Group by ServiceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceLogGroupByArgs['orderBy'] }
        : { orderBy?: ServiceLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceLog model
   */
  readonly fields: ServiceLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipment<T extends EquipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentDefaultArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceLog model
   */
  interface ServiceLogFieldRefs {
    readonly id: FieldRef<"ServiceLog", 'String'>
    readonly equipmentId: FieldRef<"ServiceLog", 'String'>
    readonly serviceType: FieldRef<"ServiceLog", 'ServiceType'>
    readonly description: FieldRef<"ServiceLog", 'String'>
    readonly cost: FieldRef<"ServiceLog", 'Float'>
    readonly servicedAt: FieldRef<"ServiceLog", 'DateTime'>
    readonly nextDue: FieldRef<"ServiceLog", 'DateTime'>
    readonly createdAt: FieldRef<"ServiceLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceLog findUnique
   */
  export type ServiceLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * Filter, which ServiceLog to fetch.
     */
    where: ServiceLogWhereUniqueInput
  }

  /**
   * ServiceLog findUniqueOrThrow
   */
  export type ServiceLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * Filter, which ServiceLog to fetch.
     */
    where: ServiceLogWhereUniqueInput
  }

  /**
   * ServiceLog findFirst
   */
  export type ServiceLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * Filter, which ServiceLog to fetch.
     */
    where?: ServiceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceLogs to fetch.
     */
    orderBy?: ServiceLogOrderByWithRelationInput | ServiceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceLogs.
     */
    cursor?: ServiceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceLogs.
     */
    distinct?: ServiceLogScalarFieldEnum | ServiceLogScalarFieldEnum[]
  }

  /**
   * ServiceLog findFirstOrThrow
   */
  export type ServiceLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * Filter, which ServiceLog to fetch.
     */
    where?: ServiceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceLogs to fetch.
     */
    orderBy?: ServiceLogOrderByWithRelationInput | ServiceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceLogs.
     */
    cursor?: ServiceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceLogs.
     */
    distinct?: ServiceLogScalarFieldEnum | ServiceLogScalarFieldEnum[]
  }

  /**
   * ServiceLog findMany
   */
  export type ServiceLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * Filter, which ServiceLogs to fetch.
     */
    where?: ServiceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceLogs to fetch.
     */
    orderBy?: ServiceLogOrderByWithRelationInput | ServiceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceLogs.
     */
    cursor?: ServiceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceLogs.
     */
    skip?: number
    distinct?: ServiceLogScalarFieldEnum | ServiceLogScalarFieldEnum[]
  }

  /**
   * ServiceLog create
   */
  export type ServiceLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceLog.
     */
    data: XOR<ServiceLogCreateInput, ServiceLogUncheckedCreateInput>
  }

  /**
   * ServiceLog createMany
   */
  export type ServiceLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceLogs.
     */
    data: ServiceLogCreateManyInput | ServiceLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceLog createManyAndReturn
   */
  export type ServiceLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceLogs.
     */
    data: ServiceLogCreateManyInput | ServiceLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceLog update
   */
  export type ServiceLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceLog.
     */
    data: XOR<ServiceLogUpdateInput, ServiceLogUncheckedUpdateInput>
    /**
     * Choose, which ServiceLog to update.
     */
    where: ServiceLogWhereUniqueInput
  }

  /**
   * ServiceLog updateMany
   */
  export type ServiceLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceLogs.
     */
    data: XOR<ServiceLogUpdateManyMutationInput, ServiceLogUncheckedUpdateManyInput>
    /**
     * Filter which ServiceLogs to update
     */
    where?: ServiceLogWhereInput
    /**
     * Limit how many ServiceLogs to update.
     */
    limit?: number
  }

  /**
   * ServiceLog updateManyAndReturn
   */
  export type ServiceLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * The data used to update ServiceLogs.
     */
    data: XOR<ServiceLogUpdateManyMutationInput, ServiceLogUncheckedUpdateManyInput>
    /**
     * Filter which ServiceLogs to update
     */
    where?: ServiceLogWhereInput
    /**
     * Limit how many ServiceLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceLog upsert
   */
  export type ServiceLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceLog to update in case it exists.
     */
    where: ServiceLogWhereUniqueInput
    /**
     * In case the ServiceLog found by the `where` argument doesn't exist, create a new ServiceLog with this data.
     */
    create: XOR<ServiceLogCreateInput, ServiceLogUncheckedCreateInput>
    /**
     * In case the ServiceLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceLogUpdateInput, ServiceLogUncheckedUpdateInput>
  }

  /**
   * ServiceLog delete
   */
  export type ServiceLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
    /**
     * Filter which ServiceLog to delete.
     */
    where: ServiceLogWhereUniqueInput
  }

  /**
   * ServiceLog deleteMany
   */
  export type ServiceLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceLogs to delete
     */
    where?: ServiceLogWhereInput
    /**
     * Limit how many ServiceLogs to delete.
     */
    limit?: number
  }

  /**
   * ServiceLog without action
   */
  export type ServiceLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceLog
     */
    select?: ServiceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceLog
     */
    omit?: ServiceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceLogInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrder
   */

  export type AggregateWorkOrder = {
    _count: WorkOrderCountAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  export type WorkOrderMinAggregateOutputType = {
    id: string | null
    woNumber: string | null
    jobId: string | null
    customerId: string | null
    title: string | null
    description: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    priority: $Enums.Priority | null
    status: $Enums.WorkOrderStatus | null
    scheduledAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkOrderMaxAggregateOutputType = {
    id: string | null
    woNumber: string | null
    jobId: string | null
    customerId: string | null
    title: string | null
    description: string | null
    address: string | null
    city: string | null
    province: string | null
    postal: string | null
    priority: $Enums.Priority | null
    status: $Enums.WorkOrderStatus | null
    scheduledAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkOrderCountAggregateOutputType = {
    id: number
    woNumber: number
    jobId: number
    customerId: number
    title: number
    description: number
    address: number
    city: number
    province: number
    postal: number
    priority: number
    status: number
    scheduledAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkOrderMinAggregateInputType = {
    id?: true
    woNumber?: true
    jobId?: true
    customerId?: true
    title?: true
    description?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    priority?: true
    status?: true
    scheduledAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkOrderMaxAggregateInputType = {
    id?: true
    woNumber?: true
    jobId?: true
    customerId?: true
    title?: true
    description?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    priority?: true
    status?: true
    scheduledAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkOrderCountAggregateInputType = {
    id?: true
    woNumber?: true
    jobId?: true
    customerId?: true
    title?: true
    description?: true
    address?: true
    city?: true
    province?: true
    postal?: true
    priority?: true
    status?: true
    scheduledAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrder to aggregate.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrders
    **/
    _count?: true | WorkOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderMaxAggregateInputType
  }

  export type GetWorkOrderAggregateType<T extends WorkOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrder[P]>
      : GetScalarType<T[P], AggregateWorkOrder[P]>
  }




  export type WorkOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithAggregationInput | WorkOrderOrderByWithAggregationInput[]
    by: WorkOrderScalarFieldEnum[] | WorkOrderScalarFieldEnum
    having?: WorkOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderCountAggregateInputType | true
    _min?: WorkOrderMinAggregateInputType
    _max?: WorkOrderMaxAggregateInputType
  }

  export type WorkOrderGroupByOutputType = {
    id: string
    woNumber: string
    jobId: string | null
    customerId: string | null
    title: string
    description: string | null
    address: string
    city: string
    province: string
    postal: string | null
    priority: $Enums.Priority
    status: $Enums.WorkOrderStatus
    scheduledAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: WorkOrderCountAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  type GetWorkOrderGroupByPayload<T extends WorkOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    woNumber?: boolean
    jobId?: boolean
    customerId?: boolean
    title?: boolean
    description?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    priority?: boolean
    status?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | WorkOrder$jobArgs<ExtArgs>
    truckTrips?: boolean | WorkOrder$truckTripsArgs<ExtArgs>
    _count?: boolean | WorkOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    woNumber?: boolean
    jobId?: boolean
    customerId?: boolean
    title?: boolean
    description?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    priority?: boolean
    status?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | WorkOrder$jobArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    woNumber?: boolean
    jobId?: boolean
    customerId?: boolean
    title?: boolean
    description?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    priority?: boolean
    status?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | WorkOrder$jobArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectScalar = {
    id?: boolean
    woNumber?: boolean
    jobId?: boolean
    customerId?: boolean
    title?: boolean
    description?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    postal?: boolean
    priority?: boolean
    status?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "woNumber" | "jobId" | "customerId" | "title" | "description" | "address" | "city" | "province" | "postal" | "priority" | "status" | "scheduledAt" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["workOrder"]>
  export type WorkOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | WorkOrder$jobArgs<ExtArgs>
    truckTrips?: boolean | WorkOrder$truckTripsArgs<ExtArgs>
    _count?: boolean | WorkOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | WorkOrder$jobArgs<ExtArgs>
  }
  export type WorkOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | WorkOrder$jobArgs<ExtArgs>
  }

  export type $WorkOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrder"
    objects: {
      job: Prisma.$JobPayload<ExtArgs> | null
      truckTrips: Prisma.$TruckTripPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      woNumber: string
      jobId: string | null
      customerId: string | null
      title: string
      description: string | null
      address: string
      city: string
      province: string
      postal: string | null
      priority: $Enums.Priority
      status: $Enums.WorkOrderStatus
      scheduledAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workOrder"]>
    composites: {}
  }

  type WorkOrderGetPayload<S extends boolean | null | undefined | WorkOrderDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderPayload, S>

  type WorkOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkOrderCountAggregateInputType | true
    }

  export interface WorkOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrder'], meta: { name: 'WorkOrder' } }
    /**
     * Find zero or one WorkOrder that matches the filter.
     * @param {WorkOrderFindUniqueArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderFindUniqueArgs>(args: SelectSubset<T, WorkOrderFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkOrderFindUniqueOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderFindFirstArgs>(args?: SelectSubset<T, WorkOrderFindFirstArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrders
     * const workOrders = await prisma.workOrder.findMany()
     * 
     * // Get first 10 WorkOrders
     * const workOrders = await prisma.workOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderFindManyArgs>(args?: SelectSubset<T, WorkOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkOrder.
     * @param {WorkOrderCreateArgs} args - Arguments to create a WorkOrder.
     * @example
     * // Create one WorkOrder
     * const WorkOrder = await prisma.workOrder.create({
     *   data: {
     *     // ... data to create a WorkOrder
     *   }
     * })
     * 
     */
    create<T extends WorkOrderCreateArgs>(args: SelectSubset<T, WorkOrderCreateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkOrders.
     * @param {WorkOrderCreateManyArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderCreateManyArgs>(args?: SelectSubset<T, WorkOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrders and returns the data saved in the database.
     * @param {WorkOrderCreateManyAndReturnArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrders and only return the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkOrder.
     * @param {WorkOrderDeleteArgs} args - Arguments to delete one WorkOrder.
     * @example
     * // Delete one WorkOrder
     * const WorkOrder = await prisma.workOrder.delete({
     *   where: {
     *     // ... filter to delete one WorkOrder
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderDeleteArgs>(args: SelectSubset<T, WorkOrderDeleteArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkOrder.
     * @param {WorkOrderUpdateArgs} args - Arguments to update one WorkOrder.
     * @example
     * // Update one WorkOrder
     * const workOrder = await prisma.workOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderUpdateArgs>(args: SelectSubset<T, WorkOrderUpdateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkOrders.
     * @param {WorkOrderDeleteManyArgs} args - Arguments to filter WorkOrders to delete.
     * @example
     * // Delete a few WorkOrders
     * const { count } = await prisma.workOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderDeleteManyArgs>(args?: SelectSubset<T, WorkOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrders
     * const workOrder = await prisma.workOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderUpdateManyArgs>(args: SelectSubset<T, WorkOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrders and returns the data updated in the database.
     * @param {WorkOrderUpdateManyAndReturnArgs} args - Arguments to update many WorkOrders.
     * @example
     * // Update many WorkOrders
     * const workOrder = await prisma.workOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkOrders and only return the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkOrder.
     * @param {WorkOrderUpsertArgs} args - Arguments to update or create a WorkOrder.
     * @example
     * // Update or create a WorkOrder
     * const workOrder = await prisma.workOrder.upsert({
     *   create: {
     *     // ... data to create a WorkOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrder we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderUpsertArgs>(args: SelectSubset<T, WorkOrderUpsertArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderCountArgs} args - Arguments to filter WorkOrders to count.
     * @example
     * // Count the number of WorkOrders
     * const count = await prisma.workOrder.count({
     *   where: {
     *     // ... the filter for the WorkOrders we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderCountArgs>(
      args?: Subset<T, WorkOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderAggregateArgs>(args: Subset<T, WorkOrderAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderAggregateType<T>>

    /**
     * Group by WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrder model
   */
  readonly fields: WorkOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends WorkOrder$jobArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$jobArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    truckTrips<T extends WorkOrder$truckTripsArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$truckTripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrder model
   */
  interface WorkOrderFieldRefs {
    readonly id: FieldRef<"WorkOrder", 'String'>
    readonly woNumber: FieldRef<"WorkOrder", 'String'>
    readonly jobId: FieldRef<"WorkOrder", 'String'>
    readonly customerId: FieldRef<"WorkOrder", 'String'>
    readonly title: FieldRef<"WorkOrder", 'String'>
    readonly description: FieldRef<"WorkOrder", 'String'>
    readonly address: FieldRef<"WorkOrder", 'String'>
    readonly city: FieldRef<"WorkOrder", 'String'>
    readonly province: FieldRef<"WorkOrder", 'String'>
    readonly postal: FieldRef<"WorkOrder", 'String'>
    readonly priority: FieldRef<"WorkOrder", 'Priority'>
    readonly status: FieldRef<"WorkOrder", 'WorkOrderStatus'>
    readonly scheduledAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly completedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly createdAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrder findUnique
   */
  export type WorkOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findUniqueOrThrow
   */
  export type WorkOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findFirst
   */
  export type WorkOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findFirstOrThrow
   */
  export type WorkOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findMany
   */
  export type WorkOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrders to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder create
   */
  export type WorkOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrder.
     */
    data: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
  }

  /**
   * WorkOrder createMany
   */
  export type WorkOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrder createManyAndReturn
   */
  export type WorkOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrder update
   */
  export type WorkOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrder.
     */
    data: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
    /**
     * Choose, which WorkOrder to update.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder updateMany
   */
  export type WorkOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrders.
     */
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrders to update
     */
    where?: WorkOrderWhereInput
    /**
     * Limit how many WorkOrders to update.
     */
    limit?: number
  }

  /**
   * WorkOrder updateManyAndReturn
   */
  export type WorkOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * The data used to update WorkOrders.
     */
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrders to update
     */
    where?: WorkOrderWhereInput
    /**
     * Limit how many WorkOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrder upsert
   */
  export type WorkOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrder to update in case it exists.
     */
    where: WorkOrderWhereUniqueInput
    /**
     * In case the WorkOrder found by the `where` argument doesn't exist, create a new WorkOrder with this data.
     */
    create: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
    /**
     * In case the WorkOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
  }

  /**
   * WorkOrder delete
   */
  export type WorkOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter which WorkOrder to delete.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder deleteMany
   */
  export type WorkOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrders to delete
     */
    where?: WorkOrderWhereInput
    /**
     * Limit how many WorkOrders to delete.
     */
    limit?: number
  }

  /**
   * WorkOrder.job
   */
  export type WorkOrder$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
  }

  /**
   * WorkOrder.truckTrips
   */
  export type WorkOrder$truckTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    where?: TruckTripWhereInput
    orderBy?: TruckTripOrderByWithRelationInput | TruckTripOrderByWithRelationInput[]
    cursor?: TruckTripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckTripScalarFieldEnum | TruckTripScalarFieldEnum[]
  }

  /**
   * WorkOrder without action
   */
  export type WorkOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkOrder
     */
    omit?: WorkOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
  }


  /**
   * Model TruckTrip
   */

  export type AggregateTruckTrip = {
    _count: TruckTripCountAggregateOutputType | null
    _avg: TruckTripAvgAggregateOutputType | null
    _sum: TruckTripSumAggregateOutputType | null
    _min: TruckTripMinAggregateOutputType | null
    _max: TruckTripMaxAggregateOutputType | null
  }

  export type TruckTripAvgAggregateOutputType = {
    odometerStart: number | null
    odometerEnd: number | null
  }

  export type TruckTripSumAggregateOutputType = {
    odometerStart: number | null
    odometerEnd: number | null
  }

  export type TruckTripMinAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    driverId: string | null
    truckId: string | null
    startTime: Date | null
    endTime: Date | null
    odometerStart: number | null
    odometerEnd: number | null
    signature: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type TruckTripMaxAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    driverId: string | null
    truckId: string | null
    startTime: Date | null
    endTime: Date | null
    odometerStart: number | null
    odometerEnd: number | null
    signature: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type TruckTripCountAggregateOutputType = {
    id: number
    workOrderId: number
    driverId: number
    truckId: number
    startTime: number
    endTime: number
    odometerStart: number
    odometerEnd: number
    gpsStart: number
    gpsEnd: number
    photos: number
    signature: number
    notes: number
    createdAt: number
    _all: number
  }


  export type TruckTripAvgAggregateInputType = {
    odometerStart?: true
    odometerEnd?: true
  }

  export type TruckTripSumAggregateInputType = {
    odometerStart?: true
    odometerEnd?: true
  }

  export type TruckTripMinAggregateInputType = {
    id?: true
    workOrderId?: true
    driverId?: true
    truckId?: true
    startTime?: true
    endTime?: true
    odometerStart?: true
    odometerEnd?: true
    signature?: true
    notes?: true
    createdAt?: true
  }

  export type TruckTripMaxAggregateInputType = {
    id?: true
    workOrderId?: true
    driverId?: true
    truckId?: true
    startTime?: true
    endTime?: true
    odometerStart?: true
    odometerEnd?: true
    signature?: true
    notes?: true
    createdAt?: true
  }

  export type TruckTripCountAggregateInputType = {
    id?: true
    workOrderId?: true
    driverId?: true
    truckId?: true
    startTime?: true
    endTime?: true
    odometerStart?: true
    odometerEnd?: true
    gpsStart?: true
    gpsEnd?: true
    photos?: true
    signature?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type TruckTripAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckTrip to aggregate.
     */
    where?: TruckTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckTrips to fetch.
     */
    orderBy?: TruckTripOrderByWithRelationInput | TruckTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TruckTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TruckTrips
    **/
    _count?: true | TruckTripCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TruckTripAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TruckTripSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TruckTripMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TruckTripMaxAggregateInputType
  }

  export type GetTruckTripAggregateType<T extends TruckTripAggregateArgs> = {
        [P in keyof T & keyof AggregateTruckTrip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTruckTrip[P]>
      : GetScalarType<T[P], AggregateTruckTrip[P]>
  }




  export type TruckTripGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckTripWhereInput
    orderBy?: TruckTripOrderByWithAggregationInput | TruckTripOrderByWithAggregationInput[]
    by: TruckTripScalarFieldEnum[] | TruckTripScalarFieldEnum
    having?: TruckTripScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TruckTripCountAggregateInputType | true
    _avg?: TruckTripAvgAggregateInputType
    _sum?: TruckTripSumAggregateInputType
    _min?: TruckTripMinAggregateInputType
    _max?: TruckTripMaxAggregateInputType
  }

  export type TruckTripGroupByOutputType = {
    id: string
    workOrderId: string
    driverId: string
    truckId: string | null
    startTime: Date | null
    endTime: Date | null
    odometerStart: number | null
    odometerEnd: number | null
    gpsStart: JsonValue | null
    gpsEnd: JsonValue | null
    photos: string[]
    signature: string | null
    notes: string | null
    createdAt: Date
    _count: TruckTripCountAggregateOutputType | null
    _avg: TruckTripAvgAggregateOutputType | null
    _sum: TruckTripSumAggregateOutputType | null
    _min: TruckTripMinAggregateOutputType | null
    _max: TruckTripMaxAggregateOutputType | null
  }

  type GetTruckTripGroupByPayload<T extends TruckTripGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TruckTripGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TruckTripGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TruckTripGroupByOutputType[P]>
            : GetScalarType<T[P], TruckTripGroupByOutputType[P]>
        }
      >
    >


  export type TruckTripSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    driverId?: boolean
    truckId?: boolean
    startTime?: boolean
    endTime?: boolean
    odometerStart?: boolean
    odometerEnd?: boolean
    gpsStart?: boolean
    gpsEnd?: boolean
    photos?: boolean
    signature?: boolean
    notes?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["truckTrip"]>

  export type TruckTripSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    driverId?: boolean
    truckId?: boolean
    startTime?: boolean
    endTime?: boolean
    odometerStart?: boolean
    odometerEnd?: boolean
    gpsStart?: boolean
    gpsEnd?: boolean
    photos?: boolean
    signature?: boolean
    notes?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["truckTrip"]>

  export type TruckTripSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    driverId?: boolean
    truckId?: boolean
    startTime?: boolean
    endTime?: boolean
    odometerStart?: boolean
    odometerEnd?: boolean
    gpsStart?: boolean
    gpsEnd?: boolean
    photos?: boolean
    signature?: boolean
    notes?: boolean
    createdAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["truckTrip"]>

  export type TruckTripSelectScalar = {
    id?: boolean
    workOrderId?: boolean
    driverId?: boolean
    truckId?: boolean
    startTime?: boolean
    endTime?: boolean
    odometerStart?: boolean
    odometerEnd?: boolean
    gpsStart?: boolean
    gpsEnd?: boolean
    photos?: boolean
    signature?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type TruckTripOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workOrderId" | "driverId" | "truckId" | "startTime" | "endTime" | "odometerStart" | "odometerEnd" | "gpsStart" | "gpsEnd" | "photos" | "signature" | "notes" | "createdAt", ExtArgs["result"]["truckTrip"]>
  export type TruckTripInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TruckTripIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TruckTripIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TruckTripPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TruckTrip"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
      driver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workOrderId: string
      driverId: string
      truckId: string | null
      startTime: Date | null
      endTime: Date | null
      odometerStart: number | null
      odometerEnd: number | null
      gpsStart: Prisma.JsonValue | null
      gpsEnd: Prisma.JsonValue | null
      photos: string[]
      signature: string | null
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["truckTrip"]>
    composites: {}
  }

  type TruckTripGetPayload<S extends boolean | null | undefined | TruckTripDefaultArgs> = $Result.GetResult<Prisma.$TruckTripPayload, S>

  type TruckTripCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TruckTripFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TruckTripCountAggregateInputType | true
    }

  export interface TruckTripDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TruckTrip'], meta: { name: 'TruckTrip' } }
    /**
     * Find zero or one TruckTrip that matches the filter.
     * @param {TruckTripFindUniqueArgs} args - Arguments to find a TruckTrip
     * @example
     * // Get one TruckTrip
     * const truckTrip = await prisma.truckTrip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TruckTripFindUniqueArgs>(args: SelectSubset<T, TruckTripFindUniqueArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TruckTrip that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TruckTripFindUniqueOrThrowArgs} args - Arguments to find a TruckTrip
     * @example
     * // Get one TruckTrip
     * const truckTrip = await prisma.truckTrip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TruckTripFindUniqueOrThrowArgs>(args: SelectSubset<T, TruckTripFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TruckTrip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckTripFindFirstArgs} args - Arguments to find a TruckTrip
     * @example
     * // Get one TruckTrip
     * const truckTrip = await prisma.truckTrip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TruckTripFindFirstArgs>(args?: SelectSubset<T, TruckTripFindFirstArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TruckTrip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckTripFindFirstOrThrowArgs} args - Arguments to find a TruckTrip
     * @example
     * // Get one TruckTrip
     * const truckTrip = await prisma.truckTrip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TruckTripFindFirstOrThrowArgs>(args?: SelectSubset<T, TruckTripFindFirstOrThrowArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TruckTrips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckTripFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TruckTrips
     * const truckTrips = await prisma.truckTrip.findMany()
     * 
     * // Get first 10 TruckTrips
     * const truckTrips = await prisma.truckTrip.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const truckTripWithIdOnly = await prisma.truckTrip.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TruckTripFindManyArgs>(args?: SelectSubset<T, TruckTripFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TruckTrip.
     * @param {TruckTripCreateArgs} args - Arguments to create a TruckTrip.
     * @example
     * // Create one TruckTrip
     * const TruckTrip = await prisma.truckTrip.create({
     *   data: {
     *     // ... data to create a TruckTrip
     *   }
     * })
     * 
     */
    create<T extends TruckTripCreateArgs>(args: SelectSubset<T, TruckTripCreateArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TruckTrips.
     * @param {TruckTripCreateManyArgs} args - Arguments to create many TruckTrips.
     * @example
     * // Create many TruckTrips
     * const truckTrip = await prisma.truckTrip.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TruckTripCreateManyArgs>(args?: SelectSubset<T, TruckTripCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TruckTrips and returns the data saved in the database.
     * @param {TruckTripCreateManyAndReturnArgs} args - Arguments to create many TruckTrips.
     * @example
     * // Create many TruckTrips
     * const truckTrip = await prisma.truckTrip.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TruckTrips and only return the `id`
     * const truckTripWithIdOnly = await prisma.truckTrip.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TruckTripCreateManyAndReturnArgs>(args?: SelectSubset<T, TruckTripCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TruckTrip.
     * @param {TruckTripDeleteArgs} args - Arguments to delete one TruckTrip.
     * @example
     * // Delete one TruckTrip
     * const TruckTrip = await prisma.truckTrip.delete({
     *   where: {
     *     // ... filter to delete one TruckTrip
     *   }
     * })
     * 
     */
    delete<T extends TruckTripDeleteArgs>(args: SelectSubset<T, TruckTripDeleteArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TruckTrip.
     * @param {TruckTripUpdateArgs} args - Arguments to update one TruckTrip.
     * @example
     * // Update one TruckTrip
     * const truckTrip = await prisma.truckTrip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TruckTripUpdateArgs>(args: SelectSubset<T, TruckTripUpdateArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TruckTrips.
     * @param {TruckTripDeleteManyArgs} args - Arguments to filter TruckTrips to delete.
     * @example
     * // Delete a few TruckTrips
     * const { count } = await prisma.truckTrip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TruckTripDeleteManyArgs>(args?: SelectSubset<T, TruckTripDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TruckTrips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckTripUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TruckTrips
     * const truckTrip = await prisma.truckTrip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TruckTripUpdateManyArgs>(args: SelectSubset<T, TruckTripUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TruckTrips and returns the data updated in the database.
     * @param {TruckTripUpdateManyAndReturnArgs} args - Arguments to update many TruckTrips.
     * @example
     * // Update many TruckTrips
     * const truckTrip = await prisma.truckTrip.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TruckTrips and only return the `id`
     * const truckTripWithIdOnly = await prisma.truckTrip.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TruckTripUpdateManyAndReturnArgs>(args: SelectSubset<T, TruckTripUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TruckTrip.
     * @param {TruckTripUpsertArgs} args - Arguments to update or create a TruckTrip.
     * @example
     * // Update or create a TruckTrip
     * const truckTrip = await prisma.truckTrip.upsert({
     *   create: {
     *     // ... data to create a TruckTrip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TruckTrip we want to update
     *   }
     * })
     */
    upsert<T extends TruckTripUpsertArgs>(args: SelectSubset<T, TruckTripUpsertArgs<ExtArgs>>): Prisma__TruckTripClient<$Result.GetResult<Prisma.$TruckTripPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TruckTrips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckTripCountArgs} args - Arguments to filter TruckTrips to count.
     * @example
     * // Count the number of TruckTrips
     * const count = await prisma.truckTrip.count({
     *   where: {
     *     // ... the filter for the TruckTrips we want to count
     *   }
     * })
    **/
    count<T extends TruckTripCountArgs>(
      args?: Subset<T, TruckTripCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TruckTripCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TruckTrip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckTripAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TruckTripAggregateArgs>(args: Subset<T, TruckTripAggregateArgs>): Prisma.PrismaPromise<GetTruckTripAggregateType<T>>

    /**
     * Group by TruckTrip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckTripGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TruckTripGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TruckTripGroupByArgs['orderBy'] }
        : { orderBy?: TruckTripGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TruckTripGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTruckTripGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TruckTrip model
   */
  readonly fields: TruckTripFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TruckTrip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TruckTripClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    driver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TruckTrip model
   */
  interface TruckTripFieldRefs {
    readonly id: FieldRef<"TruckTrip", 'String'>
    readonly workOrderId: FieldRef<"TruckTrip", 'String'>
    readonly driverId: FieldRef<"TruckTrip", 'String'>
    readonly truckId: FieldRef<"TruckTrip", 'String'>
    readonly startTime: FieldRef<"TruckTrip", 'DateTime'>
    readonly endTime: FieldRef<"TruckTrip", 'DateTime'>
    readonly odometerStart: FieldRef<"TruckTrip", 'Int'>
    readonly odometerEnd: FieldRef<"TruckTrip", 'Int'>
    readonly gpsStart: FieldRef<"TruckTrip", 'Json'>
    readonly gpsEnd: FieldRef<"TruckTrip", 'Json'>
    readonly photos: FieldRef<"TruckTrip", 'String[]'>
    readonly signature: FieldRef<"TruckTrip", 'String'>
    readonly notes: FieldRef<"TruckTrip", 'String'>
    readonly createdAt: FieldRef<"TruckTrip", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TruckTrip findUnique
   */
  export type TruckTripFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * Filter, which TruckTrip to fetch.
     */
    where: TruckTripWhereUniqueInput
  }

  /**
   * TruckTrip findUniqueOrThrow
   */
  export type TruckTripFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * Filter, which TruckTrip to fetch.
     */
    where: TruckTripWhereUniqueInput
  }

  /**
   * TruckTrip findFirst
   */
  export type TruckTripFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * Filter, which TruckTrip to fetch.
     */
    where?: TruckTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckTrips to fetch.
     */
    orderBy?: TruckTripOrderByWithRelationInput | TruckTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckTrips.
     */
    cursor?: TruckTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckTrips.
     */
    distinct?: TruckTripScalarFieldEnum | TruckTripScalarFieldEnum[]
  }

  /**
   * TruckTrip findFirstOrThrow
   */
  export type TruckTripFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * Filter, which TruckTrip to fetch.
     */
    where?: TruckTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckTrips to fetch.
     */
    orderBy?: TruckTripOrderByWithRelationInput | TruckTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckTrips.
     */
    cursor?: TruckTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckTrips.
     */
    distinct?: TruckTripScalarFieldEnum | TruckTripScalarFieldEnum[]
  }

  /**
   * TruckTrip findMany
   */
  export type TruckTripFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * Filter, which TruckTrips to fetch.
     */
    where?: TruckTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckTrips to fetch.
     */
    orderBy?: TruckTripOrderByWithRelationInput | TruckTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TruckTrips.
     */
    cursor?: TruckTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckTrips.
     */
    skip?: number
    distinct?: TruckTripScalarFieldEnum | TruckTripScalarFieldEnum[]
  }

  /**
   * TruckTrip create
   */
  export type TruckTripCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * The data needed to create a TruckTrip.
     */
    data: XOR<TruckTripCreateInput, TruckTripUncheckedCreateInput>
  }

  /**
   * TruckTrip createMany
   */
  export type TruckTripCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TruckTrips.
     */
    data: TruckTripCreateManyInput | TruckTripCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TruckTrip createManyAndReturn
   */
  export type TruckTripCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * The data used to create many TruckTrips.
     */
    data: TruckTripCreateManyInput | TruckTripCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TruckTrip update
   */
  export type TruckTripUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * The data needed to update a TruckTrip.
     */
    data: XOR<TruckTripUpdateInput, TruckTripUncheckedUpdateInput>
    /**
     * Choose, which TruckTrip to update.
     */
    where: TruckTripWhereUniqueInput
  }

  /**
   * TruckTrip updateMany
   */
  export type TruckTripUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TruckTrips.
     */
    data: XOR<TruckTripUpdateManyMutationInput, TruckTripUncheckedUpdateManyInput>
    /**
     * Filter which TruckTrips to update
     */
    where?: TruckTripWhereInput
    /**
     * Limit how many TruckTrips to update.
     */
    limit?: number
  }

  /**
   * TruckTrip updateManyAndReturn
   */
  export type TruckTripUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * The data used to update TruckTrips.
     */
    data: XOR<TruckTripUpdateManyMutationInput, TruckTripUncheckedUpdateManyInput>
    /**
     * Filter which TruckTrips to update
     */
    where?: TruckTripWhereInput
    /**
     * Limit how many TruckTrips to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TruckTrip upsert
   */
  export type TruckTripUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * The filter to search for the TruckTrip to update in case it exists.
     */
    where: TruckTripWhereUniqueInput
    /**
     * In case the TruckTrip found by the `where` argument doesn't exist, create a new TruckTrip with this data.
     */
    create: XOR<TruckTripCreateInput, TruckTripUncheckedCreateInput>
    /**
     * In case the TruckTrip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TruckTripUpdateInput, TruckTripUncheckedUpdateInput>
  }

  /**
   * TruckTrip delete
   */
  export type TruckTripDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
    /**
     * Filter which TruckTrip to delete.
     */
    where: TruckTripWhereUniqueInput
  }

  /**
   * TruckTrip deleteMany
   */
  export type TruckTripDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckTrips to delete
     */
    where?: TruckTripWhereInput
    /**
     * Limit how many TruckTrips to delete.
     */
    limit?: number
  }

  /**
   * TruckTrip without action
   */
  export type TruckTripDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckTrip
     */
    select?: TruckTripSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckTrip
     */
    omit?: TruckTripOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckTripInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    avatar: 'avatar',
    roleId: 'roleId',
    companyId: 'companyId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    permissions: 'permissions'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    city: 'city',
    province: 'province',
    postal: 'postal',
    phone: 'phone',
    email: 'email',
    gstHst: 'gstHst',
    pst: 'pst'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    customerId: 'customerId',
    quoteId: 'quoteId',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    startDate: 'startDate',
    completedAt: 'completedAt',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const JobPhaseScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    name: 'name',
    sequence: 'sequence',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobPhaseScalarFieldEnum = (typeof JobPhaseScalarFieldEnum)[keyof typeof JobPhaseScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    phaseId: 'phaseId',
    title: 'title',
    description: 'description',
    status: 'status',
    estimatedHours: 'estimatedHours',
    actualHours: 'actualHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const DrawingScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    filename: 'filename',
    fileUrl: 'fileUrl',
    fileType: 'fileType',
    revision: 'revision',
    isApproved: 'isApproved',
    approvedAt: 'approvedAt',
    approvedBy: 'approvedBy',
    createdAt: 'createdAt'
  };

  export type DrawingScalarFieldEnum = (typeof DrawingScalarFieldEnum)[keyof typeof DrawingScalarFieldEnum]


  export const BomItemScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    materialId: 'materialId',
    description: 'description',
    quantity: 'quantity',
    unit: 'unit',
    unitCost: 'unitCost',
    totalCost: 'totalCost',
    isOrdered: 'isOrdered',
    createdAt: 'createdAt'
  };

  export type BomItemScalarFieldEnum = (typeof BomItemScalarFieldEnum)[keyof typeof BomItemScalarFieldEnum]


  export const MaterialScalarFieldEnum: {
    id: 'id',
    code: 'code',
    description: 'description',
    category: 'category',
    grade: 'grade',
    size: 'size',
    unit: 'unit',
    unitCost: 'unitCost',
    qtyOnHand: 'qtyOnHand',
    qtyReserved: 'qtyReserved',
    reorderPoint: 'reorderPoint',
    preferredVendor: 'preferredVendor',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MaterialScalarFieldEnum = (typeof MaterialScalarFieldEnum)[keyof typeof MaterialScalarFieldEnum]


  export const HeatBatchScalarFieldEnum: {
    id: 'id',
    materialId: 'materialId',
    heatNumber: 'heatNumber',
    mtrUrl: 'mtrUrl',
    quantity: 'quantity',
    unit: 'unit',
    receivedAt: 'receivedAt',
    createdAt: 'createdAt'
  };

  export type HeatBatchScalarFieldEnum = (typeof HeatBatchScalarFieldEnum)[keyof typeof HeatBatchScalarFieldEnum]


  export const StockLocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive'
  };

  export type StockLocationScalarFieldEnum = (typeof StockLocationScalarFieldEnum)[keyof typeof StockLocationScalarFieldEnum]


  export const StockMovementScalarFieldEnum: {
    id: 'id',
    materialId: 'materialId',
    fromLocationId: 'fromLocationId',
    toLocationId: 'toLocationId',
    quantity: 'quantity',
    unit: 'unit',
    movementType: 'movementType',
    reference: 'reference',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type StockMovementScalarFieldEnum = (typeof StockMovementScalarFieldEnum)[keyof typeof StockMovementScalarFieldEnum]


  export const TimecardScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    jobId: 'jobId',
    taskId: 'taskId',
    startTime: 'startTime',
    endTime: 'endTime',
    totalHours: 'totalHours',
    wpsId: 'wpsId',
    notes: 'notes',
    isApproved: 'isApproved',
    createdAt: 'createdAt'
  };

  export type TimecardScalarFieldEnum = (typeof TimecardScalarFieldEnum)[keyof typeof TimecardScalarFieldEnum]


  export const WeldPassScalarFieldEnum: {
    id: 'id',
    timecardId: 'timecardId',
    welderId: 'welderId',
    wpsId: 'wpsId',
    jointNumber: 'jointNumber',
    passNumber: 'passNumber',
    amps: 'amps',
    volts: 'volts',
    wireFeed: 'wireFeed',
    travelSpeed: 'travelSpeed',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type WeldPassScalarFieldEnum = (typeof WeldPassScalarFieldEnum)[keyof typeof WeldPassScalarFieldEnum]


  export const WpsSpecScalarFieldEnum: {
    id: 'id',
    code: 'code',
    title: 'title',
    process: 'process',
    materialGroup: 'materialGroup',
    positions: 'positions',
    thickness: 'thickness',
    pdfUrl: 'pdfUrl',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    parameters: 'parameters'
  };

  export type WpsSpecScalarFieldEnum = (typeof WpsSpecScalarFieldEnum)[keyof typeof WpsSpecScalarFieldEnum]


  export const PqrTestScalarFieldEnum: {
    id: 'id',
    wpsId: 'wpsId',
    testType: 'testType',
    result: 'result',
    value: 'value',
    unit: 'unit',
    testDate: 'testDate',
    labName: 'labName',
    certUrl: 'certUrl',
    createdAt: 'createdAt'
  };

  export type PqrTestScalarFieldEnum = (typeof PqrTestScalarFieldEnum)[keyof typeof PqrTestScalarFieldEnum]


  export const WelderCertScalarFieldEnum: {
    id: 'id',
    welderId: 'welderId',
    wpsId: 'wpsId',
    certNumber: 'certNumber',
    issuedAt: 'issuedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    certPdfUrl: 'certPdfUrl',
    createdAt: 'createdAt'
  };

  export type WelderCertScalarFieldEnum = (typeof WelderCertScalarFieldEnum)[keyof typeof WelderCertScalarFieldEnum]


  export const InspectionScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    inspectorId: 'inspectorId',
    inspectionType: 'inspectionType',
    jointNumbers: 'jointNumbers',
    result: 'result',
    notes: 'notes',
    reportUrl: 'reportUrl',
    inspectedAt: 'inspectedAt',
    createdAt: 'createdAt'
  };

  export type InspectionScalarFieldEnum = (typeof InspectionScalarFieldEnum)[keyof typeof InspectionScalarFieldEnum]


  export const WeldLogScalarFieldEnum: {
    id: 'id',
    inspectionId: 'inspectionId',
    weldNumber: 'weldNumber',
    jointId: 'jointId',
    process: 'process',
    position: 'position',
    welderId: 'welderId',
    length: 'length',
    defects: 'defects',
    createdAt: 'createdAt'
  };

  export type WeldLogScalarFieldEnum = (typeof WeldLogScalarFieldEnum)[keyof typeof WeldLogScalarFieldEnum]


  export const RepairLogScalarFieldEnum: {
    id: 'id',
    inspectionId: 'inspectionId',
    weldNumber: 'weldNumber',
    defectType: 'defectType',
    repairMethod: 'repairMethod',
    repairedBy: 'repairedBy',
    repairedAt: 'repairedAt',
    isCompleted: 'isCompleted',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type RepairLogScalarFieldEnum = (typeof RepairLogScalarFieldEnum)[keyof typeof RepairLogScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    city: 'city',
    province: 'province',
    postal: 'postal',
    gstHst: 'gstHst',
    terms: 'terms',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    city: 'city',
    province: 'province',
    postal: 'postal',
    terms: 'terms',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const PurchaseOrderScalarFieldEnum: {
    id: 'id',
    poNumber: 'poNumber',
    vendorId: 'vendorId',
    status: 'status',
    orderDate: 'orderDate',
    requiredBy: 'requiredBy',
    subtotal: 'subtotal',
    tax: 'tax',
    total: 'total',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PurchaseOrderScalarFieldEnum = (typeof PurchaseOrderScalarFieldEnum)[keyof typeof PurchaseOrderScalarFieldEnum]


  export const PurchaseOrderItemScalarFieldEnum: {
    id: 'id',
    poId: 'poId',
    materialId: 'materialId',
    description: 'description',
    quantity: 'quantity',
    unit: 'unit',
    unitCost: 'unitCost',
    totalCost: 'totalCost',
    qtyReceived: 'qtyReceived',
    createdAt: 'createdAt'
  };

  export type PurchaseOrderItemScalarFieldEnum = (typeof PurchaseOrderItemScalarFieldEnum)[keyof typeof PurchaseOrderItemScalarFieldEnum]


  export const QuoteScalarFieldEnum: {
    id: 'id',
    quoteNumber: 'quoteNumber',
    customerId: 'customerId',
    title: 'title',
    subtotal: 'subtotal',
    tax: 'tax',
    total: 'total',
    validUntil: 'validUntil',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuoteScalarFieldEnum = (typeof QuoteScalarFieldEnum)[keyof typeof QuoteScalarFieldEnum]


  export const QuoteItemScalarFieldEnum: {
    id: 'id',
    quoteId: 'quoteId',
    description: 'description',
    quantity: 'quantity',
    unit: 'unit',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    createdAt: 'createdAt'
  };

  export type QuoteItemScalarFieldEnum = (typeof QuoteItemScalarFieldEnum)[keyof typeof QuoteItemScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    invoiceNumber: 'invoiceNumber',
    customerId: 'customerId',
    jobId: 'jobId',
    subtotal: 'subtotal',
    gstHst: 'gstHst',
    pst: 'pst',
    total: 'total',
    status: 'status',
    issuedAt: 'issuedAt',
    dueAt: 'dueAt',
    paidAt: 'paidAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const InvoiceItemScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    description: 'description',
    quantity: 'quantity',
    unit: 'unit',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    createdAt: 'createdAt'
  };

  export type InvoiceItemScalarFieldEnum = (typeof InvoiceItemScalarFieldEnum)[keyof typeof InvoiceItemScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    amount: 'amount',
    paymentMethod: 'paymentMethod',
    reference: 'reference',
    paidAt: 'paidAt',
    createdAt: 'createdAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const EquipmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    manufacturer: 'manufacturer',
    model: 'model',
    serialNumber: 'serialNumber',
    purchaseDate: 'purchaseDate',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type EquipmentScalarFieldEnum = (typeof EquipmentScalarFieldEnum)[keyof typeof EquipmentScalarFieldEnum]


  export const ServiceLogScalarFieldEnum: {
    id: 'id',
    equipmentId: 'equipmentId',
    serviceType: 'serviceType',
    description: 'description',
    cost: 'cost',
    servicedAt: 'servicedAt',
    nextDue: 'nextDue',
    createdAt: 'createdAt'
  };

  export type ServiceLogScalarFieldEnum = (typeof ServiceLogScalarFieldEnum)[keyof typeof ServiceLogScalarFieldEnum]


  export const WorkOrderScalarFieldEnum: {
    id: 'id',
    woNumber: 'woNumber',
    jobId: 'jobId',
    customerId: 'customerId',
    title: 'title',
    description: 'description',
    address: 'address',
    city: 'city',
    province: 'province',
    postal: 'postal',
    priority: 'priority',
    status: 'status',
    scheduledAt: 'scheduledAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkOrderScalarFieldEnum = (typeof WorkOrderScalarFieldEnum)[keyof typeof WorkOrderScalarFieldEnum]


  export const TruckTripScalarFieldEnum: {
    id: 'id',
    workOrderId: 'workOrderId',
    driverId: 'driverId',
    truckId: 'truckId',
    startTime: 'startTime',
    endTime: 'endTime',
    odometerStart: 'odometerStart',
    odometerEnd: 'odometerEnd',
    gpsStart: 'gpsStart',
    gpsEnd: 'gpsEnd',
    photos: 'photos',
    signature: 'signature',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type TruckTripScalarFieldEnum = (typeof TruckTripScalarFieldEnum)[keyof typeof TruckTripScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PhaseStatus'
   */
  export type EnumPhaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhaseStatus'>
    


  /**
   * Reference to a field of type 'PhaseStatus[]'
   */
  export type ListEnumPhaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhaseStatus[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'InspectionType'
   */
  export type EnumInspectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InspectionType'>
    


  /**
   * Reference to a field of type 'InspectionType[]'
   */
  export type ListEnumInspectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InspectionType[]'>
    


  /**
   * Reference to a field of type 'PoStatus'
   */
  export type EnumPoStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PoStatus'>
    


  /**
   * Reference to a field of type 'PoStatus[]'
   */
  export type ListEnumPoStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PoStatus[]'>
    


  /**
   * Reference to a field of type 'QuoteStatus'
   */
  export type EnumQuoteStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuoteStatus'>
    


  /**
   * Reference to a field of type 'QuoteStatus[]'
   */
  export type ListEnumQuoteStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuoteStatus[]'>
    


  /**
   * Reference to a field of type 'InvoiceStatus'
   */
  export type EnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus'>
    


  /**
   * Reference to a field of type 'InvoiceStatus[]'
   */
  export type ListEnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'EquipmentType'
   */
  export type EnumEquipmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EquipmentType'>
    


  /**
   * Reference to a field of type 'EquipmentType[]'
   */
  export type ListEnumEquipmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EquipmentType[]'>
    


  /**
   * Reference to a field of type 'ServiceType'
   */
  export type EnumServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceType'>
    


  /**
   * Reference to a field of type 'ServiceType[]'
   */
  export type ListEnumServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceType[]'>
    


  /**
   * Reference to a field of type 'WorkOrderStatus'
   */
  export type EnumWorkOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkOrderStatus'>
    


  /**
   * Reference to a field of type 'WorkOrderStatus[]'
   */
  export type ListEnumWorkOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkOrderStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    roleId?: StringFilter<"User"> | string
    companyId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    welderCerts?: WelderCertListRelationFilter
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    timecards?: TimecardListRelationFilter
    weldPasses?: WeldPassListRelationFilter
    inspections?: InspectionListRelationFilter
    sessions?: SessionListRelationFilter
    createdJobs?: JobListRelationFilter
    truckTrips?: TruckTripListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    roleId?: SortOrder
    companyId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    welderCerts?: WelderCertOrderByRelationAggregateInput
    role?: RoleOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    timecards?: TimecardOrderByRelationAggregateInput
    weldPasses?: WeldPassOrderByRelationAggregateInput
    inspections?: InspectionOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    createdJobs?: JobOrderByRelationAggregateInput
    truckTrips?: TruckTripOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    roleId?: StringFilter<"User"> | string
    companyId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    welderCerts?: WelderCertListRelationFilter
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    timecards?: TimecardListRelationFilter
    weldPasses?: WeldPassListRelationFilter
    inspections?: InspectionListRelationFilter
    sessions?: SessionListRelationFilter
    createdJobs?: JobListRelationFilter
    truckTrips?: TruckTripListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    roleId?: SortOrder
    companyId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    roleId?: StringWithAggregatesFilter<"User"> | string
    companyId?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    permissions?: JsonFilter<"Role">
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    permissions?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    permissions?: JsonFilter<"Role">
    users?: UserListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    permissions?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    permissions?: JsonWithAggregatesFilter<"Role">
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    address?: StringNullableFilter<"Company"> | string | null
    city?: StringNullableFilter<"Company"> | string | null
    province?: StringNullableFilter<"Company"> | string | null
    postal?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    email?: StringNullableFilter<"Company"> | string | null
    gstHst?: StringNullableFilter<"Company"> | string | null
    pst?: StringNullableFilter<"Company"> | string | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
    vendors?: VendorListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    postal?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    gstHst?: SortOrderInput | SortOrder
    pst?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
    vendors?: VendorOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    address?: StringNullableFilter<"Company"> | string | null
    city?: StringNullableFilter<"Company"> | string | null
    province?: StringNullableFilter<"Company"> | string | null
    postal?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    email?: StringNullableFilter<"Company"> | string | null
    gstHst?: StringNullableFilter<"Company"> | string | null
    pst?: StringNullableFilter<"Company"> | string | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
    vendors?: VendorListRelationFilter
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    postal?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    gstHst?: SortOrderInput | SortOrder
    pst?: SortOrderInput | SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    city?: StringNullableWithAggregatesFilter<"Company"> | string | null
    province?: StringNullableWithAggregatesFilter<"Company"> | string | null
    postal?: StringNullableWithAggregatesFilter<"Company"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Company"> | string | null
    email?: StringNullableWithAggregatesFilter<"Company"> | string | null
    gstHst?: StringNullableWithAggregatesFilter<"Company"> | string | null
    pst?: StringNullableWithAggregatesFilter<"Company"> | string | null
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringNullableFilter<"Job"> | string | null
    customerId?: StringFilter<"Job"> | string
    quoteId?: StringNullableFilter<"Job"> | string | null
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityFilter<"Job"> | $Enums.Priority
    dueDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    startDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    createdById?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    quote?: XOR<QuoteNullableScalarRelationFilter, QuoteWhereInput> | null
    phases?: JobPhaseListRelationFilter
    drawings?: DrawingListRelationFilter
    bomItems?: BomItemListRelationFilter
    timecards?: TimecardListRelationFilter
    invoices?: InvoiceListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    Inspection?: InspectionListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    customerId?: SortOrder
    quoteId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    quote?: QuoteOrderByWithRelationInput
    phases?: JobPhaseOrderByRelationAggregateInput
    drawings?: DrawingOrderByRelationAggregateInput
    bomItems?: BomItemOrderByRelationAggregateInput
    timecards?: TimecardOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
    Inspection?: InspectionOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    title?: StringFilter<"Job"> | string
    description?: StringNullableFilter<"Job"> | string | null
    customerId?: StringFilter<"Job"> | string
    quoteId?: StringNullableFilter<"Job"> | string | null
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityFilter<"Job"> | $Enums.Priority
    dueDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    startDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    createdById?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    quote?: XOR<QuoteNullableScalarRelationFilter, QuoteWhereInput> | null
    phases?: JobPhaseListRelationFilter
    drawings?: DrawingListRelationFilter
    bomItems?: BomItemListRelationFilter
    timecards?: TimecardListRelationFilter
    invoices?: InvoiceListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    Inspection?: InspectionListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    customerId?: SortOrder
    quoteId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    title?: StringWithAggregatesFilter<"Job"> | string
    description?: StringNullableWithAggregatesFilter<"Job"> | string | null
    customerId?: StringWithAggregatesFilter<"Job"> | string
    quoteId?: StringNullableWithAggregatesFilter<"Job"> | string | null
    status?: EnumJobStatusWithAggregatesFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityWithAggregatesFilter<"Job"> | $Enums.Priority
    dueDate?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    createdById?: StringWithAggregatesFilter<"Job"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type JobPhaseWhereInput = {
    AND?: JobPhaseWhereInput | JobPhaseWhereInput[]
    OR?: JobPhaseWhereInput[]
    NOT?: JobPhaseWhereInput | JobPhaseWhereInput[]
    id?: StringFilter<"JobPhase"> | string
    jobId?: StringFilter<"JobPhase"> | string
    name?: StringFilter<"JobPhase"> | string
    sequence?: IntFilter<"JobPhase"> | number
    status?: EnumPhaseStatusFilter<"JobPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableFilter<"JobPhase"> | Date | string | null
    endDate?: DateTimeNullableFilter<"JobPhase"> | Date | string | null
    createdAt?: DateTimeFilter<"JobPhase"> | Date | string
    updatedAt?: DateTimeFilter<"JobPhase"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    tasks?: TaskListRelationFilter
  }

  export type JobPhaseOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    sequence?: SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type JobPhaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId_sequence?: JobPhaseJobIdSequenceCompoundUniqueInput
    AND?: JobPhaseWhereInput | JobPhaseWhereInput[]
    OR?: JobPhaseWhereInput[]
    NOT?: JobPhaseWhereInput | JobPhaseWhereInput[]
    jobId?: StringFilter<"JobPhase"> | string
    name?: StringFilter<"JobPhase"> | string
    sequence?: IntFilter<"JobPhase"> | number
    status?: EnumPhaseStatusFilter<"JobPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableFilter<"JobPhase"> | Date | string | null
    endDate?: DateTimeNullableFilter<"JobPhase"> | Date | string | null
    createdAt?: DateTimeFilter<"JobPhase"> | Date | string
    updatedAt?: DateTimeFilter<"JobPhase"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    tasks?: TaskListRelationFilter
  }, "id" | "jobId_sequence">

  export type JobPhaseOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    sequence?: SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobPhaseCountOrderByAggregateInput
    _avg?: JobPhaseAvgOrderByAggregateInput
    _max?: JobPhaseMaxOrderByAggregateInput
    _min?: JobPhaseMinOrderByAggregateInput
    _sum?: JobPhaseSumOrderByAggregateInput
  }

  export type JobPhaseScalarWhereWithAggregatesInput = {
    AND?: JobPhaseScalarWhereWithAggregatesInput | JobPhaseScalarWhereWithAggregatesInput[]
    OR?: JobPhaseScalarWhereWithAggregatesInput[]
    NOT?: JobPhaseScalarWhereWithAggregatesInput | JobPhaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobPhase"> | string
    jobId?: StringWithAggregatesFilter<"JobPhase"> | string
    name?: StringWithAggregatesFilter<"JobPhase"> | string
    sequence?: IntWithAggregatesFilter<"JobPhase"> | number
    status?: EnumPhaseStatusWithAggregatesFilter<"JobPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableWithAggregatesFilter<"JobPhase"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"JobPhase"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"JobPhase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobPhase"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    phaseId?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    estimatedHours?: FloatNullableFilter<"Task"> | number | null
    actualHours?: FloatNullableFilter<"Task"> | number | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    phase?: XOR<JobPhaseScalarRelationFilter, JobPhaseWhereInput>
    timecards?: TimecardListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    phaseId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phase?: JobPhaseOrderByWithRelationInput
    timecards?: TimecardOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    phaseId?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    estimatedHours?: FloatNullableFilter<"Task"> | number | null
    actualHours?: FloatNullableFilter<"Task"> | number | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    phase?: XOR<JobPhaseScalarRelationFilter, JobPhaseWhereInput>
    timecards?: TimecardListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    phaseId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    phaseId?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    estimatedHours?: FloatNullableWithAggregatesFilter<"Task"> | number | null
    actualHours?: FloatNullableWithAggregatesFilter<"Task"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type DrawingWhereInput = {
    AND?: DrawingWhereInput | DrawingWhereInput[]
    OR?: DrawingWhereInput[]
    NOT?: DrawingWhereInput | DrawingWhereInput[]
    id?: StringFilter<"Drawing"> | string
    jobId?: StringFilter<"Drawing"> | string
    filename?: StringFilter<"Drawing"> | string
    fileUrl?: StringFilter<"Drawing"> | string
    fileType?: StringFilter<"Drawing"> | string
    revision?: StringFilter<"Drawing"> | string
    isApproved?: BoolFilter<"Drawing"> | boolean
    approvedAt?: DateTimeNullableFilter<"Drawing"> | Date | string | null
    approvedBy?: StringNullableFilter<"Drawing"> | string | null
    createdAt?: DateTimeFilter<"Drawing"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type DrawingOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    revision?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    job?: JobOrderByWithRelationInput
  }

  export type DrawingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DrawingWhereInput | DrawingWhereInput[]
    OR?: DrawingWhereInput[]
    NOT?: DrawingWhereInput | DrawingWhereInput[]
    jobId?: StringFilter<"Drawing"> | string
    filename?: StringFilter<"Drawing"> | string
    fileUrl?: StringFilter<"Drawing"> | string
    fileType?: StringFilter<"Drawing"> | string
    revision?: StringFilter<"Drawing"> | string
    isApproved?: BoolFilter<"Drawing"> | boolean
    approvedAt?: DateTimeNullableFilter<"Drawing"> | Date | string | null
    approvedBy?: StringNullableFilter<"Drawing"> | string | null
    createdAt?: DateTimeFilter<"Drawing"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id">

  export type DrawingOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    revision?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DrawingCountOrderByAggregateInput
    _max?: DrawingMaxOrderByAggregateInput
    _min?: DrawingMinOrderByAggregateInput
  }

  export type DrawingScalarWhereWithAggregatesInput = {
    AND?: DrawingScalarWhereWithAggregatesInput | DrawingScalarWhereWithAggregatesInput[]
    OR?: DrawingScalarWhereWithAggregatesInput[]
    NOT?: DrawingScalarWhereWithAggregatesInput | DrawingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Drawing"> | string
    jobId?: StringWithAggregatesFilter<"Drawing"> | string
    filename?: StringWithAggregatesFilter<"Drawing"> | string
    fileUrl?: StringWithAggregatesFilter<"Drawing"> | string
    fileType?: StringWithAggregatesFilter<"Drawing"> | string
    revision?: StringWithAggregatesFilter<"Drawing"> | string
    isApproved?: BoolWithAggregatesFilter<"Drawing"> | boolean
    approvedAt?: DateTimeNullableWithAggregatesFilter<"Drawing"> | Date | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"Drawing"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Drawing"> | Date | string
  }

  export type BomItemWhereInput = {
    AND?: BomItemWhereInput | BomItemWhereInput[]
    OR?: BomItemWhereInput[]
    NOT?: BomItemWhereInput | BomItemWhereInput[]
    id?: StringFilter<"BomItem"> | string
    jobId?: StringFilter<"BomItem"> | string
    materialId?: StringFilter<"BomItem"> | string
    description?: StringFilter<"BomItem"> | string
    quantity?: FloatFilter<"BomItem"> | number
    unit?: StringFilter<"BomItem"> | string
    unitCost?: FloatNullableFilter<"BomItem"> | number | null
    totalCost?: FloatNullableFilter<"BomItem"> | number | null
    isOrdered?: BoolFilter<"BomItem"> | boolean
    createdAt?: DateTimeFilter<"BomItem"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
  }

  export type BomItemOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    isOrdered?: SortOrder
    createdAt?: SortOrder
    job?: JobOrderByWithRelationInput
    material?: MaterialOrderByWithRelationInput
  }

  export type BomItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BomItemWhereInput | BomItemWhereInput[]
    OR?: BomItemWhereInput[]
    NOT?: BomItemWhereInput | BomItemWhereInput[]
    jobId?: StringFilter<"BomItem"> | string
    materialId?: StringFilter<"BomItem"> | string
    description?: StringFilter<"BomItem"> | string
    quantity?: FloatFilter<"BomItem"> | number
    unit?: StringFilter<"BomItem"> | string
    unitCost?: FloatNullableFilter<"BomItem"> | number | null
    totalCost?: FloatNullableFilter<"BomItem"> | number | null
    isOrdered?: BoolFilter<"BomItem"> | boolean
    createdAt?: DateTimeFilter<"BomItem"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
  }, "id">

  export type BomItemOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    isOrdered?: SortOrder
    createdAt?: SortOrder
    _count?: BomItemCountOrderByAggregateInput
    _avg?: BomItemAvgOrderByAggregateInput
    _max?: BomItemMaxOrderByAggregateInput
    _min?: BomItemMinOrderByAggregateInput
    _sum?: BomItemSumOrderByAggregateInput
  }

  export type BomItemScalarWhereWithAggregatesInput = {
    AND?: BomItemScalarWhereWithAggregatesInput | BomItemScalarWhereWithAggregatesInput[]
    OR?: BomItemScalarWhereWithAggregatesInput[]
    NOT?: BomItemScalarWhereWithAggregatesInput | BomItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BomItem"> | string
    jobId?: StringWithAggregatesFilter<"BomItem"> | string
    materialId?: StringWithAggregatesFilter<"BomItem"> | string
    description?: StringWithAggregatesFilter<"BomItem"> | string
    quantity?: FloatWithAggregatesFilter<"BomItem"> | number
    unit?: StringWithAggregatesFilter<"BomItem"> | string
    unitCost?: FloatNullableWithAggregatesFilter<"BomItem"> | number | null
    totalCost?: FloatNullableWithAggregatesFilter<"BomItem"> | number | null
    isOrdered?: BoolWithAggregatesFilter<"BomItem"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BomItem"> | Date | string
  }

  export type MaterialWhereInput = {
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    id?: StringFilter<"Material"> | string
    code?: StringFilter<"Material"> | string
    description?: StringFilter<"Material"> | string
    category?: StringFilter<"Material"> | string
    grade?: StringNullableFilter<"Material"> | string | null
    size?: StringNullableFilter<"Material"> | string | null
    unit?: StringFilter<"Material"> | string
    unitCost?: FloatNullableFilter<"Material"> | number | null
    qtyOnHand?: FloatFilter<"Material"> | number
    qtyReserved?: FloatFilter<"Material"> | number
    reorderPoint?: FloatNullableFilter<"Material"> | number | null
    preferredVendor?: StringNullableFilter<"Material"> | string | null
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
    bomItems?: BomItemListRelationFilter
    heatBatches?: HeatBatchListRelationFilter
    stockMoves?: StockMovementListRelationFilter
    poItems?: PurchaseOrderItemListRelationFilter
  }

  export type MaterialOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    category?: SortOrder
    grade?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    unit?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    qtyOnHand?: SortOrder
    qtyReserved?: SortOrder
    reorderPoint?: SortOrderInput | SortOrder
    preferredVendor?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bomItems?: BomItemOrderByRelationAggregateInput
    heatBatches?: HeatBatchOrderByRelationAggregateInput
    stockMoves?: StockMovementOrderByRelationAggregateInput
    poItems?: PurchaseOrderItemOrderByRelationAggregateInput
  }

  export type MaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    description?: StringFilter<"Material"> | string
    category?: StringFilter<"Material"> | string
    grade?: StringNullableFilter<"Material"> | string | null
    size?: StringNullableFilter<"Material"> | string | null
    unit?: StringFilter<"Material"> | string
    unitCost?: FloatNullableFilter<"Material"> | number | null
    qtyOnHand?: FloatFilter<"Material"> | number
    qtyReserved?: FloatFilter<"Material"> | number
    reorderPoint?: FloatNullableFilter<"Material"> | number | null
    preferredVendor?: StringNullableFilter<"Material"> | string | null
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
    bomItems?: BomItemListRelationFilter
    heatBatches?: HeatBatchListRelationFilter
    stockMoves?: StockMovementListRelationFilter
    poItems?: PurchaseOrderItemListRelationFilter
  }, "id" | "code">

  export type MaterialOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    category?: SortOrder
    grade?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    unit?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    qtyOnHand?: SortOrder
    qtyReserved?: SortOrder
    reorderPoint?: SortOrderInput | SortOrder
    preferredVendor?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MaterialCountOrderByAggregateInput
    _avg?: MaterialAvgOrderByAggregateInput
    _max?: MaterialMaxOrderByAggregateInput
    _min?: MaterialMinOrderByAggregateInput
    _sum?: MaterialSumOrderByAggregateInput
  }

  export type MaterialScalarWhereWithAggregatesInput = {
    AND?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    OR?: MaterialScalarWhereWithAggregatesInput[]
    NOT?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Material"> | string
    code?: StringWithAggregatesFilter<"Material"> | string
    description?: StringWithAggregatesFilter<"Material"> | string
    category?: StringWithAggregatesFilter<"Material"> | string
    grade?: StringNullableWithAggregatesFilter<"Material"> | string | null
    size?: StringNullableWithAggregatesFilter<"Material"> | string | null
    unit?: StringWithAggregatesFilter<"Material"> | string
    unitCost?: FloatNullableWithAggregatesFilter<"Material"> | number | null
    qtyOnHand?: FloatWithAggregatesFilter<"Material"> | number
    qtyReserved?: FloatWithAggregatesFilter<"Material"> | number
    reorderPoint?: FloatNullableWithAggregatesFilter<"Material"> | number | null
    preferredVendor?: StringNullableWithAggregatesFilter<"Material"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Material"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Material"> | Date | string
  }

  export type HeatBatchWhereInput = {
    AND?: HeatBatchWhereInput | HeatBatchWhereInput[]
    OR?: HeatBatchWhereInput[]
    NOT?: HeatBatchWhereInput | HeatBatchWhereInput[]
    id?: StringFilter<"HeatBatch"> | string
    materialId?: StringFilter<"HeatBatch"> | string
    heatNumber?: StringFilter<"HeatBatch"> | string
    mtrUrl?: StringNullableFilter<"HeatBatch"> | string | null
    quantity?: FloatFilter<"HeatBatch"> | number
    unit?: StringFilter<"HeatBatch"> | string
    receivedAt?: DateTimeFilter<"HeatBatch"> | Date | string
    createdAt?: DateTimeFilter<"HeatBatch"> | Date | string
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
  }

  export type HeatBatchOrderByWithRelationInput = {
    id?: SortOrder
    materialId?: SortOrder
    heatNumber?: SortOrder
    mtrUrl?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
    material?: MaterialOrderByWithRelationInput
  }

  export type HeatBatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    materialId_heatNumber?: HeatBatchMaterialIdHeatNumberCompoundUniqueInput
    AND?: HeatBatchWhereInput | HeatBatchWhereInput[]
    OR?: HeatBatchWhereInput[]
    NOT?: HeatBatchWhereInput | HeatBatchWhereInput[]
    materialId?: StringFilter<"HeatBatch"> | string
    heatNumber?: StringFilter<"HeatBatch"> | string
    mtrUrl?: StringNullableFilter<"HeatBatch"> | string | null
    quantity?: FloatFilter<"HeatBatch"> | number
    unit?: StringFilter<"HeatBatch"> | string
    receivedAt?: DateTimeFilter<"HeatBatch"> | Date | string
    createdAt?: DateTimeFilter<"HeatBatch"> | Date | string
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
  }, "id" | "materialId_heatNumber">

  export type HeatBatchOrderByWithAggregationInput = {
    id?: SortOrder
    materialId?: SortOrder
    heatNumber?: SortOrder
    mtrUrl?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
    _count?: HeatBatchCountOrderByAggregateInput
    _avg?: HeatBatchAvgOrderByAggregateInput
    _max?: HeatBatchMaxOrderByAggregateInput
    _min?: HeatBatchMinOrderByAggregateInput
    _sum?: HeatBatchSumOrderByAggregateInput
  }

  export type HeatBatchScalarWhereWithAggregatesInput = {
    AND?: HeatBatchScalarWhereWithAggregatesInput | HeatBatchScalarWhereWithAggregatesInput[]
    OR?: HeatBatchScalarWhereWithAggregatesInput[]
    NOT?: HeatBatchScalarWhereWithAggregatesInput | HeatBatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HeatBatch"> | string
    materialId?: StringWithAggregatesFilter<"HeatBatch"> | string
    heatNumber?: StringWithAggregatesFilter<"HeatBatch"> | string
    mtrUrl?: StringNullableWithAggregatesFilter<"HeatBatch"> | string | null
    quantity?: FloatWithAggregatesFilter<"HeatBatch"> | number
    unit?: StringWithAggregatesFilter<"HeatBatch"> | string
    receivedAt?: DateTimeWithAggregatesFilter<"HeatBatch"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"HeatBatch"> | Date | string
  }

  export type StockLocationWhereInput = {
    AND?: StockLocationWhereInput | StockLocationWhereInput[]
    OR?: StockLocationWhereInput[]
    NOT?: StockLocationWhereInput | StockLocationWhereInput[]
    id?: StringFilter<"StockLocation"> | string
    name?: StringFilter<"StockLocation"> | string
    description?: StringNullableFilter<"StockLocation"> | string | null
    isActive?: BoolFilter<"StockLocation"> | boolean
    movementsFrom?: StockMovementListRelationFilter
    movementsTo?: StockMovementListRelationFilter
  }

  export type StockLocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    movementsFrom?: StockMovementOrderByRelationAggregateInput
    movementsTo?: StockMovementOrderByRelationAggregateInput
  }

  export type StockLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: StockLocationWhereInput | StockLocationWhereInput[]
    OR?: StockLocationWhereInput[]
    NOT?: StockLocationWhereInput | StockLocationWhereInput[]
    description?: StringNullableFilter<"StockLocation"> | string | null
    isActive?: BoolFilter<"StockLocation"> | boolean
    movementsFrom?: StockMovementListRelationFilter
    movementsTo?: StockMovementListRelationFilter
  }, "id" | "name">

  export type StockLocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    _count?: StockLocationCountOrderByAggregateInput
    _max?: StockLocationMaxOrderByAggregateInput
    _min?: StockLocationMinOrderByAggregateInput
  }

  export type StockLocationScalarWhereWithAggregatesInput = {
    AND?: StockLocationScalarWhereWithAggregatesInput | StockLocationScalarWhereWithAggregatesInput[]
    OR?: StockLocationScalarWhereWithAggregatesInput[]
    NOT?: StockLocationScalarWhereWithAggregatesInput | StockLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StockLocation"> | string
    name?: StringWithAggregatesFilter<"StockLocation"> | string
    description?: StringNullableWithAggregatesFilter<"StockLocation"> | string | null
    isActive?: BoolWithAggregatesFilter<"StockLocation"> | boolean
  }

  export type StockMovementWhereInput = {
    AND?: StockMovementWhereInput | StockMovementWhereInput[]
    OR?: StockMovementWhereInput[]
    NOT?: StockMovementWhereInput | StockMovementWhereInput[]
    id?: StringFilter<"StockMovement"> | string
    materialId?: StringFilter<"StockMovement"> | string
    fromLocationId?: StringNullableFilter<"StockMovement"> | string | null
    toLocationId?: StringNullableFilter<"StockMovement"> | string | null
    quantity?: FloatFilter<"StockMovement"> | number
    unit?: StringFilter<"StockMovement"> | string
    movementType?: StringFilter<"StockMovement"> | string
    reference?: StringNullableFilter<"StockMovement"> | string | null
    notes?: StringNullableFilter<"StockMovement"> | string | null
    createdAt?: DateTimeFilter<"StockMovement"> | Date | string
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
    fromLocation?: XOR<StockLocationNullableScalarRelationFilter, StockLocationWhereInput> | null
    toLocation?: XOR<StockLocationNullableScalarRelationFilter, StockLocationWhereInput> | null
  }

  export type StockMovementOrderByWithRelationInput = {
    id?: SortOrder
    materialId?: SortOrder
    fromLocationId?: SortOrderInput | SortOrder
    toLocationId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    movementType?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    material?: MaterialOrderByWithRelationInput
    fromLocation?: StockLocationOrderByWithRelationInput
    toLocation?: StockLocationOrderByWithRelationInput
  }

  export type StockMovementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StockMovementWhereInput | StockMovementWhereInput[]
    OR?: StockMovementWhereInput[]
    NOT?: StockMovementWhereInput | StockMovementWhereInput[]
    materialId?: StringFilter<"StockMovement"> | string
    fromLocationId?: StringNullableFilter<"StockMovement"> | string | null
    toLocationId?: StringNullableFilter<"StockMovement"> | string | null
    quantity?: FloatFilter<"StockMovement"> | number
    unit?: StringFilter<"StockMovement"> | string
    movementType?: StringFilter<"StockMovement"> | string
    reference?: StringNullableFilter<"StockMovement"> | string | null
    notes?: StringNullableFilter<"StockMovement"> | string | null
    createdAt?: DateTimeFilter<"StockMovement"> | Date | string
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
    fromLocation?: XOR<StockLocationNullableScalarRelationFilter, StockLocationWhereInput> | null
    toLocation?: XOR<StockLocationNullableScalarRelationFilter, StockLocationWhereInput> | null
  }, "id">

  export type StockMovementOrderByWithAggregationInput = {
    id?: SortOrder
    materialId?: SortOrder
    fromLocationId?: SortOrderInput | SortOrder
    toLocationId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    movementType?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StockMovementCountOrderByAggregateInput
    _avg?: StockMovementAvgOrderByAggregateInput
    _max?: StockMovementMaxOrderByAggregateInput
    _min?: StockMovementMinOrderByAggregateInput
    _sum?: StockMovementSumOrderByAggregateInput
  }

  export type StockMovementScalarWhereWithAggregatesInput = {
    AND?: StockMovementScalarWhereWithAggregatesInput | StockMovementScalarWhereWithAggregatesInput[]
    OR?: StockMovementScalarWhereWithAggregatesInput[]
    NOT?: StockMovementScalarWhereWithAggregatesInput | StockMovementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StockMovement"> | string
    materialId?: StringWithAggregatesFilter<"StockMovement"> | string
    fromLocationId?: StringNullableWithAggregatesFilter<"StockMovement"> | string | null
    toLocationId?: StringNullableWithAggregatesFilter<"StockMovement"> | string | null
    quantity?: FloatWithAggregatesFilter<"StockMovement"> | number
    unit?: StringWithAggregatesFilter<"StockMovement"> | string
    movementType?: StringWithAggregatesFilter<"StockMovement"> | string
    reference?: StringNullableWithAggregatesFilter<"StockMovement"> | string | null
    notes?: StringNullableWithAggregatesFilter<"StockMovement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StockMovement"> | Date | string
  }

  export type TimecardWhereInput = {
    AND?: TimecardWhereInput | TimecardWhereInput[]
    OR?: TimecardWhereInput[]
    NOT?: TimecardWhereInput | TimecardWhereInput[]
    id?: StringFilter<"Timecard"> | string
    userId?: StringFilter<"Timecard"> | string
    jobId?: StringNullableFilter<"Timecard"> | string | null
    taskId?: StringNullableFilter<"Timecard"> | string | null
    startTime?: DateTimeFilter<"Timecard"> | Date | string
    endTime?: DateTimeNullableFilter<"Timecard"> | Date | string | null
    totalHours?: FloatNullableFilter<"Timecard"> | number | null
    wpsId?: StringNullableFilter<"Timecard"> | string | null
    notes?: StringNullableFilter<"Timecard"> | string | null
    isApproved?: BoolFilter<"Timecard"> | boolean
    createdAt?: DateTimeFilter<"Timecard"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    wps?: XOR<WpsSpecNullableScalarRelationFilter, WpsSpecWhereInput> | null
    weldPasses?: WeldPassListRelationFilter
  }

  export type TimecardOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    totalHours?: SortOrderInput | SortOrder
    wpsId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
    wps?: WpsSpecOrderByWithRelationInput
    weldPasses?: WeldPassOrderByRelationAggregateInput
  }

  export type TimecardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TimecardWhereInput | TimecardWhereInput[]
    OR?: TimecardWhereInput[]
    NOT?: TimecardWhereInput | TimecardWhereInput[]
    userId?: StringFilter<"Timecard"> | string
    jobId?: StringNullableFilter<"Timecard"> | string | null
    taskId?: StringNullableFilter<"Timecard"> | string | null
    startTime?: DateTimeFilter<"Timecard"> | Date | string
    endTime?: DateTimeNullableFilter<"Timecard"> | Date | string | null
    totalHours?: FloatNullableFilter<"Timecard"> | number | null
    wpsId?: StringNullableFilter<"Timecard"> | string | null
    notes?: StringNullableFilter<"Timecard"> | string | null
    isApproved?: BoolFilter<"Timecard"> | boolean
    createdAt?: DateTimeFilter<"Timecard"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    wps?: XOR<WpsSpecNullableScalarRelationFilter, WpsSpecWhereInput> | null
    weldPasses?: WeldPassListRelationFilter
  }, "id">

  export type TimecardOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    totalHours?: SortOrderInput | SortOrder
    wpsId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    _count?: TimecardCountOrderByAggregateInput
    _avg?: TimecardAvgOrderByAggregateInput
    _max?: TimecardMaxOrderByAggregateInput
    _min?: TimecardMinOrderByAggregateInput
    _sum?: TimecardSumOrderByAggregateInput
  }

  export type TimecardScalarWhereWithAggregatesInput = {
    AND?: TimecardScalarWhereWithAggregatesInput | TimecardScalarWhereWithAggregatesInput[]
    OR?: TimecardScalarWhereWithAggregatesInput[]
    NOT?: TimecardScalarWhereWithAggregatesInput | TimecardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Timecard"> | string
    userId?: StringWithAggregatesFilter<"Timecard"> | string
    jobId?: StringNullableWithAggregatesFilter<"Timecard"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"Timecard"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"Timecard"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"Timecard"> | Date | string | null
    totalHours?: FloatNullableWithAggregatesFilter<"Timecard"> | number | null
    wpsId?: StringNullableWithAggregatesFilter<"Timecard"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Timecard"> | string | null
    isApproved?: BoolWithAggregatesFilter<"Timecard"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Timecard"> | Date | string
  }

  export type WeldPassWhereInput = {
    AND?: WeldPassWhereInput | WeldPassWhereInput[]
    OR?: WeldPassWhereInput[]
    NOT?: WeldPassWhereInput | WeldPassWhereInput[]
    id?: StringFilter<"WeldPass"> | string
    timecardId?: StringFilter<"WeldPass"> | string
    welderId?: StringFilter<"WeldPass"> | string
    wpsId?: StringFilter<"WeldPass"> | string
    jointNumber?: StringNullableFilter<"WeldPass"> | string | null
    passNumber?: IntFilter<"WeldPass"> | number
    amps?: FloatNullableFilter<"WeldPass"> | number | null
    volts?: FloatNullableFilter<"WeldPass"> | number | null
    wireFeed?: FloatNullableFilter<"WeldPass"> | number | null
    travelSpeed?: FloatNullableFilter<"WeldPass"> | number | null
    notes?: StringNullableFilter<"WeldPass"> | string | null
    createdAt?: DateTimeFilter<"WeldPass"> | Date | string
    timecard?: XOR<TimecardScalarRelationFilter, TimecardWhereInput>
    welder?: XOR<UserScalarRelationFilter, UserWhereInput>
    wps?: XOR<WpsSpecScalarRelationFilter, WpsSpecWhereInput>
  }

  export type WeldPassOrderByWithRelationInput = {
    id?: SortOrder
    timecardId?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    jointNumber?: SortOrderInput | SortOrder
    passNumber?: SortOrder
    amps?: SortOrderInput | SortOrder
    volts?: SortOrderInput | SortOrder
    wireFeed?: SortOrderInput | SortOrder
    travelSpeed?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    timecard?: TimecardOrderByWithRelationInput
    welder?: UserOrderByWithRelationInput
    wps?: WpsSpecOrderByWithRelationInput
  }

  export type WeldPassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WeldPassWhereInput | WeldPassWhereInput[]
    OR?: WeldPassWhereInput[]
    NOT?: WeldPassWhereInput | WeldPassWhereInput[]
    timecardId?: StringFilter<"WeldPass"> | string
    welderId?: StringFilter<"WeldPass"> | string
    wpsId?: StringFilter<"WeldPass"> | string
    jointNumber?: StringNullableFilter<"WeldPass"> | string | null
    passNumber?: IntFilter<"WeldPass"> | number
    amps?: FloatNullableFilter<"WeldPass"> | number | null
    volts?: FloatNullableFilter<"WeldPass"> | number | null
    wireFeed?: FloatNullableFilter<"WeldPass"> | number | null
    travelSpeed?: FloatNullableFilter<"WeldPass"> | number | null
    notes?: StringNullableFilter<"WeldPass"> | string | null
    createdAt?: DateTimeFilter<"WeldPass"> | Date | string
    timecard?: XOR<TimecardScalarRelationFilter, TimecardWhereInput>
    welder?: XOR<UserScalarRelationFilter, UserWhereInput>
    wps?: XOR<WpsSpecScalarRelationFilter, WpsSpecWhereInput>
  }, "id">

  export type WeldPassOrderByWithAggregationInput = {
    id?: SortOrder
    timecardId?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    jointNumber?: SortOrderInput | SortOrder
    passNumber?: SortOrder
    amps?: SortOrderInput | SortOrder
    volts?: SortOrderInput | SortOrder
    wireFeed?: SortOrderInput | SortOrder
    travelSpeed?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WeldPassCountOrderByAggregateInput
    _avg?: WeldPassAvgOrderByAggregateInput
    _max?: WeldPassMaxOrderByAggregateInput
    _min?: WeldPassMinOrderByAggregateInput
    _sum?: WeldPassSumOrderByAggregateInput
  }

  export type WeldPassScalarWhereWithAggregatesInput = {
    AND?: WeldPassScalarWhereWithAggregatesInput | WeldPassScalarWhereWithAggregatesInput[]
    OR?: WeldPassScalarWhereWithAggregatesInput[]
    NOT?: WeldPassScalarWhereWithAggregatesInput | WeldPassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WeldPass"> | string
    timecardId?: StringWithAggregatesFilter<"WeldPass"> | string
    welderId?: StringWithAggregatesFilter<"WeldPass"> | string
    wpsId?: StringWithAggregatesFilter<"WeldPass"> | string
    jointNumber?: StringNullableWithAggregatesFilter<"WeldPass"> | string | null
    passNumber?: IntWithAggregatesFilter<"WeldPass"> | number
    amps?: FloatNullableWithAggregatesFilter<"WeldPass"> | number | null
    volts?: FloatNullableWithAggregatesFilter<"WeldPass"> | number | null
    wireFeed?: FloatNullableWithAggregatesFilter<"WeldPass"> | number | null
    travelSpeed?: FloatNullableWithAggregatesFilter<"WeldPass"> | number | null
    notes?: StringNullableWithAggregatesFilter<"WeldPass"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WeldPass"> | Date | string
  }

  export type WpsSpecWhereInput = {
    AND?: WpsSpecWhereInput | WpsSpecWhereInput[]
    OR?: WpsSpecWhereInput[]
    NOT?: WpsSpecWhereInput | WpsSpecWhereInput[]
    id?: StringFilter<"WpsSpec"> | string
    code?: StringFilter<"WpsSpec"> | string
    title?: StringFilter<"WpsSpec"> | string
    process?: StringFilter<"WpsSpec"> | string
    materialGroup?: StringFilter<"WpsSpec"> | string
    positions?: StringNullableListFilter<"WpsSpec">
    thickness?: StringNullableFilter<"WpsSpec"> | string | null
    pdfUrl?: StringNullableFilter<"WpsSpec"> | string | null
    isActive?: BoolFilter<"WpsSpec"> | boolean
    expiresAt?: DateTimeNullableFilter<"WpsSpec"> | Date | string | null
    createdAt?: DateTimeFilter<"WpsSpec"> | Date | string
    updatedAt?: DateTimeFilter<"WpsSpec"> | Date | string
    parameters?: JsonNullableFilter<"WpsSpec">
    pqrTests?: PqrTestListRelationFilter
    welderCerts?: WelderCertListRelationFilter
    timecards?: TimecardListRelationFilter
    weldPasses?: WeldPassListRelationFilter
  }

  export type WpsSpecOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    process?: SortOrder
    materialGroup?: SortOrder
    positions?: SortOrder
    thickness?: SortOrderInput | SortOrder
    pdfUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parameters?: SortOrderInput | SortOrder
    pqrTests?: PqrTestOrderByRelationAggregateInput
    welderCerts?: WelderCertOrderByRelationAggregateInput
    timecards?: TimecardOrderByRelationAggregateInput
    weldPasses?: WeldPassOrderByRelationAggregateInput
  }

  export type WpsSpecWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: WpsSpecWhereInput | WpsSpecWhereInput[]
    OR?: WpsSpecWhereInput[]
    NOT?: WpsSpecWhereInput | WpsSpecWhereInput[]
    title?: StringFilter<"WpsSpec"> | string
    process?: StringFilter<"WpsSpec"> | string
    materialGroup?: StringFilter<"WpsSpec"> | string
    positions?: StringNullableListFilter<"WpsSpec">
    thickness?: StringNullableFilter<"WpsSpec"> | string | null
    pdfUrl?: StringNullableFilter<"WpsSpec"> | string | null
    isActive?: BoolFilter<"WpsSpec"> | boolean
    expiresAt?: DateTimeNullableFilter<"WpsSpec"> | Date | string | null
    createdAt?: DateTimeFilter<"WpsSpec"> | Date | string
    updatedAt?: DateTimeFilter<"WpsSpec"> | Date | string
    parameters?: JsonNullableFilter<"WpsSpec">
    pqrTests?: PqrTestListRelationFilter
    welderCerts?: WelderCertListRelationFilter
    timecards?: TimecardListRelationFilter
    weldPasses?: WeldPassListRelationFilter
  }, "id" | "code">

  export type WpsSpecOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    process?: SortOrder
    materialGroup?: SortOrder
    positions?: SortOrder
    thickness?: SortOrderInput | SortOrder
    pdfUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parameters?: SortOrderInput | SortOrder
    _count?: WpsSpecCountOrderByAggregateInput
    _max?: WpsSpecMaxOrderByAggregateInput
    _min?: WpsSpecMinOrderByAggregateInput
  }

  export type WpsSpecScalarWhereWithAggregatesInput = {
    AND?: WpsSpecScalarWhereWithAggregatesInput | WpsSpecScalarWhereWithAggregatesInput[]
    OR?: WpsSpecScalarWhereWithAggregatesInput[]
    NOT?: WpsSpecScalarWhereWithAggregatesInput | WpsSpecScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WpsSpec"> | string
    code?: StringWithAggregatesFilter<"WpsSpec"> | string
    title?: StringWithAggregatesFilter<"WpsSpec"> | string
    process?: StringWithAggregatesFilter<"WpsSpec"> | string
    materialGroup?: StringWithAggregatesFilter<"WpsSpec"> | string
    positions?: StringNullableListFilter<"WpsSpec">
    thickness?: StringNullableWithAggregatesFilter<"WpsSpec"> | string | null
    pdfUrl?: StringNullableWithAggregatesFilter<"WpsSpec"> | string | null
    isActive?: BoolWithAggregatesFilter<"WpsSpec"> | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter<"WpsSpec"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WpsSpec"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WpsSpec"> | Date | string
    parameters?: JsonNullableWithAggregatesFilter<"WpsSpec">
  }

  export type PqrTestWhereInput = {
    AND?: PqrTestWhereInput | PqrTestWhereInput[]
    OR?: PqrTestWhereInput[]
    NOT?: PqrTestWhereInput | PqrTestWhereInput[]
    id?: StringFilter<"PqrTest"> | string
    wpsId?: StringFilter<"PqrTest"> | string
    testType?: StringFilter<"PqrTest"> | string
    result?: StringFilter<"PqrTest"> | string
    value?: FloatNullableFilter<"PqrTest"> | number | null
    unit?: StringNullableFilter<"PqrTest"> | string | null
    testDate?: DateTimeFilter<"PqrTest"> | Date | string
    labName?: StringNullableFilter<"PqrTest"> | string | null
    certUrl?: StringNullableFilter<"PqrTest"> | string | null
    createdAt?: DateTimeFilter<"PqrTest"> | Date | string
    wps?: XOR<WpsSpecScalarRelationFilter, WpsSpecWhereInput>
  }

  export type PqrTestOrderByWithRelationInput = {
    id?: SortOrder
    wpsId?: SortOrder
    testType?: SortOrder
    result?: SortOrder
    value?: SortOrderInput | SortOrder
    unit?: SortOrderInput | SortOrder
    testDate?: SortOrder
    labName?: SortOrderInput | SortOrder
    certUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    wps?: WpsSpecOrderByWithRelationInput
  }

  export type PqrTestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PqrTestWhereInput | PqrTestWhereInput[]
    OR?: PqrTestWhereInput[]
    NOT?: PqrTestWhereInput | PqrTestWhereInput[]
    wpsId?: StringFilter<"PqrTest"> | string
    testType?: StringFilter<"PqrTest"> | string
    result?: StringFilter<"PqrTest"> | string
    value?: FloatNullableFilter<"PqrTest"> | number | null
    unit?: StringNullableFilter<"PqrTest"> | string | null
    testDate?: DateTimeFilter<"PqrTest"> | Date | string
    labName?: StringNullableFilter<"PqrTest"> | string | null
    certUrl?: StringNullableFilter<"PqrTest"> | string | null
    createdAt?: DateTimeFilter<"PqrTest"> | Date | string
    wps?: XOR<WpsSpecScalarRelationFilter, WpsSpecWhereInput>
  }, "id">

  export type PqrTestOrderByWithAggregationInput = {
    id?: SortOrder
    wpsId?: SortOrder
    testType?: SortOrder
    result?: SortOrder
    value?: SortOrderInput | SortOrder
    unit?: SortOrderInput | SortOrder
    testDate?: SortOrder
    labName?: SortOrderInput | SortOrder
    certUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PqrTestCountOrderByAggregateInput
    _avg?: PqrTestAvgOrderByAggregateInput
    _max?: PqrTestMaxOrderByAggregateInput
    _min?: PqrTestMinOrderByAggregateInput
    _sum?: PqrTestSumOrderByAggregateInput
  }

  export type PqrTestScalarWhereWithAggregatesInput = {
    AND?: PqrTestScalarWhereWithAggregatesInput | PqrTestScalarWhereWithAggregatesInput[]
    OR?: PqrTestScalarWhereWithAggregatesInput[]
    NOT?: PqrTestScalarWhereWithAggregatesInput | PqrTestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PqrTest"> | string
    wpsId?: StringWithAggregatesFilter<"PqrTest"> | string
    testType?: StringWithAggregatesFilter<"PqrTest"> | string
    result?: StringWithAggregatesFilter<"PqrTest"> | string
    value?: FloatNullableWithAggregatesFilter<"PqrTest"> | number | null
    unit?: StringNullableWithAggregatesFilter<"PqrTest"> | string | null
    testDate?: DateTimeWithAggregatesFilter<"PqrTest"> | Date | string
    labName?: StringNullableWithAggregatesFilter<"PqrTest"> | string | null
    certUrl?: StringNullableWithAggregatesFilter<"PqrTest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PqrTest"> | Date | string
  }

  export type WelderCertWhereInput = {
    AND?: WelderCertWhereInput | WelderCertWhereInput[]
    OR?: WelderCertWhereInput[]
    NOT?: WelderCertWhereInput | WelderCertWhereInput[]
    id?: StringFilter<"WelderCert"> | string
    welderId?: StringFilter<"WelderCert"> | string
    wpsId?: StringFilter<"WelderCert"> | string
    certNumber?: StringFilter<"WelderCert"> | string
    issuedAt?: DateTimeFilter<"WelderCert"> | Date | string
    expiresAt?: DateTimeFilter<"WelderCert"> | Date | string
    isActive?: BoolFilter<"WelderCert"> | boolean
    certPdfUrl?: StringNullableFilter<"WelderCert"> | string | null
    createdAt?: DateTimeFilter<"WelderCert"> | Date | string
    welder?: XOR<UserScalarRelationFilter, UserWhereInput>
    wps?: XOR<WpsSpecScalarRelationFilter, WpsSpecWhereInput>
  }

  export type WelderCertOrderByWithRelationInput = {
    id?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    certNumber?: SortOrder
    issuedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    certPdfUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    welder?: UserOrderByWithRelationInput
    wps?: WpsSpecOrderByWithRelationInput
  }

  export type WelderCertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    certNumber?: string
    welderId_wpsId?: WelderCertWelderIdWpsIdCompoundUniqueInput
    AND?: WelderCertWhereInput | WelderCertWhereInput[]
    OR?: WelderCertWhereInput[]
    NOT?: WelderCertWhereInput | WelderCertWhereInput[]
    welderId?: StringFilter<"WelderCert"> | string
    wpsId?: StringFilter<"WelderCert"> | string
    issuedAt?: DateTimeFilter<"WelderCert"> | Date | string
    expiresAt?: DateTimeFilter<"WelderCert"> | Date | string
    isActive?: BoolFilter<"WelderCert"> | boolean
    certPdfUrl?: StringNullableFilter<"WelderCert"> | string | null
    createdAt?: DateTimeFilter<"WelderCert"> | Date | string
    welder?: XOR<UserScalarRelationFilter, UserWhereInput>
    wps?: XOR<WpsSpecScalarRelationFilter, WpsSpecWhereInput>
  }, "id" | "certNumber" | "welderId_wpsId">

  export type WelderCertOrderByWithAggregationInput = {
    id?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    certNumber?: SortOrder
    issuedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    certPdfUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WelderCertCountOrderByAggregateInput
    _max?: WelderCertMaxOrderByAggregateInput
    _min?: WelderCertMinOrderByAggregateInput
  }

  export type WelderCertScalarWhereWithAggregatesInput = {
    AND?: WelderCertScalarWhereWithAggregatesInput | WelderCertScalarWhereWithAggregatesInput[]
    OR?: WelderCertScalarWhereWithAggregatesInput[]
    NOT?: WelderCertScalarWhereWithAggregatesInput | WelderCertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WelderCert"> | string
    welderId?: StringWithAggregatesFilter<"WelderCert"> | string
    wpsId?: StringWithAggregatesFilter<"WelderCert"> | string
    certNumber?: StringWithAggregatesFilter<"WelderCert"> | string
    issuedAt?: DateTimeWithAggregatesFilter<"WelderCert"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"WelderCert"> | Date | string
    isActive?: BoolWithAggregatesFilter<"WelderCert"> | boolean
    certPdfUrl?: StringNullableWithAggregatesFilter<"WelderCert"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WelderCert"> | Date | string
  }

  export type InspectionWhereInput = {
    AND?: InspectionWhereInput | InspectionWhereInput[]
    OR?: InspectionWhereInput[]
    NOT?: InspectionWhereInput | InspectionWhereInput[]
    id?: StringFilter<"Inspection"> | string
    jobId?: StringNullableFilter<"Inspection"> | string | null
    inspectorId?: StringNullableFilter<"Inspection"> | string | null
    inspectionType?: EnumInspectionTypeFilter<"Inspection"> | $Enums.InspectionType
    jointNumbers?: StringNullableListFilter<"Inspection">
    result?: StringFilter<"Inspection"> | string
    notes?: StringNullableFilter<"Inspection"> | string | null
    reportUrl?: StringNullableFilter<"Inspection"> | string | null
    inspectedAt?: DateTimeFilter<"Inspection"> | Date | string
    createdAt?: DateTimeFilter<"Inspection"> | Date | string
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    inspector?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    weldLogs?: WeldLogListRelationFilter
    repairLogs?: RepairLogListRelationFilter
  }

  export type InspectionOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrderInput | SortOrder
    inspectorId?: SortOrderInput | SortOrder
    inspectionType?: SortOrder
    jointNumbers?: SortOrder
    result?: SortOrder
    notes?: SortOrderInput | SortOrder
    reportUrl?: SortOrderInput | SortOrder
    inspectedAt?: SortOrder
    createdAt?: SortOrder
    job?: JobOrderByWithRelationInput
    inspector?: UserOrderByWithRelationInput
    weldLogs?: WeldLogOrderByRelationAggregateInput
    repairLogs?: RepairLogOrderByRelationAggregateInput
  }

  export type InspectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InspectionWhereInput | InspectionWhereInput[]
    OR?: InspectionWhereInput[]
    NOT?: InspectionWhereInput | InspectionWhereInput[]
    jobId?: StringNullableFilter<"Inspection"> | string | null
    inspectorId?: StringNullableFilter<"Inspection"> | string | null
    inspectionType?: EnumInspectionTypeFilter<"Inspection"> | $Enums.InspectionType
    jointNumbers?: StringNullableListFilter<"Inspection">
    result?: StringFilter<"Inspection"> | string
    notes?: StringNullableFilter<"Inspection"> | string | null
    reportUrl?: StringNullableFilter<"Inspection"> | string | null
    inspectedAt?: DateTimeFilter<"Inspection"> | Date | string
    createdAt?: DateTimeFilter<"Inspection"> | Date | string
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    inspector?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    weldLogs?: WeldLogListRelationFilter
    repairLogs?: RepairLogListRelationFilter
  }, "id">

  export type InspectionOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrderInput | SortOrder
    inspectorId?: SortOrderInput | SortOrder
    inspectionType?: SortOrder
    jointNumbers?: SortOrder
    result?: SortOrder
    notes?: SortOrderInput | SortOrder
    reportUrl?: SortOrderInput | SortOrder
    inspectedAt?: SortOrder
    createdAt?: SortOrder
    _count?: InspectionCountOrderByAggregateInput
    _max?: InspectionMaxOrderByAggregateInput
    _min?: InspectionMinOrderByAggregateInput
  }

  export type InspectionScalarWhereWithAggregatesInput = {
    AND?: InspectionScalarWhereWithAggregatesInput | InspectionScalarWhereWithAggregatesInput[]
    OR?: InspectionScalarWhereWithAggregatesInput[]
    NOT?: InspectionScalarWhereWithAggregatesInput | InspectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Inspection"> | string
    jobId?: StringNullableWithAggregatesFilter<"Inspection"> | string | null
    inspectorId?: StringNullableWithAggregatesFilter<"Inspection"> | string | null
    inspectionType?: EnumInspectionTypeWithAggregatesFilter<"Inspection"> | $Enums.InspectionType
    jointNumbers?: StringNullableListFilter<"Inspection">
    result?: StringWithAggregatesFilter<"Inspection"> | string
    notes?: StringNullableWithAggregatesFilter<"Inspection"> | string | null
    reportUrl?: StringNullableWithAggregatesFilter<"Inspection"> | string | null
    inspectedAt?: DateTimeWithAggregatesFilter<"Inspection"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Inspection"> | Date | string
  }

  export type WeldLogWhereInput = {
    AND?: WeldLogWhereInput | WeldLogWhereInput[]
    OR?: WeldLogWhereInput[]
    NOT?: WeldLogWhereInput | WeldLogWhereInput[]
    id?: StringFilter<"WeldLog"> | string
    inspectionId?: StringFilter<"WeldLog"> | string
    weldNumber?: StringFilter<"WeldLog"> | string
    jointId?: StringNullableFilter<"WeldLog"> | string | null
    process?: StringFilter<"WeldLog"> | string
    position?: StringFilter<"WeldLog"> | string
    welderId?: StringNullableFilter<"WeldLog"> | string | null
    length?: FloatNullableFilter<"WeldLog"> | number | null
    defects?: StringNullableListFilter<"WeldLog">
    createdAt?: DateTimeFilter<"WeldLog"> | Date | string
    inspection?: XOR<InspectionScalarRelationFilter, InspectionWhereInput>
  }

  export type WeldLogOrderByWithRelationInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    jointId?: SortOrderInput | SortOrder
    process?: SortOrder
    position?: SortOrder
    welderId?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    defects?: SortOrder
    createdAt?: SortOrder
    inspection?: InspectionOrderByWithRelationInput
  }

  export type WeldLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WeldLogWhereInput | WeldLogWhereInput[]
    OR?: WeldLogWhereInput[]
    NOT?: WeldLogWhereInput | WeldLogWhereInput[]
    inspectionId?: StringFilter<"WeldLog"> | string
    weldNumber?: StringFilter<"WeldLog"> | string
    jointId?: StringNullableFilter<"WeldLog"> | string | null
    process?: StringFilter<"WeldLog"> | string
    position?: StringFilter<"WeldLog"> | string
    welderId?: StringNullableFilter<"WeldLog"> | string | null
    length?: FloatNullableFilter<"WeldLog"> | number | null
    defects?: StringNullableListFilter<"WeldLog">
    createdAt?: DateTimeFilter<"WeldLog"> | Date | string
    inspection?: XOR<InspectionScalarRelationFilter, InspectionWhereInput>
  }, "id">

  export type WeldLogOrderByWithAggregationInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    jointId?: SortOrderInput | SortOrder
    process?: SortOrder
    position?: SortOrder
    welderId?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    defects?: SortOrder
    createdAt?: SortOrder
    _count?: WeldLogCountOrderByAggregateInput
    _avg?: WeldLogAvgOrderByAggregateInput
    _max?: WeldLogMaxOrderByAggregateInput
    _min?: WeldLogMinOrderByAggregateInput
    _sum?: WeldLogSumOrderByAggregateInput
  }

  export type WeldLogScalarWhereWithAggregatesInput = {
    AND?: WeldLogScalarWhereWithAggregatesInput | WeldLogScalarWhereWithAggregatesInput[]
    OR?: WeldLogScalarWhereWithAggregatesInput[]
    NOT?: WeldLogScalarWhereWithAggregatesInput | WeldLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WeldLog"> | string
    inspectionId?: StringWithAggregatesFilter<"WeldLog"> | string
    weldNumber?: StringWithAggregatesFilter<"WeldLog"> | string
    jointId?: StringNullableWithAggregatesFilter<"WeldLog"> | string | null
    process?: StringWithAggregatesFilter<"WeldLog"> | string
    position?: StringWithAggregatesFilter<"WeldLog"> | string
    welderId?: StringNullableWithAggregatesFilter<"WeldLog"> | string | null
    length?: FloatNullableWithAggregatesFilter<"WeldLog"> | number | null
    defects?: StringNullableListFilter<"WeldLog">
    createdAt?: DateTimeWithAggregatesFilter<"WeldLog"> | Date | string
  }

  export type RepairLogWhereInput = {
    AND?: RepairLogWhereInput | RepairLogWhereInput[]
    OR?: RepairLogWhereInput[]
    NOT?: RepairLogWhereInput | RepairLogWhereInput[]
    id?: StringFilter<"RepairLog"> | string
    inspectionId?: StringFilter<"RepairLog"> | string
    weldNumber?: StringFilter<"RepairLog"> | string
    defectType?: StringFilter<"RepairLog"> | string
    repairMethod?: StringFilter<"RepairLog"> | string
    repairedBy?: StringNullableFilter<"RepairLog"> | string | null
    repairedAt?: DateTimeNullableFilter<"RepairLog"> | Date | string | null
    isCompleted?: BoolFilter<"RepairLog"> | boolean
    notes?: StringNullableFilter<"RepairLog"> | string | null
    createdAt?: DateTimeFilter<"RepairLog"> | Date | string
    inspection?: XOR<InspectionScalarRelationFilter, InspectionWhereInput>
  }

  export type RepairLogOrderByWithRelationInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    defectType?: SortOrder
    repairMethod?: SortOrder
    repairedBy?: SortOrderInput | SortOrder
    repairedAt?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    inspection?: InspectionOrderByWithRelationInput
  }

  export type RepairLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RepairLogWhereInput | RepairLogWhereInput[]
    OR?: RepairLogWhereInput[]
    NOT?: RepairLogWhereInput | RepairLogWhereInput[]
    inspectionId?: StringFilter<"RepairLog"> | string
    weldNumber?: StringFilter<"RepairLog"> | string
    defectType?: StringFilter<"RepairLog"> | string
    repairMethod?: StringFilter<"RepairLog"> | string
    repairedBy?: StringNullableFilter<"RepairLog"> | string | null
    repairedAt?: DateTimeNullableFilter<"RepairLog"> | Date | string | null
    isCompleted?: BoolFilter<"RepairLog"> | boolean
    notes?: StringNullableFilter<"RepairLog"> | string | null
    createdAt?: DateTimeFilter<"RepairLog"> | Date | string
    inspection?: XOR<InspectionScalarRelationFilter, InspectionWhereInput>
  }, "id">

  export type RepairLogOrderByWithAggregationInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    defectType?: SortOrder
    repairMethod?: SortOrder
    repairedBy?: SortOrderInput | SortOrder
    repairedAt?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RepairLogCountOrderByAggregateInput
    _max?: RepairLogMaxOrderByAggregateInput
    _min?: RepairLogMinOrderByAggregateInput
  }

  export type RepairLogScalarWhereWithAggregatesInput = {
    AND?: RepairLogScalarWhereWithAggregatesInput | RepairLogScalarWhereWithAggregatesInput[]
    OR?: RepairLogScalarWhereWithAggregatesInput[]
    NOT?: RepairLogScalarWhereWithAggregatesInput | RepairLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RepairLog"> | string
    inspectionId?: StringWithAggregatesFilter<"RepairLog"> | string
    weldNumber?: StringWithAggregatesFilter<"RepairLog"> | string
    defectType?: StringWithAggregatesFilter<"RepairLog"> | string
    repairMethod?: StringWithAggregatesFilter<"RepairLog"> | string
    repairedBy?: StringNullableWithAggregatesFilter<"RepairLog"> | string | null
    repairedAt?: DateTimeNullableWithAggregatesFilter<"RepairLog"> | Date | string | null
    isCompleted?: BoolWithAggregatesFilter<"RepairLog"> | boolean
    notes?: StringNullableWithAggregatesFilter<"RepairLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RepairLog"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    companyId?: StringNullableFilter<"Customer"> | string | null
    name?: StringFilter<"Customer"> | string
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    province?: StringNullableFilter<"Customer"> | string | null
    postal?: StringNullableFilter<"Customer"> | string | null
    gstHst?: StringNullableFilter<"Customer"> | string | null
    terms?: IntFilter<"Customer"> | number
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    jobs?: JobListRelationFilter
    quotes?: QuoteListRelationFilter
    invoices?: InvoiceListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    postal?: SortOrderInput | SortOrder
    gstHst?: SortOrderInput | SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    jobs?: JobOrderByRelationAggregateInput
    quotes?: QuoteOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    companyId?: StringNullableFilter<"Customer"> | string | null
    name?: StringFilter<"Customer"> | string
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    province?: StringNullableFilter<"Customer"> | string | null
    postal?: StringNullableFilter<"Customer"> | string | null
    gstHst?: StringNullableFilter<"Customer"> | string | null
    terms?: IntFilter<"Customer"> | number
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    jobs?: JobListRelationFilter
    quotes?: QuoteListRelationFilter
    invoices?: InvoiceListRelationFilter
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    postal?: SortOrderInput | SortOrder
    gstHst?: SortOrderInput | SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    companyId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    name?: StringWithAggregatesFilter<"Customer"> | string
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    city?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    province?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    postal?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    gstHst?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    terms?: IntWithAggregatesFilter<"Customer"> | number
    isActive?: BoolWithAggregatesFilter<"Customer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: StringFilter<"Vendor"> | string
    companyId?: StringNullableFilter<"Vendor"> | string | null
    name?: StringFilter<"Vendor"> | string
    email?: StringNullableFilter<"Vendor"> | string | null
    phone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    city?: StringNullableFilter<"Vendor"> | string | null
    province?: StringNullableFilter<"Vendor"> | string | null
    postal?: StringNullableFilter<"Vendor"> | string | null
    terms?: IntFilter<"Vendor"> | number
    isActive?: BoolFilter<"Vendor"> | boolean
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    purchaseOrders?: PurchaseOrderListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    postal?: SortOrderInput | SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    purchaseOrders?: PurchaseOrderOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    companyId?: StringNullableFilter<"Vendor"> | string | null
    name?: StringFilter<"Vendor"> | string
    email?: StringNullableFilter<"Vendor"> | string | null
    phone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    city?: StringNullableFilter<"Vendor"> | string | null
    province?: StringNullableFilter<"Vendor"> | string | null
    postal?: StringNullableFilter<"Vendor"> | string | null
    terms?: IntFilter<"Vendor"> | number
    isActive?: BoolFilter<"Vendor"> | boolean
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    purchaseOrders?: PurchaseOrderListRelationFilter
  }, "id">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    postal?: SortOrderInput | SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _avg?: VendorAvgOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
    _sum?: VendorSumOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vendor"> | string
    companyId?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    name?: StringWithAggregatesFilter<"Vendor"> | string
    email?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    address?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    city?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    province?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    postal?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    terms?: IntWithAggregatesFilter<"Vendor"> | number
    isActive?: BoolWithAggregatesFilter<"Vendor"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
  }

  export type PurchaseOrderWhereInput = {
    AND?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    OR?: PurchaseOrderWhereInput[]
    NOT?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    id?: StringFilter<"PurchaseOrder"> | string
    poNumber?: StringFilter<"PurchaseOrder"> | string
    vendorId?: StringFilter<"PurchaseOrder"> | string
    status?: EnumPoStatusFilter<"PurchaseOrder"> | $Enums.PoStatus
    orderDate?: DateTimeFilter<"PurchaseOrder"> | Date | string
    requiredBy?: DateTimeNullableFilter<"PurchaseOrder"> | Date | string | null
    subtotal?: FloatFilter<"PurchaseOrder"> | number
    tax?: FloatFilter<"PurchaseOrder"> | number
    total?: FloatFilter<"PurchaseOrder"> | number
    notes?: StringNullableFilter<"PurchaseOrder"> | string | null
    createdAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
    items?: PurchaseOrderItemListRelationFilter
  }

  export type PurchaseOrderOrderByWithRelationInput = {
    id?: SortOrder
    poNumber?: SortOrder
    vendorId?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    requiredBy?: SortOrderInput | SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendor?: VendorOrderByWithRelationInput
    items?: PurchaseOrderItemOrderByRelationAggregateInput
  }

  export type PurchaseOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    poNumber?: string
    AND?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    OR?: PurchaseOrderWhereInput[]
    NOT?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    vendorId?: StringFilter<"PurchaseOrder"> | string
    status?: EnumPoStatusFilter<"PurchaseOrder"> | $Enums.PoStatus
    orderDate?: DateTimeFilter<"PurchaseOrder"> | Date | string
    requiredBy?: DateTimeNullableFilter<"PurchaseOrder"> | Date | string | null
    subtotal?: FloatFilter<"PurchaseOrder"> | number
    tax?: FloatFilter<"PurchaseOrder"> | number
    total?: FloatFilter<"PurchaseOrder"> | number
    notes?: StringNullableFilter<"PurchaseOrder"> | string | null
    createdAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
    items?: PurchaseOrderItemListRelationFilter
  }, "id" | "poNumber">

  export type PurchaseOrderOrderByWithAggregationInput = {
    id?: SortOrder
    poNumber?: SortOrder
    vendorId?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    requiredBy?: SortOrderInput | SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PurchaseOrderCountOrderByAggregateInput
    _avg?: PurchaseOrderAvgOrderByAggregateInput
    _max?: PurchaseOrderMaxOrderByAggregateInput
    _min?: PurchaseOrderMinOrderByAggregateInput
    _sum?: PurchaseOrderSumOrderByAggregateInput
  }

  export type PurchaseOrderScalarWhereWithAggregatesInput = {
    AND?: PurchaseOrderScalarWhereWithAggregatesInput | PurchaseOrderScalarWhereWithAggregatesInput[]
    OR?: PurchaseOrderScalarWhereWithAggregatesInput[]
    NOT?: PurchaseOrderScalarWhereWithAggregatesInput | PurchaseOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    poNumber?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    vendorId?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    status?: EnumPoStatusWithAggregatesFilter<"PurchaseOrder"> | $Enums.PoStatus
    orderDate?: DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
    requiredBy?: DateTimeNullableWithAggregatesFilter<"PurchaseOrder"> | Date | string | null
    subtotal?: FloatWithAggregatesFilter<"PurchaseOrder"> | number
    tax?: FloatWithAggregatesFilter<"PurchaseOrder"> | number
    total?: FloatWithAggregatesFilter<"PurchaseOrder"> | number
    notes?: StringNullableWithAggregatesFilter<"PurchaseOrder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
  }

  export type PurchaseOrderItemWhereInput = {
    AND?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    OR?: PurchaseOrderItemWhereInput[]
    NOT?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    id?: StringFilter<"PurchaseOrderItem"> | string
    poId?: StringFilter<"PurchaseOrderItem"> | string
    materialId?: StringFilter<"PurchaseOrderItem"> | string
    description?: StringFilter<"PurchaseOrderItem"> | string
    quantity?: FloatFilter<"PurchaseOrderItem"> | number
    unit?: StringFilter<"PurchaseOrderItem"> | string
    unitCost?: FloatFilter<"PurchaseOrderItem"> | number
    totalCost?: FloatFilter<"PurchaseOrderItem"> | number
    qtyReceived?: FloatFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
    po?: XOR<PurchaseOrderScalarRelationFilter, PurchaseOrderWhereInput>
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
  }

  export type PurchaseOrderItemOrderByWithRelationInput = {
    id?: SortOrder
    poId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    qtyReceived?: SortOrder
    createdAt?: SortOrder
    po?: PurchaseOrderOrderByWithRelationInput
    material?: MaterialOrderByWithRelationInput
  }

  export type PurchaseOrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    OR?: PurchaseOrderItemWhereInput[]
    NOT?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    poId?: StringFilter<"PurchaseOrderItem"> | string
    materialId?: StringFilter<"PurchaseOrderItem"> | string
    description?: StringFilter<"PurchaseOrderItem"> | string
    quantity?: FloatFilter<"PurchaseOrderItem"> | number
    unit?: StringFilter<"PurchaseOrderItem"> | string
    unitCost?: FloatFilter<"PurchaseOrderItem"> | number
    totalCost?: FloatFilter<"PurchaseOrderItem"> | number
    qtyReceived?: FloatFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
    po?: XOR<PurchaseOrderScalarRelationFilter, PurchaseOrderWhereInput>
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
  }, "id">

  export type PurchaseOrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    poId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    qtyReceived?: SortOrder
    createdAt?: SortOrder
    _count?: PurchaseOrderItemCountOrderByAggregateInput
    _avg?: PurchaseOrderItemAvgOrderByAggregateInput
    _max?: PurchaseOrderItemMaxOrderByAggregateInput
    _min?: PurchaseOrderItemMinOrderByAggregateInput
    _sum?: PurchaseOrderItemSumOrderByAggregateInput
  }

  export type PurchaseOrderItemScalarWhereWithAggregatesInput = {
    AND?: PurchaseOrderItemScalarWhereWithAggregatesInput | PurchaseOrderItemScalarWhereWithAggregatesInput[]
    OR?: PurchaseOrderItemScalarWhereWithAggregatesInput[]
    NOT?: PurchaseOrderItemScalarWhereWithAggregatesInput | PurchaseOrderItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PurchaseOrderItem"> | string
    poId?: StringWithAggregatesFilter<"PurchaseOrderItem"> | string
    materialId?: StringWithAggregatesFilter<"PurchaseOrderItem"> | string
    description?: StringWithAggregatesFilter<"PurchaseOrderItem"> | string
    quantity?: FloatWithAggregatesFilter<"PurchaseOrderItem"> | number
    unit?: StringWithAggregatesFilter<"PurchaseOrderItem"> | string
    unitCost?: FloatWithAggregatesFilter<"PurchaseOrderItem"> | number
    totalCost?: FloatWithAggregatesFilter<"PurchaseOrderItem"> | number
    qtyReceived?: FloatWithAggregatesFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PurchaseOrderItem"> | Date | string
  }

  export type QuoteWhereInput = {
    AND?: QuoteWhereInput | QuoteWhereInput[]
    OR?: QuoteWhereInput[]
    NOT?: QuoteWhereInput | QuoteWhereInput[]
    id?: StringFilter<"Quote"> | string
    quoteNumber?: StringFilter<"Quote"> | string
    customerId?: StringFilter<"Quote"> | string
    title?: StringFilter<"Quote"> | string
    subtotal?: FloatFilter<"Quote"> | number
    tax?: FloatFilter<"Quote"> | number
    total?: FloatFilter<"Quote"> | number
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    status?: EnumQuoteStatusFilter<"Quote"> | $Enums.QuoteStatus
    createdAt?: DateTimeFilter<"Quote"> | Date | string
    updatedAt?: DateTimeFilter<"Quote"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    items?: QuoteItemListRelationFilter
    jobs?: JobListRelationFilter
  }

  export type QuoteOrderByWithRelationInput = {
    id?: SortOrder
    quoteNumber?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    items?: QuoteItemOrderByRelationAggregateInput
    jobs?: JobOrderByRelationAggregateInput
  }

  export type QuoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    quoteNumber?: string
    AND?: QuoteWhereInput | QuoteWhereInput[]
    OR?: QuoteWhereInput[]
    NOT?: QuoteWhereInput | QuoteWhereInput[]
    customerId?: StringFilter<"Quote"> | string
    title?: StringFilter<"Quote"> | string
    subtotal?: FloatFilter<"Quote"> | number
    tax?: FloatFilter<"Quote"> | number
    total?: FloatFilter<"Quote"> | number
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    status?: EnumQuoteStatusFilter<"Quote"> | $Enums.QuoteStatus
    createdAt?: DateTimeFilter<"Quote"> | Date | string
    updatedAt?: DateTimeFilter<"Quote"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    items?: QuoteItemListRelationFilter
    jobs?: JobListRelationFilter
  }, "id" | "quoteNumber">

  export type QuoteOrderByWithAggregationInput = {
    id?: SortOrder
    quoteNumber?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuoteCountOrderByAggregateInput
    _avg?: QuoteAvgOrderByAggregateInput
    _max?: QuoteMaxOrderByAggregateInput
    _min?: QuoteMinOrderByAggregateInput
    _sum?: QuoteSumOrderByAggregateInput
  }

  export type QuoteScalarWhereWithAggregatesInput = {
    AND?: QuoteScalarWhereWithAggregatesInput | QuoteScalarWhereWithAggregatesInput[]
    OR?: QuoteScalarWhereWithAggregatesInput[]
    NOT?: QuoteScalarWhereWithAggregatesInput | QuoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Quote"> | string
    quoteNumber?: StringWithAggregatesFilter<"Quote"> | string
    customerId?: StringWithAggregatesFilter<"Quote"> | string
    title?: StringWithAggregatesFilter<"Quote"> | string
    subtotal?: FloatWithAggregatesFilter<"Quote"> | number
    tax?: FloatWithAggregatesFilter<"Quote"> | number
    total?: FloatWithAggregatesFilter<"Quote"> | number
    validUntil?: DateTimeNullableWithAggregatesFilter<"Quote"> | Date | string | null
    status?: EnumQuoteStatusWithAggregatesFilter<"Quote"> | $Enums.QuoteStatus
    createdAt?: DateTimeWithAggregatesFilter<"Quote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Quote"> | Date | string
  }

  export type QuoteItemWhereInput = {
    AND?: QuoteItemWhereInput | QuoteItemWhereInput[]
    OR?: QuoteItemWhereInput[]
    NOT?: QuoteItemWhereInput | QuoteItemWhereInput[]
    id?: StringFilter<"QuoteItem"> | string
    quoteId?: StringFilter<"QuoteItem"> | string
    description?: StringFilter<"QuoteItem"> | string
    quantity?: FloatFilter<"QuoteItem"> | number
    unit?: StringFilter<"QuoteItem"> | string
    unitPrice?: FloatFilter<"QuoteItem"> | number
    totalPrice?: FloatFilter<"QuoteItem"> | number
    createdAt?: DateTimeFilter<"QuoteItem"> | Date | string
    quote?: XOR<QuoteScalarRelationFilter, QuoteWhereInput>
  }

  export type QuoteItemOrderByWithRelationInput = {
    id?: SortOrder
    quoteId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    quote?: QuoteOrderByWithRelationInput
  }

  export type QuoteItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuoteItemWhereInput | QuoteItemWhereInput[]
    OR?: QuoteItemWhereInput[]
    NOT?: QuoteItemWhereInput | QuoteItemWhereInput[]
    quoteId?: StringFilter<"QuoteItem"> | string
    description?: StringFilter<"QuoteItem"> | string
    quantity?: FloatFilter<"QuoteItem"> | number
    unit?: StringFilter<"QuoteItem"> | string
    unitPrice?: FloatFilter<"QuoteItem"> | number
    totalPrice?: FloatFilter<"QuoteItem"> | number
    createdAt?: DateTimeFilter<"QuoteItem"> | Date | string
    quote?: XOR<QuoteScalarRelationFilter, QuoteWhereInput>
  }, "id">

  export type QuoteItemOrderByWithAggregationInput = {
    id?: SortOrder
    quoteId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    _count?: QuoteItemCountOrderByAggregateInput
    _avg?: QuoteItemAvgOrderByAggregateInput
    _max?: QuoteItemMaxOrderByAggregateInput
    _min?: QuoteItemMinOrderByAggregateInput
    _sum?: QuoteItemSumOrderByAggregateInput
  }

  export type QuoteItemScalarWhereWithAggregatesInput = {
    AND?: QuoteItemScalarWhereWithAggregatesInput | QuoteItemScalarWhereWithAggregatesInput[]
    OR?: QuoteItemScalarWhereWithAggregatesInput[]
    NOT?: QuoteItemScalarWhereWithAggregatesInput | QuoteItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuoteItem"> | string
    quoteId?: StringWithAggregatesFilter<"QuoteItem"> | string
    description?: StringWithAggregatesFilter<"QuoteItem"> | string
    quantity?: FloatWithAggregatesFilter<"QuoteItem"> | number
    unit?: StringWithAggregatesFilter<"QuoteItem"> | string
    unitPrice?: FloatWithAggregatesFilter<"QuoteItem"> | number
    totalPrice?: FloatWithAggregatesFilter<"QuoteItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"QuoteItem"> | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: StringFilter<"Invoice"> | string
    invoiceNumber?: StringFilter<"Invoice"> | string
    customerId?: StringFilter<"Invoice"> | string
    jobId?: StringNullableFilter<"Invoice"> | string | null
    subtotal?: FloatFilter<"Invoice"> | number
    gstHst?: FloatFilter<"Invoice"> | number
    pst?: FloatFilter<"Invoice"> | number
    total?: FloatFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    issuedAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    dueAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    paidAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    items?: InvoiceItemListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    customerId?: SortOrder
    jobId?: SortOrderInput | SortOrder
    subtotal?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
    total?: SortOrder
    status?: SortOrder
    issuedAt?: SortOrderInput | SortOrder
    dueAt?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
    items?: InvoiceItemOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    invoiceNumber?: string
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    customerId?: StringFilter<"Invoice"> | string
    jobId?: StringNullableFilter<"Invoice"> | string | null
    subtotal?: FloatFilter<"Invoice"> | number
    gstHst?: FloatFilter<"Invoice"> | number
    pst?: FloatFilter<"Invoice"> | number
    total?: FloatFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    issuedAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    dueAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    paidAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    items?: InvoiceItemListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id" | "invoiceNumber">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    customerId?: SortOrder
    jobId?: SortOrderInput | SortOrder
    subtotal?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
    total?: SortOrder
    status?: SortOrder
    issuedAt?: SortOrderInput | SortOrder
    dueAt?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invoice"> | string
    invoiceNumber?: StringWithAggregatesFilter<"Invoice"> | string
    customerId?: StringWithAggregatesFilter<"Invoice"> | string
    jobId?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
    subtotal?: FloatWithAggregatesFilter<"Invoice"> | number
    gstHst?: FloatWithAggregatesFilter<"Invoice"> | number
    pst?: FloatWithAggregatesFilter<"Invoice"> | number
    total?: FloatWithAggregatesFilter<"Invoice"> | number
    status?: EnumInvoiceStatusWithAggregatesFilter<"Invoice"> | $Enums.InvoiceStatus
    issuedAt?: DateTimeNullableWithAggregatesFilter<"Invoice"> | Date | string | null
    dueAt?: DateTimeNullableWithAggregatesFilter<"Invoice"> | Date | string | null
    paidAt?: DateTimeNullableWithAggregatesFilter<"Invoice"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
  }

  export type InvoiceItemWhereInput = {
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    id?: StringFilter<"InvoiceItem"> | string
    invoiceId?: StringFilter<"InvoiceItem"> | string
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: FloatFilter<"InvoiceItem"> | number
    unit?: StringFilter<"InvoiceItem"> | string
    unitPrice?: FloatFilter<"InvoiceItem"> | number
    totalPrice?: FloatFilter<"InvoiceItem"> | number
    createdAt?: DateTimeFilter<"InvoiceItem"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }

  export type InvoiceItemOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type InvoiceItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    invoiceId?: StringFilter<"InvoiceItem"> | string
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: FloatFilter<"InvoiceItem"> | number
    unit?: StringFilter<"InvoiceItem"> | string
    unitPrice?: FloatFilter<"InvoiceItem"> | number
    totalPrice?: FloatFilter<"InvoiceItem"> | number
    createdAt?: DateTimeFilter<"InvoiceItem"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }, "id">

  export type InvoiceItemOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    _count?: InvoiceItemCountOrderByAggregateInput
    _avg?: InvoiceItemAvgOrderByAggregateInput
    _max?: InvoiceItemMaxOrderByAggregateInput
    _min?: InvoiceItemMinOrderByAggregateInput
    _sum?: InvoiceItemSumOrderByAggregateInput
  }

  export type InvoiceItemScalarWhereWithAggregatesInput = {
    AND?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    OR?: InvoiceItemScalarWhereWithAggregatesInput[]
    NOT?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InvoiceItem"> | string
    invoiceId?: StringWithAggregatesFilter<"InvoiceItem"> | string
    description?: StringWithAggregatesFilter<"InvoiceItem"> | string
    quantity?: FloatWithAggregatesFilter<"InvoiceItem"> | number
    unit?: StringWithAggregatesFilter<"InvoiceItem"> | string
    unitPrice?: FloatWithAggregatesFilter<"InvoiceItem"> | number
    totalPrice?: FloatWithAggregatesFilter<"InvoiceItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InvoiceItem"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    invoiceId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    reference?: StringNullableFilter<"Payment"> | string | null
    paidAt?: DateTimeFilter<"Payment"> | Date | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrderInput | SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    invoiceId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    reference?: StringNullableFilter<"Payment"> | string | null
    paidAt?: DateTimeFilter<"Payment"> | Date | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrderInput | SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    invoiceId?: StringWithAggregatesFilter<"Payment"> | string
    amount?: FloatWithAggregatesFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    reference?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    paidAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type EquipmentWhereInput = {
    AND?: EquipmentWhereInput | EquipmentWhereInput[]
    OR?: EquipmentWhereInput[]
    NOT?: EquipmentWhereInput | EquipmentWhereInput[]
    id?: StringFilter<"Equipment"> | string
    name?: StringFilter<"Equipment"> | string
    category?: EnumEquipmentTypeFilter<"Equipment"> | $Enums.EquipmentType
    manufacturer?: StringNullableFilter<"Equipment"> | string | null
    model?: StringNullableFilter<"Equipment"> | string | null
    serialNumber?: StringNullableFilter<"Equipment"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Equipment"> | Date | string | null
    isActive?: BoolFilter<"Equipment"> | boolean
    createdAt?: DateTimeFilter<"Equipment"> | Date | string
    serviceLogs?: ServiceLogListRelationFilter
  }

  export type EquipmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    serviceLogs?: ServiceLogOrderByRelationAggregateInput
  }

  export type EquipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EquipmentWhereInput | EquipmentWhereInput[]
    OR?: EquipmentWhereInput[]
    NOT?: EquipmentWhereInput | EquipmentWhereInput[]
    name?: StringFilter<"Equipment"> | string
    category?: EnumEquipmentTypeFilter<"Equipment"> | $Enums.EquipmentType
    manufacturer?: StringNullableFilter<"Equipment"> | string | null
    model?: StringNullableFilter<"Equipment"> | string | null
    serialNumber?: StringNullableFilter<"Equipment"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Equipment"> | Date | string | null
    isActive?: BoolFilter<"Equipment"> | boolean
    createdAt?: DateTimeFilter<"Equipment"> | Date | string
    serviceLogs?: ServiceLogListRelationFilter
  }, "id">

  export type EquipmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: EquipmentCountOrderByAggregateInput
    _max?: EquipmentMaxOrderByAggregateInput
    _min?: EquipmentMinOrderByAggregateInput
  }

  export type EquipmentScalarWhereWithAggregatesInput = {
    AND?: EquipmentScalarWhereWithAggregatesInput | EquipmentScalarWhereWithAggregatesInput[]
    OR?: EquipmentScalarWhereWithAggregatesInput[]
    NOT?: EquipmentScalarWhereWithAggregatesInput | EquipmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Equipment"> | string
    name?: StringWithAggregatesFilter<"Equipment"> | string
    category?: EnumEquipmentTypeWithAggregatesFilter<"Equipment"> | $Enums.EquipmentType
    manufacturer?: StringNullableWithAggregatesFilter<"Equipment"> | string | null
    model?: StringNullableWithAggregatesFilter<"Equipment"> | string | null
    serialNumber?: StringNullableWithAggregatesFilter<"Equipment"> | string | null
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"Equipment"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"Equipment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Equipment"> | Date | string
  }

  export type ServiceLogWhereInput = {
    AND?: ServiceLogWhereInput | ServiceLogWhereInput[]
    OR?: ServiceLogWhereInput[]
    NOT?: ServiceLogWhereInput | ServiceLogWhereInput[]
    id?: StringFilter<"ServiceLog"> | string
    equipmentId?: StringFilter<"ServiceLog"> | string
    serviceType?: EnumServiceTypeFilter<"ServiceLog"> | $Enums.ServiceType
    description?: StringFilter<"ServiceLog"> | string
    cost?: FloatNullableFilter<"ServiceLog"> | number | null
    servicedAt?: DateTimeFilter<"ServiceLog"> | Date | string
    nextDue?: DateTimeNullableFilter<"ServiceLog"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceLog"> | Date | string
    equipment?: XOR<EquipmentScalarRelationFilter, EquipmentWhereInput>
  }

  export type ServiceLogOrderByWithRelationInput = {
    id?: SortOrder
    equipmentId?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    cost?: SortOrderInput | SortOrder
    servicedAt?: SortOrder
    nextDue?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    equipment?: EquipmentOrderByWithRelationInput
  }

  export type ServiceLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceLogWhereInput | ServiceLogWhereInput[]
    OR?: ServiceLogWhereInput[]
    NOT?: ServiceLogWhereInput | ServiceLogWhereInput[]
    equipmentId?: StringFilter<"ServiceLog"> | string
    serviceType?: EnumServiceTypeFilter<"ServiceLog"> | $Enums.ServiceType
    description?: StringFilter<"ServiceLog"> | string
    cost?: FloatNullableFilter<"ServiceLog"> | number | null
    servicedAt?: DateTimeFilter<"ServiceLog"> | Date | string
    nextDue?: DateTimeNullableFilter<"ServiceLog"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceLog"> | Date | string
    equipment?: XOR<EquipmentScalarRelationFilter, EquipmentWhereInput>
  }, "id">

  export type ServiceLogOrderByWithAggregationInput = {
    id?: SortOrder
    equipmentId?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    cost?: SortOrderInput | SortOrder
    servicedAt?: SortOrder
    nextDue?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ServiceLogCountOrderByAggregateInput
    _avg?: ServiceLogAvgOrderByAggregateInput
    _max?: ServiceLogMaxOrderByAggregateInput
    _min?: ServiceLogMinOrderByAggregateInput
    _sum?: ServiceLogSumOrderByAggregateInput
  }

  export type ServiceLogScalarWhereWithAggregatesInput = {
    AND?: ServiceLogScalarWhereWithAggregatesInput | ServiceLogScalarWhereWithAggregatesInput[]
    OR?: ServiceLogScalarWhereWithAggregatesInput[]
    NOT?: ServiceLogScalarWhereWithAggregatesInput | ServiceLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceLog"> | string
    equipmentId?: StringWithAggregatesFilter<"ServiceLog"> | string
    serviceType?: EnumServiceTypeWithAggregatesFilter<"ServiceLog"> | $Enums.ServiceType
    description?: StringWithAggregatesFilter<"ServiceLog"> | string
    cost?: FloatNullableWithAggregatesFilter<"ServiceLog"> | number | null
    servicedAt?: DateTimeWithAggregatesFilter<"ServiceLog"> | Date | string
    nextDue?: DateTimeNullableWithAggregatesFilter<"ServiceLog"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceLog"> | Date | string
  }

  export type WorkOrderWhereInput = {
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    id?: StringFilter<"WorkOrder"> | string
    woNumber?: StringFilter<"WorkOrder"> | string
    jobId?: StringNullableFilter<"WorkOrder"> | string | null
    customerId?: StringNullableFilter<"WorkOrder"> | string | null
    title?: StringFilter<"WorkOrder"> | string
    description?: StringNullableFilter<"WorkOrder"> | string | null
    address?: StringFilter<"WorkOrder"> | string
    city?: StringFilter<"WorkOrder"> | string
    province?: StringFilter<"WorkOrder"> | string
    postal?: StringNullableFilter<"WorkOrder"> | string | null
    priority?: EnumPriorityFilter<"WorkOrder"> | $Enums.Priority
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    scheduledAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    truckTrips?: TruckTripListRelationFilter
  }

  export type WorkOrderOrderByWithRelationInput = {
    id?: SortOrder
    woNumber?: SortOrder
    jobId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
    truckTrips?: TruckTripOrderByRelationAggregateInput
  }

  export type WorkOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    woNumber?: string
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    jobId?: StringNullableFilter<"WorkOrder"> | string | null
    customerId?: StringNullableFilter<"WorkOrder"> | string | null
    title?: StringFilter<"WorkOrder"> | string
    description?: StringNullableFilter<"WorkOrder"> | string | null
    address?: StringFilter<"WorkOrder"> | string
    city?: StringFilter<"WorkOrder"> | string
    province?: StringFilter<"WorkOrder"> | string
    postal?: StringNullableFilter<"WorkOrder"> | string | null
    priority?: EnumPriorityFilter<"WorkOrder"> | $Enums.Priority
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    scheduledAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    truckTrips?: TruckTripListRelationFilter
  }, "id" | "woNumber">

  export type WorkOrderOrderByWithAggregationInput = {
    id?: SortOrder
    woNumber?: SortOrder
    jobId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkOrderCountOrderByAggregateInput
    _max?: WorkOrderMaxOrderByAggregateInput
    _min?: WorkOrderMinOrderByAggregateInput
  }

  export type WorkOrderScalarWhereWithAggregatesInput = {
    AND?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    OR?: WorkOrderScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkOrder"> | string
    woNumber?: StringWithAggregatesFilter<"WorkOrder"> | string
    jobId?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    customerId?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    title?: StringWithAggregatesFilter<"WorkOrder"> | string
    description?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    address?: StringWithAggregatesFilter<"WorkOrder"> | string
    city?: StringWithAggregatesFilter<"WorkOrder"> | string
    province?: StringWithAggregatesFilter<"WorkOrder"> | string
    postal?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    priority?: EnumPriorityWithAggregatesFilter<"WorkOrder"> | $Enums.Priority
    status?: EnumWorkOrderStatusWithAggregatesFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    scheduledAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
  }

  export type TruckTripWhereInput = {
    AND?: TruckTripWhereInput | TruckTripWhereInput[]
    OR?: TruckTripWhereInput[]
    NOT?: TruckTripWhereInput | TruckTripWhereInput[]
    id?: StringFilter<"TruckTrip"> | string
    workOrderId?: StringFilter<"TruckTrip"> | string
    driverId?: StringFilter<"TruckTrip"> | string
    truckId?: StringNullableFilter<"TruckTrip"> | string | null
    startTime?: DateTimeNullableFilter<"TruckTrip"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TruckTrip"> | Date | string | null
    odometerStart?: IntNullableFilter<"TruckTrip"> | number | null
    odometerEnd?: IntNullableFilter<"TruckTrip"> | number | null
    gpsStart?: JsonNullableFilter<"TruckTrip">
    gpsEnd?: JsonNullableFilter<"TruckTrip">
    photos?: StringNullableListFilter<"TruckTrip">
    signature?: StringNullableFilter<"TruckTrip"> | string | null
    notes?: StringNullableFilter<"TruckTrip"> | string | null
    createdAt?: DateTimeFilter<"TruckTrip"> | Date | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    driver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TruckTripOrderByWithRelationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    driverId?: SortOrder
    truckId?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    odometerStart?: SortOrderInput | SortOrder
    odometerEnd?: SortOrderInput | SortOrder
    gpsStart?: SortOrderInput | SortOrder
    gpsEnd?: SortOrderInput | SortOrder
    photos?: SortOrder
    signature?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
    driver?: UserOrderByWithRelationInput
  }

  export type TruckTripWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TruckTripWhereInput | TruckTripWhereInput[]
    OR?: TruckTripWhereInput[]
    NOT?: TruckTripWhereInput | TruckTripWhereInput[]
    workOrderId?: StringFilter<"TruckTrip"> | string
    driverId?: StringFilter<"TruckTrip"> | string
    truckId?: StringNullableFilter<"TruckTrip"> | string | null
    startTime?: DateTimeNullableFilter<"TruckTrip"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TruckTrip"> | Date | string | null
    odometerStart?: IntNullableFilter<"TruckTrip"> | number | null
    odometerEnd?: IntNullableFilter<"TruckTrip"> | number | null
    gpsStart?: JsonNullableFilter<"TruckTrip">
    gpsEnd?: JsonNullableFilter<"TruckTrip">
    photos?: StringNullableListFilter<"TruckTrip">
    signature?: StringNullableFilter<"TruckTrip"> | string | null
    notes?: StringNullableFilter<"TruckTrip"> | string | null
    createdAt?: DateTimeFilter<"TruckTrip"> | Date | string
    workOrder?: XOR<WorkOrderScalarRelationFilter, WorkOrderWhereInput>
    driver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TruckTripOrderByWithAggregationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    driverId?: SortOrder
    truckId?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    odometerStart?: SortOrderInput | SortOrder
    odometerEnd?: SortOrderInput | SortOrder
    gpsStart?: SortOrderInput | SortOrder
    gpsEnd?: SortOrderInput | SortOrder
    photos?: SortOrder
    signature?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TruckTripCountOrderByAggregateInput
    _avg?: TruckTripAvgOrderByAggregateInput
    _max?: TruckTripMaxOrderByAggregateInput
    _min?: TruckTripMinOrderByAggregateInput
    _sum?: TruckTripSumOrderByAggregateInput
  }

  export type TruckTripScalarWhereWithAggregatesInput = {
    AND?: TruckTripScalarWhereWithAggregatesInput | TruckTripScalarWhereWithAggregatesInput[]
    OR?: TruckTripScalarWhereWithAggregatesInput[]
    NOT?: TruckTripScalarWhereWithAggregatesInput | TruckTripScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TruckTrip"> | string
    workOrderId?: StringWithAggregatesFilter<"TruckTrip"> | string
    driverId?: StringWithAggregatesFilter<"TruckTrip"> | string
    truckId?: StringNullableWithAggregatesFilter<"TruckTrip"> | string | null
    startTime?: DateTimeNullableWithAggregatesFilter<"TruckTrip"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"TruckTrip"> | Date | string | null
    odometerStart?: IntNullableWithAggregatesFilter<"TruckTrip"> | number | null
    odometerEnd?: IntNullableWithAggregatesFilter<"TruckTrip"> | number | null
    gpsStart?: JsonNullableWithAggregatesFilter<"TruckTrip">
    gpsEnd?: JsonNullableWithAggregatesFilter<"TruckTrip">
    photos?: StringNullableListFilter<"TruckTrip">
    signature?: StringNullableWithAggregatesFilter<"TruckTrip"> | string | null
    notes?: StringNullableWithAggregatesFilter<"TruckTrip"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TruckTrip"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    permissions: JsonNullValueInput | InputJsonValue
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    permissions: JsonNullValueInput | InputJsonValue
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    users?: UserCreateNestedManyWithoutCompanyInput
    customers?: CustomerCreateNestedManyWithoutCompanyInput
    vendors?: VendorCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    customers?: CustomerUncheckedCreateNestedManyWithoutCompanyInput
    vendors?: VendorUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutCompanyNestedInput
    customers?: CustomerUpdateManyWithoutCompanyNestedInput
    vendors?: VendorUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutCompanyNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobPhaseCreateInput = {
    id?: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutPhasesInput
    tasks?: TaskCreateNestedManyWithoutPhaseInput
  }

  export type JobPhaseUncheckedCreateInput = {
    id?: string
    jobId: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type JobPhaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutPhasesNestedInput
    tasks?: TaskUpdateManyWithoutPhaseNestedInput
  }

  export type JobPhaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type JobPhaseCreateManyInput = {
    id?: string
    jobId: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobPhaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobPhaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: JobPhaseCreateNestedOneWithoutTasksInput
    timecards?: TimecardCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    phaseId: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timecards?: TimecardUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: JobPhaseUpdateOneRequiredWithoutTasksNestedInput
    timecards?: TimecardUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timecards?: TimecardUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    phaseId: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DrawingCreateInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    revision?: string
    isApproved?: boolean
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutDrawingsInput
  }

  export type DrawingUncheckedCreateInput = {
    id?: string
    jobId: string
    filename: string
    fileUrl: string
    fileType: string
    revision?: string
    isApproved?: boolean
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
  }

  export type DrawingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    revision?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutDrawingsNestedInput
  }

  export type DrawingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    revision?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DrawingCreateManyInput = {
    id?: string
    jobId: string
    filename: string
    fileUrl: string
    fileType: string
    revision?: string
    isApproved?: boolean
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
  }

  export type DrawingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    revision?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DrawingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    revision?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemCreateInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutBomItemsInput
    material: MaterialCreateNestedOneWithoutBomItemsInput
  }

  export type BomItemUncheckedCreateInput = {
    id?: string
    jobId: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
  }

  export type BomItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutBomItemsNestedInput
    material?: MaterialUpdateOneRequiredWithoutBomItemsNestedInput
  }

  export type BomItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemCreateManyInput = {
    id?: string
    jobId: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
  }

  export type BomItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialCreateInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemCreateNestedManyWithoutMaterialInput
    heatBatches?: HeatBatchCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemUncheckedCreateNestedManyWithoutMaterialInput
    heatBatches?: HeatBatchUncheckedCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementUncheckedCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUpdateManyWithoutMaterialNestedInput
    heatBatches?: HeatBatchUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUncheckedUpdateManyWithoutMaterialNestedInput
    heatBatches?: HeatBatchUncheckedUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUncheckedUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialCreateManyInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeatBatchCreateInput = {
    id?: string
    heatNumber: string
    mtrUrl?: string | null
    quantity: number
    unit: string
    receivedAt: Date | string
    createdAt?: Date | string
    material: MaterialCreateNestedOneWithoutHeatBatchesInput
  }

  export type HeatBatchUncheckedCreateInput = {
    id?: string
    materialId: string
    heatNumber: string
    mtrUrl?: string | null
    quantity: number
    unit: string
    receivedAt: Date | string
    createdAt?: Date | string
  }

  export type HeatBatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    heatNumber?: StringFieldUpdateOperationsInput | string
    mtrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: MaterialUpdateOneRequiredWithoutHeatBatchesNestedInput
  }

  export type HeatBatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    heatNumber?: StringFieldUpdateOperationsInput | string
    mtrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeatBatchCreateManyInput = {
    id?: string
    materialId: string
    heatNumber: string
    mtrUrl?: string | null
    quantity: number
    unit: string
    receivedAt: Date | string
    createdAt?: Date | string
  }

  export type HeatBatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    heatNumber?: StringFieldUpdateOperationsInput | string
    mtrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeatBatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    heatNumber?: StringFieldUpdateOperationsInput | string
    mtrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockLocationCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    movementsFrom?: StockMovementCreateNestedManyWithoutFromLocationInput
    movementsTo?: StockMovementCreateNestedManyWithoutToLocationInput
  }

  export type StockLocationUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    movementsFrom?: StockMovementUncheckedCreateNestedManyWithoutFromLocationInput
    movementsTo?: StockMovementUncheckedCreateNestedManyWithoutToLocationInput
  }

  export type StockLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    movementsFrom?: StockMovementUpdateManyWithoutFromLocationNestedInput
    movementsTo?: StockMovementUpdateManyWithoutToLocationNestedInput
  }

  export type StockLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    movementsFrom?: StockMovementUncheckedUpdateManyWithoutFromLocationNestedInput
    movementsTo?: StockMovementUncheckedUpdateManyWithoutToLocationNestedInput
  }

  export type StockLocationCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
  }

  export type StockLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StockLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StockMovementCreateInput = {
    id?: string
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    material: MaterialCreateNestedOneWithoutStockMovesInput
    fromLocation?: StockLocationCreateNestedOneWithoutMovementsFromInput
    toLocation?: StockLocationCreateNestedOneWithoutMovementsToInput
  }

  export type StockMovementUncheckedCreateInput = {
    id?: string
    materialId: string
    fromLocationId?: string | null
    toLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type StockMovementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: MaterialUpdateOneRequiredWithoutStockMovesNestedInput
    fromLocation?: StockLocationUpdateOneWithoutMovementsFromNestedInput
    toLocation?: StockLocationUpdateOneWithoutMovementsToNestedInput
  }

  export type StockMovementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    fromLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    toLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementCreateManyInput = {
    id?: string
    materialId: string
    fromLocationId?: string | null
    toLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type StockMovementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    fromLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    toLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimecardCreateInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimecardsInput
    job?: JobCreateNestedOneWithoutTimecardsInput
    task?: TaskCreateNestedOneWithoutTimecardsInput
    wps?: WpsSpecCreateNestedOneWithoutTimecardsInput
    weldPasses?: WeldPassCreateNestedManyWithoutTimecardInput
  }

  export type TimecardUncheckedCreateInput = {
    id?: string
    userId: string
    jobId?: string | null
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutTimecardInput
  }

  export type TimecardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimecardsNestedInput
    job?: JobUpdateOneWithoutTimecardsNestedInput
    task?: TaskUpdateOneWithoutTimecardsNestedInput
    wps?: WpsSpecUpdateOneWithoutTimecardsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldPasses?: WeldPassUncheckedUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardCreateManyInput = {
    id?: string
    userId: string
    jobId?: string | null
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
  }

  export type TimecardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimecardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassCreateInput = {
    id?: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
    timecard: TimecardCreateNestedOneWithoutWeldPassesInput
    welder: UserCreateNestedOneWithoutWeldPassesInput
    wps: WpsSpecCreateNestedOneWithoutWeldPassesInput
  }

  export type WeldPassUncheckedCreateInput = {
    id?: string
    timecardId: string
    welderId: string
    wpsId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type WeldPassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timecard?: TimecardUpdateOneRequiredWithoutWeldPassesNestedInput
    welder?: UserUpdateOneRequiredWithoutWeldPassesNestedInput
    wps?: WpsSpecUpdateOneRequiredWithoutWeldPassesNestedInput
  }

  export type WeldPassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timecardId?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassCreateManyInput = {
    id?: string
    timecardId: string
    welderId: string
    wpsId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type WeldPassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    timecardId?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WpsSpecCreateInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestCreateNestedManyWithoutWpsInput
    welderCerts?: WelderCertCreateNestedManyWithoutWpsInput
    timecards?: TimecardCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecUncheckedCreateInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedCreateNestedManyWithoutWpsInput
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWpsInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUpdateManyWithoutWpsNestedInput
    welderCerts?: WelderCertUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWpsNestedInput
  }

  export type WpsSpecUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedUpdateManyWithoutWpsNestedInput
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWpsNestedInput
  }

  export type WpsSpecCreateManyInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WpsSpecUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WpsSpecUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PqrTestCreateInput = {
    id?: string
    testType: string
    result: string
    value?: number | null
    unit?: string | null
    testDate: Date | string
    labName?: string | null
    certUrl?: string | null
    createdAt?: Date | string
    wps: WpsSpecCreateNestedOneWithoutPqrTestsInput
  }

  export type PqrTestUncheckedCreateInput = {
    id?: string
    wpsId: string
    testType: string
    result: string
    value?: number | null
    unit?: string | null
    testDate: Date | string
    labName?: string | null
    certUrl?: string | null
    createdAt?: Date | string
  }

  export type PqrTestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    testType?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    testDate?: DateTimeFieldUpdateOperationsInput | Date | string
    labName?: NullableStringFieldUpdateOperationsInput | string | null
    certUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wps?: WpsSpecUpdateOneRequiredWithoutPqrTestsNestedInput
  }

  export type PqrTestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    testType?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    testDate?: DateTimeFieldUpdateOperationsInput | Date | string
    labName?: NullableStringFieldUpdateOperationsInput | string | null
    certUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PqrTestCreateManyInput = {
    id?: string
    wpsId: string
    testType: string
    result: string
    value?: number | null
    unit?: string | null
    testDate: Date | string
    labName?: string | null
    certUrl?: string | null
    createdAt?: Date | string
  }

  export type PqrTestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    testType?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    testDate?: DateTimeFieldUpdateOperationsInput | Date | string
    labName?: NullableStringFieldUpdateOperationsInput | string | null
    certUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PqrTestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    testType?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    testDate?: DateTimeFieldUpdateOperationsInput | Date | string
    labName?: NullableStringFieldUpdateOperationsInput | string | null
    certUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelderCertCreateInput = {
    id?: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
    welder: UserCreateNestedOneWithoutWelderCertsInput
    wps: WpsSpecCreateNestedOneWithoutWelderCertsInput
  }

  export type WelderCertUncheckedCreateInput = {
    id?: string
    welderId: string
    wpsId: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
  }

  export type WelderCertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welder?: UserUpdateOneRequiredWithoutWelderCertsNestedInput
    wps?: WpsSpecUpdateOneRequiredWithoutWelderCertsNestedInput
  }

  export type WelderCertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelderCertCreateManyInput = {
    id?: string
    welderId: string
    wpsId: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
  }

  export type WelderCertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelderCertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspectionCreateInput = {
    id?: string
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    job?: JobCreateNestedOneWithoutInspectionInput
    inspector?: UserCreateNestedOneWithoutInspectionsInput
    weldLogs?: WeldLogCreateNestedManyWithoutInspectionInput
    repairLogs?: RepairLogCreateNestedManyWithoutInspectionInput
  }

  export type InspectionUncheckedCreateInput = {
    id?: string
    jobId?: string | null
    inspectorId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    weldLogs?: WeldLogUncheckedCreateNestedManyWithoutInspectionInput
    repairLogs?: RepairLogUncheckedCreateNestedManyWithoutInspectionInput
  }

  export type InspectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutInspectionNestedInput
    inspector?: UserUpdateOneWithoutInspectionsNestedInput
    weldLogs?: WeldLogUpdateManyWithoutInspectionNestedInput
    repairLogs?: RepairLogUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectorId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldLogs?: WeldLogUncheckedUpdateManyWithoutInspectionNestedInput
    repairLogs?: RepairLogUncheckedUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionCreateManyInput = {
    id?: string
    jobId?: string | null
    inspectorId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
  }

  export type InspectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectorId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldLogCreateInput = {
    id?: string
    weldNumber: string
    jointId?: string | null
    process: string
    position: string
    welderId?: string | null
    length?: number | null
    defects?: WeldLogCreatedefectsInput | string[]
    createdAt?: Date | string
    inspection: InspectionCreateNestedOneWithoutWeldLogsInput
  }

  export type WeldLogUncheckedCreateInput = {
    id?: string
    inspectionId: string
    weldNumber: string
    jointId?: string | null
    process: string
    position: string
    welderId?: string | null
    length?: number | null
    defects?: WeldLogCreatedefectsInput | string[]
    createdAt?: Date | string
  }

  export type WeldLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    jointId?: NullableStringFieldUpdateOperationsInput | string | null
    process?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    welderId?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: WeldLogUpdatedefectsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inspection?: InspectionUpdateOneRequiredWithoutWeldLogsNestedInput
  }

  export type WeldLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionId?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    jointId?: NullableStringFieldUpdateOperationsInput | string | null
    process?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    welderId?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: WeldLogUpdatedefectsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldLogCreateManyInput = {
    id?: string
    inspectionId: string
    weldNumber: string
    jointId?: string | null
    process: string
    position: string
    welderId?: string | null
    length?: number | null
    defects?: WeldLogCreatedefectsInput | string[]
    createdAt?: Date | string
  }

  export type WeldLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    jointId?: NullableStringFieldUpdateOperationsInput | string | null
    process?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    welderId?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: WeldLogUpdatedefectsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionId?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    jointId?: NullableStringFieldUpdateOperationsInput | string | null
    process?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    welderId?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: WeldLogUpdatedefectsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairLogCreateInput = {
    id?: string
    weldNumber: string
    defectType: string
    repairMethod: string
    repairedBy?: string | null
    repairedAt?: Date | string | null
    isCompleted?: boolean
    notes?: string | null
    createdAt?: Date | string
    inspection: InspectionCreateNestedOneWithoutRepairLogsInput
  }

  export type RepairLogUncheckedCreateInput = {
    id?: string
    inspectionId: string
    weldNumber: string
    defectType: string
    repairMethod: string
    repairedBy?: string | null
    repairedAt?: Date | string | null
    isCompleted?: boolean
    notes?: string | null
    createdAt?: Date | string
  }

  export type RepairLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    defectType?: StringFieldUpdateOperationsInput | string
    repairMethod?: StringFieldUpdateOperationsInput | string
    repairedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repairedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inspection?: InspectionUpdateOneRequiredWithoutRepairLogsNestedInput
  }

  export type RepairLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionId?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    defectType?: StringFieldUpdateOperationsInput | string
    repairMethod?: StringFieldUpdateOperationsInput | string
    repairedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repairedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairLogCreateManyInput = {
    id?: string
    inspectionId: string
    weldNumber: string
    defectType: string
    repairMethod: string
    repairedBy?: string | null
    repairedAt?: Date | string | null
    isCompleted?: boolean
    notes?: string | null
    createdAt?: Date | string
  }

  export type RepairLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    defectType?: StringFieldUpdateOperationsInput | string
    repairMethod?: StringFieldUpdateOperationsInput | string
    repairedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repairedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionId?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    defectType?: StringFieldUpdateOperationsInput | string
    repairMethod?: StringFieldUpdateOperationsInput | string
    repairedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repairedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    company?: CompanyCreateNestedOneWithoutCustomersInput
    jobs?: JobCreateNestedManyWithoutCustomerInput
    quotes?: QuoteCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutCustomerInput
    quotes?: QuoteUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutCustomersNestedInput
    jobs?: JobUpdateManyWithoutCustomerNestedInput
    quotes?: QuoteUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutCustomerNestedInput
    quotes?: QuoteUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorCreateInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    company?: CompanyCreateNestedOneWithoutVendorsInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutVendorsNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderCreateInput = {
    id?: string
    poNumber: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor: VendorCreateNestedOneWithoutPurchaseOrdersInput
    items?: PurchaseOrderItemCreateNestedManyWithoutPoInput
  }

  export type PurchaseOrderUncheckedCreateInput = {
    id?: string
    poNumber: string
    vendorId: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PurchaseOrderItemUncheckedCreateNestedManyWithoutPoInput
  }

  export type PurchaseOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutPurchaseOrdersNestedInput
    items?: PurchaseOrderItemUpdateManyWithoutPoNestedInput
  }

  export type PurchaseOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PurchaseOrderItemUncheckedUpdateManyWithoutPoNestedInput
  }

  export type PurchaseOrderCreateManyInput = {
    id?: string
    poNumber: string
    vendorId: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemCreateInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
    po: PurchaseOrderCreateNestedOneWithoutItemsInput
    material: MaterialCreateNestedOneWithoutPoItemsInput
  }

  export type PurchaseOrderItemUncheckedCreateInput = {
    id?: string
    poId: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
  }

  export type PurchaseOrderItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    po?: PurchaseOrderUpdateOneRequiredWithoutItemsNestedInput
    material?: MaterialUpdateOneRequiredWithoutPoItemsNestedInput
  }

  export type PurchaseOrderItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    poId?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemCreateManyInput = {
    id?: string
    poId: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
  }

  export type PurchaseOrderItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    poId?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteCreateInput = {
    id?: string
    quoteNumber: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutQuotesInput
    items?: QuoteItemCreateNestedManyWithoutQuoteInput
    jobs?: JobCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateInput = {
    id?: string
    quoteNumber: string
    customerId: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: QuoteItemUncheckedCreateNestedManyWithoutQuoteInput
    jobs?: JobUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutQuotesNestedInput
    items?: QuoteItemUpdateManyWithoutQuoteNestedInput
    jobs?: JobUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: QuoteItemUncheckedUpdateManyWithoutQuoteNestedInput
    jobs?: JobUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteCreateManyInput = {
    id?: string
    quoteNumber: string
    customerId: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteItemCreateInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    quote: QuoteCreateNestedOneWithoutItemsInput
  }

  export type QuoteItemUncheckedCreateInput = {
    id?: string
    quoteId: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type QuoteItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quote?: QuoteUpdateOneRequiredWithoutItemsNestedInput
  }

  export type QuoteItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteItemCreateManyInput = {
    id?: string
    quoteId: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type QuoteItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    id?: string
    invoiceNumber: string
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    job?: JobCreateNestedOneWithoutInvoicesInput
    items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: string
    invoiceNumber: string
    customerId: string
    jobId?: string | null
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    job?: JobUpdateOneWithoutInvoicesNestedInput
    items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: string
    invoiceNumber: string
    customerId: string
    jobId?: string | null
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutItemsInput
  }

  export type InvoiceItemUncheckedCreateInput = {
    id?: string
    invoiceId: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type InvoiceItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutItemsNestedInput
  }

  export type InvoiceItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateManyInput = {
    id?: string
    invoiceId: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type InvoiceItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id?: string
    amount: number
    paymentMethod: $Enums.PaymentMethod
    reference?: string | null
    paidAt?: Date | string
    createdAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    invoiceId: string
    amount: number
    paymentMethod: $Enums.PaymentMethod
    reference?: string | null
    paidAt?: Date | string
    createdAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    invoiceId: string
    amount: number
    paymentMethod: $Enums.PaymentMethod
    reference?: string | null
    paidAt?: Date | string
    createdAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentCreateInput = {
    id?: string
    name: string
    category: $Enums.EquipmentType
    manufacturer?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    serviceLogs?: ServiceLogCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUncheckedCreateInput = {
    id?: string
    name: string
    category: $Enums.EquipmentType
    manufacturer?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    serviceLogs?: ServiceLogUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumEquipmentTypeFieldUpdateOperationsInput | $Enums.EquipmentType
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceLogs?: ServiceLogUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumEquipmentTypeFieldUpdateOperationsInput | $Enums.EquipmentType
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceLogs?: ServiceLogUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentCreateManyInput = {
    id?: string
    name: string
    category: $Enums.EquipmentType
    manufacturer?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type EquipmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumEquipmentTypeFieldUpdateOperationsInput | $Enums.EquipmentType
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumEquipmentTypeFieldUpdateOperationsInput | $Enums.EquipmentType
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceLogCreateInput = {
    id?: string
    serviceType: $Enums.ServiceType
    description: string
    cost?: number | null
    servicedAt: Date | string
    nextDue?: Date | string | null
    createdAt?: Date | string
    equipment: EquipmentCreateNestedOneWithoutServiceLogsInput
  }

  export type ServiceLogUncheckedCreateInput = {
    id?: string
    equipmentId: string
    serviceType: $Enums.ServiceType
    description: string
    cost?: number | null
    servicedAt: Date | string
    nextDue?: Date | string | null
    createdAt?: Date | string
  }

  export type ServiceLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    servicedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUpdateOneRequiredWithoutServiceLogsNestedInput
  }

  export type ServiceLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    servicedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceLogCreateManyInput = {
    id?: string
    equipmentId: string
    serviceType: $Enums.ServiceType
    description: string
    cost?: number | null
    servicedAt: Date | string
    nextDue?: Date | string | null
    createdAt?: Date | string
  }

  export type ServiceLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    servicedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    servicedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderCreateInput = {
    id?: string
    woNumber: string
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job?: JobCreateNestedOneWithoutWorkOrdersInput
    truckTrips?: TruckTripCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateInput = {
    id?: string
    woNumber: string
    jobId?: string | null
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutWorkOrdersNestedInput
    truckTrips?: TruckTripUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckTrips?: TruckTripUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderCreateManyInput = {
    id?: string
    woNumber: string
    jobId?: string | null
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckTripCreateInput = {
    id?: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutTruckTripsInput
    driver: UserCreateNestedOneWithoutTruckTripsInput
  }

  export type TruckTripUncheckedCreateInput = {
    id?: string
    workOrderId: string
    driverId: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type TruckTripUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutTruckTripsNestedInput
    driver?: UserUpdateOneRequiredWithoutTruckTripsNestedInput
  }

  export type TruckTripUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    driverId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckTripCreateManyInput = {
    id?: string
    workOrderId: string
    driverId: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type TruckTripUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckTripUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    driverId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WelderCertListRelationFilter = {
    every?: WelderCertWhereInput
    some?: WelderCertWhereInput
    none?: WelderCertWhereInput
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type CompanyNullableScalarRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type TimecardListRelationFilter = {
    every?: TimecardWhereInput
    some?: TimecardWhereInput
    none?: TimecardWhereInput
  }

  export type WeldPassListRelationFilter = {
    every?: WeldPassWhereInput
    some?: WeldPassWhereInput
    none?: WeldPassWhereInput
  }

  export type InspectionListRelationFilter = {
    every?: InspectionWhereInput
    some?: InspectionWhereInput
    none?: InspectionWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type TruckTripListRelationFilter = {
    every?: TruckTripWhereInput
    some?: TruckTripWhereInput
    none?: TruckTripWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WelderCertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimecardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeldPassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InspectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TruckTripOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    roleId?: SortOrder
    companyId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    roleId?: SortOrder
    companyId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    roleId?: SortOrder
    companyId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    permissions?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type VendorListRelationFilter = {
    every?: VendorWhereInput
    some?: VendorWhereInput
    none?: VendorWhereInput
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type QuoteNullableScalarRelationFilter = {
    is?: QuoteWhereInput | null
    isNot?: QuoteWhereInput | null
  }

  export type JobPhaseListRelationFilter = {
    every?: JobPhaseWhereInput
    some?: JobPhaseWhereInput
    none?: JobPhaseWhereInput
  }

  export type DrawingListRelationFilter = {
    every?: DrawingWhereInput
    some?: DrawingWhereInput
    none?: DrawingWhereInput
  }

  export type BomItemListRelationFilter = {
    every?: BomItemWhereInput
    some?: BomItemWhereInput
    none?: BomItemWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type WorkOrderListRelationFilter = {
    every?: WorkOrderWhereInput
    some?: WorkOrderWhereInput
    none?: WorkOrderWhereInput
  }

  export type JobPhaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DrawingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BomItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customerId?: SortOrder
    quoteId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    startDate?: SortOrder
    completedAt?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customerId?: SortOrder
    quoteId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    startDate?: SortOrder
    completedAt?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customerId?: SortOrder
    quoteId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    startDate?: SortOrder
    completedAt?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumPhaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusFilter<$PrismaModel> | $Enums.PhaseStatus
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobPhaseJobIdSequenceCompoundUniqueInput = {
    jobId: string
    sequence: number
  }

  export type JobPhaseCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    sequence?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobPhaseAvgOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type JobPhaseMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    sequence?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobPhaseMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    sequence?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobPhaseSumOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumPhaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.PhaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhaseStatusFilter<$PrismaModel>
    _max?: NestedEnumPhaseStatusFilter<$PrismaModel>
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type JobPhaseScalarRelationFilter = {
    is?: JobPhaseWhereInput
    isNot?: JobPhaseWhereInput
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    phaseId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    phaseId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    phaseId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DrawingCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    revision?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type DrawingMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    revision?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type DrawingMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    revision?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MaterialScalarRelationFilter = {
    is?: MaterialWhereInput
    isNot?: MaterialWhereInput
  }

  export type BomItemCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    isOrdered?: SortOrder
    createdAt?: SortOrder
  }

  export type BomItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type BomItemMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    isOrdered?: SortOrder
    createdAt?: SortOrder
  }

  export type BomItemMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    isOrdered?: SortOrder
    createdAt?: SortOrder
  }

  export type BomItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type HeatBatchListRelationFilter = {
    every?: HeatBatchWhereInput
    some?: HeatBatchWhereInput
    none?: HeatBatchWhereInput
  }

  export type StockMovementListRelationFilter = {
    every?: StockMovementWhereInput
    some?: StockMovementWhereInput
    none?: StockMovementWhereInput
  }

  export type PurchaseOrderItemListRelationFilter = {
    every?: PurchaseOrderItemWhereInput
    some?: PurchaseOrderItemWhereInput
    none?: PurchaseOrderItemWhereInput
  }

  export type HeatBatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StockMovementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseOrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    category?: SortOrder
    grade?: SortOrder
    size?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    qtyOnHand?: SortOrder
    qtyReserved?: SortOrder
    reorderPoint?: SortOrder
    preferredVendor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaterialAvgOrderByAggregateInput = {
    unitCost?: SortOrder
    qtyOnHand?: SortOrder
    qtyReserved?: SortOrder
    reorderPoint?: SortOrder
  }

  export type MaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    category?: SortOrder
    grade?: SortOrder
    size?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    qtyOnHand?: SortOrder
    qtyReserved?: SortOrder
    reorderPoint?: SortOrder
    preferredVendor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaterialMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    category?: SortOrder
    grade?: SortOrder
    size?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    qtyOnHand?: SortOrder
    qtyReserved?: SortOrder
    reorderPoint?: SortOrder
    preferredVendor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaterialSumOrderByAggregateInput = {
    unitCost?: SortOrder
    qtyOnHand?: SortOrder
    qtyReserved?: SortOrder
    reorderPoint?: SortOrder
  }

  export type HeatBatchMaterialIdHeatNumberCompoundUniqueInput = {
    materialId: string
    heatNumber: string
  }

  export type HeatBatchCountOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    heatNumber?: SortOrder
    mtrUrl?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type HeatBatchAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type HeatBatchMaxOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    heatNumber?: SortOrder
    mtrUrl?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type HeatBatchMinOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    heatNumber?: SortOrder
    mtrUrl?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type HeatBatchSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type StockLocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
  }

  export type StockLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
  }

  export type StockLocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
  }

  export type StockLocationNullableScalarRelationFilter = {
    is?: StockLocationWhereInput | null
    isNot?: StockLocationWhereInput | null
  }

  export type StockMovementCountOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    fromLocationId?: SortOrder
    toLocationId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    movementType?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type StockMovementAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type StockMovementMaxOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    fromLocationId?: SortOrder
    toLocationId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    movementType?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type StockMovementMinOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    fromLocationId?: SortOrder
    toLocationId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    movementType?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type StockMovementSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type JobNullableScalarRelationFilter = {
    is?: JobWhereInput | null
    isNot?: JobWhereInput | null
  }

  export type TaskNullableScalarRelationFilter = {
    is?: TaskWhereInput | null
    isNot?: TaskWhereInput | null
  }

  export type WpsSpecNullableScalarRelationFilter = {
    is?: WpsSpecWhereInput | null
    isNot?: WpsSpecWhereInput | null
  }

  export type TimecardCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    taskId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    totalHours?: SortOrder
    wpsId?: SortOrder
    notes?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
  }

  export type TimecardAvgOrderByAggregateInput = {
    totalHours?: SortOrder
  }

  export type TimecardMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    taskId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    totalHours?: SortOrder
    wpsId?: SortOrder
    notes?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
  }

  export type TimecardMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    taskId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    totalHours?: SortOrder
    wpsId?: SortOrder
    notes?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
  }

  export type TimecardSumOrderByAggregateInput = {
    totalHours?: SortOrder
  }

  export type TimecardScalarRelationFilter = {
    is?: TimecardWhereInput
    isNot?: TimecardWhereInput
  }

  export type WpsSpecScalarRelationFilter = {
    is?: WpsSpecWhereInput
    isNot?: WpsSpecWhereInput
  }

  export type WeldPassCountOrderByAggregateInput = {
    id?: SortOrder
    timecardId?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    jointNumber?: SortOrder
    passNumber?: SortOrder
    amps?: SortOrder
    volts?: SortOrder
    wireFeed?: SortOrder
    travelSpeed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type WeldPassAvgOrderByAggregateInput = {
    passNumber?: SortOrder
    amps?: SortOrder
    volts?: SortOrder
    wireFeed?: SortOrder
    travelSpeed?: SortOrder
  }

  export type WeldPassMaxOrderByAggregateInput = {
    id?: SortOrder
    timecardId?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    jointNumber?: SortOrder
    passNumber?: SortOrder
    amps?: SortOrder
    volts?: SortOrder
    wireFeed?: SortOrder
    travelSpeed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type WeldPassMinOrderByAggregateInput = {
    id?: SortOrder
    timecardId?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    jointNumber?: SortOrder
    passNumber?: SortOrder
    amps?: SortOrder
    volts?: SortOrder
    wireFeed?: SortOrder
    travelSpeed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type WeldPassSumOrderByAggregateInput = {
    passNumber?: SortOrder
    amps?: SortOrder
    volts?: SortOrder
    wireFeed?: SortOrder
    travelSpeed?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PqrTestListRelationFilter = {
    every?: PqrTestWhereInput
    some?: PqrTestWhereInput
    none?: PqrTestWhereInput
  }

  export type PqrTestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WpsSpecCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    process?: SortOrder
    materialGroup?: SortOrder
    positions?: SortOrder
    thickness?: SortOrder
    pdfUrl?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parameters?: SortOrder
  }

  export type WpsSpecMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    process?: SortOrder
    materialGroup?: SortOrder
    thickness?: SortOrder
    pdfUrl?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WpsSpecMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    process?: SortOrder
    materialGroup?: SortOrder
    thickness?: SortOrder
    pdfUrl?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type PqrTestCountOrderByAggregateInput = {
    id?: SortOrder
    wpsId?: SortOrder
    testType?: SortOrder
    result?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    testDate?: SortOrder
    labName?: SortOrder
    certUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type PqrTestAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type PqrTestMaxOrderByAggregateInput = {
    id?: SortOrder
    wpsId?: SortOrder
    testType?: SortOrder
    result?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    testDate?: SortOrder
    labName?: SortOrder
    certUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type PqrTestMinOrderByAggregateInput = {
    id?: SortOrder
    wpsId?: SortOrder
    testType?: SortOrder
    result?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    testDate?: SortOrder
    labName?: SortOrder
    certUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type PqrTestSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type WelderCertWelderIdWpsIdCompoundUniqueInput = {
    welderId: string
    wpsId: string
  }

  export type WelderCertCountOrderByAggregateInput = {
    id?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    certNumber?: SortOrder
    issuedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    certPdfUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type WelderCertMaxOrderByAggregateInput = {
    id?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    certNumber?: SortOrder
    issuedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    certPdfUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type WelderCertMinOrderByAggregateInput = {
    id?: SortOrder
    welderId?: SortOrder
    wpsId?: SortOrder
    certNumber?: SortOrder
    issuedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    certPdfUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumInspectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InspectionType | EnumInspectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInspectionTypeFilter<$PrismaModel> | $Enums.InspectionType
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type WeldLogListRelationFilter = {
    every?: WeldLogWhereInput
    some?: WeldLogWhereInput
    none?: WeldLogWhereInput
  }

  export type RepairLogListRelationFilter = {
    every?: RepairLogWhereInput
    some?: RepairLogWhereInput
    none?: RepairLogWhereInput
  }

  export type WeldLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RepairLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InspectionCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    inspectorId?: SortOrder
    inspectionType?: SortOrder
    jointNumbers?: SortOrder
    result?: SortOrder
    notes?: SortOrder
    reportUrl?: SortOrder
    inspectedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type InspectionMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    inspectorId?: SortOrder
    inspectionType?: SortOrder
    result?: SortOrder
    notes?: SortOrder
    reportUrl?: SortOrder
    inspectedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type InspectionMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    inspectorId?: SortOrder
    inspectionType?: SortOrder
    result?: SortOrder
    notes?: SortOrder
    reportUrl?: SortOrder
    inspectedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumInspectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InspectionType | EnumInspectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInspectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InspectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInspectionTypeFilter<$PrismaModel>
    _max?: NestedEnumInspectionTypeFilter<$PrismaModel>
  }

  export type InspectionScalarRelationFilter = {
    is?: InspectionWhereInput
    isNot?: InspectionWhereInput
  }

  export type WeldLogCountOrderByAggregateInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    jointId?: SortOrder
    process?: SortOrder
    position?: SortOrder
    welderId?: SortOrder
    length?: SortOrder
    defects?: SortOrder
    createdAt?: SortOrder
  }

  export type WeldLogAvgOrderByAggregateInput = {
    length?: SortOrder
  }

  export type WeldLogMaxOrderByAggregateInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    jointId?: SortOrder
    process?: SortOrder
    position?: SortOrder
    welderId?: SortOrder
    length?: SortOrder
    createdAt?: SortOrder
  }

  export type WeldLogMinOrderByAggregateInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    jointId?: SortOrder
    process?: SortOrder
    position?: SortOrder
    welderId?: SortOrder
    length?: SortOrder
    createdAt?: SortOrder
  }

  export type WeldLogSumOrderByAggregateInput = {
    length?: SortOrder
  }

  export type RepairLogCountOrderByAggregateInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    defectType?: SortOrder
    repairMethod?: SortOrder
    repairedBy?: SortOrder
    repairedAt?: SortOrder
    isCompleted?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type RepairLogMaxOrderByAggregateInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    defectType?: SortOrder
    repairMethod?: SortOrder
    repairedBy?: SortOrder
    repairedAt?: SortOrder
    isCompleted?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type RepairLogMinOrderByAggregateInput = {
    id?: SortOrder
    inspectionId?: SortOrder
    weldNumber?: SortOrder
    defectType?: SortOrder
    repairMethod?: SortOrder
    repairedBy?: SortOrder
    repairedAt?: SortOrder
    isCompleted?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type QuoteListRelationFilter = {
    every?: QuoteWhereInput
    some?: QuoteWhereInput
    none?: QuoteWhereInput
  }

  export type QuoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    gstHst?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    terms?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    gstHst?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    gstHst?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    terms?: SortOrder
  }

  export type PurchaseOrderListRelationFilter = {
    every?: PurchaseOrderWhereInput
    some?: PurchaseOrderWhereInput
    none?: PurchaseOrderWhereInput
  }

  export type PurchaseOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorAvgOrderByAggregateInput = {
    terms?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorSumOrderByAggregateInput = {
    terms?: SortOrder
  }

  export type EnumPoStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PoStatus | EnumPoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPoStatusFilter<$PrismaModel> | $Enums.PoStatus
  }

  export type VendorScalarRelationFilter = {
    is?: VendorWhereInput
    isNot?: VendorWhereInput
  }

  export type PurchaseOrderCountOrderByAggregateInput = {
    id?: SortOrder
    poNumber?: SortOrder
    vendorId?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    requiredBy?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderAvgOrderByAggregateInput = {
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
  }

  export type PurchaseOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    poNumber?: SortOrder
    vendorId?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    requiredBy?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderMinOrderByAggregateInput = {
    id?: SortOrder
    poNumber?: SortOrder
    vendorId?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    requiredBy?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderSumOrderByAggregateInput = {
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
  }

  export type EnumPoStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PoStatus | EnumPoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPoStatusWithAggregatesFilter<$PrismaModel> | $Enums.PoStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPoStatusFilter<$PrismaModel>
    _max?: NestedEnumPoStatusFilter<$PrismaModel>
  }

  export type PurchaseOrderScalarRelationFilter = {
    is?: PurchaseOrderWhereInput
    isNot?: PurchaseOrderWhereInput
  }

  export type PurchaseOrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    poId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    qtyReceived?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseOrderItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    qtyReceived?: SortOrder
  }

  export type PurchaseOrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    poId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    qtyReceived?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseOrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    poId?: SortOrder
    materialId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    qtyReceived?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseOrderItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    qtyReceived?: SortOrder
  }

  export type EnumQuoteStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuoteStatus | EnumQuoteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuoteStatusFilter<$PrismaModel> | $Enums.QuoteStatus
  }

  export type QuoteItemListRelationFilter = {
    every?: QuoteItemWhereInput
    some?: QuoteItemWhereInput
    none?: QuoteItemWhereInput
  }

  export type QuoteItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuoteCountOrderByAggregateInput = {
    id?: SortOrder
    quoteNumber?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    validUntil?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuoteAvgOrderByAggregateInput = {
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
  }

  export type QuoteMaxOrderByAggregateInput = {
    id?: SortOrder
    quoteNumber?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    validUntil?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuoteMinOrderByAggregateInput = {
    id?: SortOrder
    quoteNumber?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
    validUntil?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuoteSumOrderByAggregateInput = {
    subtotal?: SortOrder
    tax?: SortOrder
    total?: SortOrder
  }

  export type EnumQuoteStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuoteStatus | EnumQuoteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuoteStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuoteStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuoteStatusFilter<$PrismaModel>
    _max?: NestedEnumQuoteStatusFilter<$PrismaModel>
  }

  export type QuoteScalarRelationFilter = {
    is?: QuoteWhereInput
    isNot?: QuoteWhereInput
  }

  export type QuoteItemCountOrderByAggregateInput = {
    id?: SortOrder
    quoteId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type QuoteItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type QuoteItemMaxOrderByAggregateInput = {
    id?: SortOrder
    quoteId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type QuoteItemMinOrderByAggregateInput = {
    id?: SortOrder
    quoteId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type QuoteItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type EnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type InvoiceItemListRelationFilter = {
    every?: InvoiceItemWhereInput
    some?: InvoiceItemWhereInput
    none?: InvoiceItemWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type InvoiceItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    customerId?: SortOrder
    jobId?: SortOrder
    subtotal?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
    total?: SortOrder
    status?: SortOrder
    issuedAt?: SortOrder
    dueAt?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    subtotal?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
    total?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    customerId?: SortOrder
    jobId?: SortOrder
    subtotal?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
    total?: SortOrder
    status?: SortOrder
    issuedAt?: SortOrder
    dueAt?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    customerId?: SortOrder
    jobId?: SortOrder
    subtotal?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
    total?: SortOrder
    status?: SortOrder
    issuedAt?: SortOrder
    dueAt?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    subtotal?: SortOrder
    gstHst?: SortOrder
    pst?: SortOrder
    total?: SortOrder
  }

  export type EnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }

  export type InvoiceScalarRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type InvoiceItemCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type InvoiceItemMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceItemMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumEquipmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EquipmentType | EnumEquipmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentTypeFilter<$PrismaModel> | $Enums.EquipmentType
  }

  export type ServiceLogListRelationFilter = {
    every?: ServiceLogWhereInput
    some?: ServiceLogWhereInput
    none?: ServiceLogWhereInput
  }

  export type ServiceLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type EquipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type EquipmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumEquipmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EquipmentType | EnumEquipmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.EquipmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEquipmentTypeFilter<$PrismaModel>
    _max?: NestedEnumEquipmentTypeFilter<$PrismaModel>
  }

  export type EnumServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeFilter<$PrismaModel> | $Enums.ServiceType
  }

  export type EquipmentScalarRelationFilter = {
    is?: EquipmentWhereInput
    isNot?: EquipmentWhereInput
  }

  export type ServiceLogCountOrderByAggregateInput = {
    id?: SortOrder
    equipmentId?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    servicedAt?: SortOrder
    nextDue?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceLogAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type ServiceLogMaxOrderByAggregateInput = {
    id?: SortOrder
    equipmentId?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    servicedAt?: SortOrder
    nextDue?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceLogMinOrderByAggregateInput = {
    id?: SortOrder
    equipmentId?: SortOrder
    serviceType?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    servicedAt?: SortOrder
    nextDue?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceLogSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type EnumServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeFilter<$PrismaModel>
  }

  export type EnumWorkOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusFilter<$PrismaModel> | $Enums.WorkOrderStatus
  }

  export type WorkOrderCountOrderByAggregateInput = {
    id?: SortOrder
    woNumber?: SortOrder
    jobId?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    woNumber?: SortOrder
    jobId?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderMinOrderByAggregateInput = {
    id?: SortOrder
    woNumber?: SortOrder
    jobId?: SortOrder
    customerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postal?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumWorkOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type WorkOrderScalarRelationFilter = {
    is?: WorkOrderWhereInput
    isNot?: WorkOrderWhereInput
  }

  export type TruckTripCountOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    driverId?: SortOrder
    truckId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    odometerStart?: SortOrder
    odometerEnd?: SortOrder
    gpsStart?: SortOrder
    gpsEnd?: SortOrder
    photos?: SortOrder
    signature?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type TruckTripAvgOrderByAggregateInput = {
    odometerStart?: SortOrder
    odometerEnd?: SortOrder
  }

  export type TruckTripMaxOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    driverId?: SortOrder
    truckId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    odometerStart?: SortOrder
    odometerEnd?: SortOrder
    signature?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type TruckTripMinOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    driverId?: SortOrder
    truckId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    odometerStart?: SortOrder
    odometerEnd?: SortOrder
    signature?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type TruckTripSumOrderByAggregateInput = {
    odometerStart?: SortOrder
    odometerEnd?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type WelderCertCreateNestedManyWithoutWelderInput = {
    create?: XOR<WelderCertCreateWithoutWelderInput, WelderCertUncheckedCreateWithoutWelderInput> | WelderCertCreateWithoutWelderInput[] | WelderCertUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWelderInput | WelderCertCreateOrConnectWithoutWelderInput[]
    createMany?: WelderCertCreateManyWelderInputEnvelope
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUsersInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    connect?: CompanyWhereUniqueInput
  }

  export type TimecardCreateNestedManyWithoutUserInput = {
    create?: XOR<TimecardCreateWithoutUserInput, TimecardUncheckedCreateWithoutUserInput> | TimecardCreateWithoutUserInput[] | TimecardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutUserInput | TimecardCreateOrConnectWithoutUserInput[]
    createMany?: TimecardCreateManyUserInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type WeldPassCreateNestedManyWithoutWelderInput = {
    create?: XOR<WeldPassCreateWithoutWelderInput, WeldPassUncheckedCreateWithoutWelderInput> | WeldPassCreateWithoutWelderInput[] | WeldPassUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWelderInput | WeldPassCreateOrConnectWithoutWelderInput[]
    createMany?: WeldPassCreateManyWelderInputEnvelope
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
  }

  export type InspectionCreateNestedManyWithoutInspectorInput = {
    create?: XOR<InspectionCreateWithoutInspectorInput, InspectionUncheckedCreateWithoutInspectorInput> | InspectionCreateWithoutInspectorInput[] | InspectionUncheckedCreateWithoutInspectorInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutInspectorInput | InspectionCreateOrConnectWithoutInspectorInput[]
    createMany?: InspectionCreateManyInspectorInputEnvelope
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<JobCreateWithoutCreatedByInput, JobUncheckedCreateWithoutCreatedByInput> | JobCreateWithoutCreatedByInput[] | JobUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCreatedByInput | JobCreateOrConnectWithoutCreatedByInput[]
    createMany?: JobCreateManyCreatedByInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type TruckTripCreateNestedManyWithoutDriverInput = {
    create?: XOR<TruckTripCreateWithoutDriverInput, TruckTripUncheckedCreateWithoutDriverInput> | TruckTripCreateWithoutDriverInput[] | TruckTripUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutDriverInput | TruckTripCreateOrConnectWithoutDriverInput[]
    createMany?: TruckTripCreateManyDriverInputEnvelope
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
  }

  export type WelderCertUncheckedCreateNestedManyWithoutWelderInput = {
    create?: XOR<WelderCertCreateWithoutWelderInput, WelderCertUncheckedCreateWithoutWelderInput> | WelderCertCreateWithoutWelderInput[] | WelderCertUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWelderInput | WelderCertCreateOrConnectWithoutWelderInput[]
    createMany?: WelderCertCreateManyWelderInputEnvelope
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
  }

  export type TimecardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TimecardCreateWithoutUserInput, TimecardUncheckedCreateWithoutUserInput> | TimecardCreateWithoutUserInput[] | TimecardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutUserInput | TimecardCreateOrConnectWithoutUserInput[]
    createMany?: TimecardCreateManyUserInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type WeldPassUncheckedCreateNestedManyWithoutWelderInput = {
    create?: XOR<WeldPassCreateWithoutWelderInput, WeldPassUncheckedCreateWithoutWelderInput> | WeldPassCreateWithoutWelderInput[] | WeldPassUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWelderInput | WeldPassCreateOrConnectWithoutWelderInput[]
    createMany?: WeldPassCreateManyWelderInputEnvelope
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
  }

  export type InspectionUncheckedCreateNestedManyWithoutInspectorInput = {
    create?: XOR<InspectionCreateWithoutInspectorInput, InspectionUncheckedCreateWithoutInspectorInput> | InspectionCreateWithoutInspectorInput[] | InspectionUncheckedCreateWithoutInspectorInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutInspectorInput | InspectionCreateOrConnectWithoutInspectorInput[]
    createMany?: InspectionCreateManyInspectorInputEnvelope
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<JobCreateWithoutCreatedByInput, JobUncheckedCreateWithoutCreatedByInput> | JobCreateWithoutCreatedByInput[] | JobUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCreatedByInput | JobCreateOrConnectWithoutCreatedByInput[]
    createMany?: JobCreateManyCreatedByInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type TruckTripUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<TruckTripCreateWithoutDriverInput, TruckTripUncheckedCreateWithoutDriverInput> | TruckTripCreateWithoutDriverInput[] | TruckTripUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutDriverInput | TruckTripCreateOrConnectWithoutDriverInput[]
    createMany?: TruckTripCreateManyDriverInputEnvelope
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WelderCertUpdateManyWithoutWelderNestedInput = {
    create?: XOR<WelderCertCreateWithoutWelderInput, WelderCertUncheckedCreateWithoutWelderInput> | WelderCertCreateWithoutWelderInput[] | WelderCertUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWelderInput | WelderCertCreateOrConnectWithoutWelderInput[]
    upsert?: WelderCertUpsertWithWhereUniqueWithoutWelderInput | WelderCertUpsertWithWhereUniqueWithoutWelderInput[]
    createMany?: WelderCertCreateManyWelderInputEnvelope
    set?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    disconnect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    delete?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    update?: WelderCertUpdateWithWhereUniqueWithoutWelderInput | WelderCertUpdateWithWhereUniqueWithoutWelderInput[]
    updateMany?: WelderCertUpdateManyWithWhereWithoutWelderInput | WelderCertUpdateManyWithWhereWithoutWelderInput[]
    deleteMany?: WelderCertScalarWhereInput | WelderCertScalarWhereInput[]
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type CompanyUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    upsert?: CompanyUpsertWithoutUsersInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUsersInput, CompanyUpdateWithoutUsersInput>, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type TimecardUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimecardCreateWithoutUserInput, TimecardUncheckedCreateWithoutUserInput> | TimecardCreateWithoutUserInput[] | TimecardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutUserInput | TimecardCreateOrConnectWithoutUserInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutUserInput | TimecardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimecardCreateManyUserInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutUserInput | TimecardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutUserInput | TimecardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type WeldPassUpdateManyWithoutWelderNestedInput = {
    create?: XOR<WeldPassCreateWithoutWelderInput, WeldPassUncheckedCreateWithoutWelderInput> | WeldPassCreateWithoutWelderInput[] | WeldPassUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWelderInput | WeldPassCreateOrConnectWithoutWelderInput[]
    upsert?: WeldPassUpsertWithWhereUniqueWithoutWelderInput | WeldPassUpsertWithWhereUniqueWithoutWelderInput[]
    createMany?: WeldPassCreateManyWelderInputEnvelope
    set?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    disconnect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    delete?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    update?: WeldPassUpdateWithWhereUniqueWithoutWelderInput | WeldPassUpdateWithWhereUniqueWithoutWelderInput[]
    updateMany?: WeldPassUpdateManyWithWhereWithoutWelderInput | WeldPassUpdateManyWithWhereWithoutWelderInput[]
    deleteMany?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
  }

  export type InspectionUpdateManyWithoutInspectorNestedInput = {
    create?: XOR<InspectionCreateWithoutInspectorInput, InspectionUncheckedCreateWithoutInspectorInput> | InspectionCreateWithoutInspectorInput[] | InspectionUncheckedCreateWithoutInspectorInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutInspectorInput | InspectionCreateOrConnectWithoutInspectorInput[]
    upsert?: InspectionUpsertWithWhereUniqueWithoutInspectorInput | InspectionUpsertWithWhereUniqueWithoutInspectorInput[]
    createMany?: InspectionCreateManyInspectorInputEnvelope
    set?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    disconnect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    delete?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    update?: InspectionUpdateWithWhereUniqueWithoutInspectorInput | InspectionUpdateWithWhereUniqueWithoutInspectorInput[]
    updateMany?: InspectionUpdateManyWithWhereWithoutInspectorInput | InspectionUpdateManyWithWhereWithoutInspectorInput[]
    deleteMany?: InspectionScalarWhereInput | InspectionScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type JobUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<JobCreateWithoutCreatedByInput, JobUncheckedCreateWithoutCreatedByInput> | JobCreateWithoutCreatedByInput[] | JobUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCreatedByInput | JobCreateOrConnectWithoutCreatedByInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCreatedByInput | JobUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: JobCreateManyCreatedByInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCreatedByInput | JobUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCreatedByInput | JobUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type TruckTripUpdateManyWithoutDriverNestedInput = {
    create?: XOR<TruckTripCreateWithoutDriverInput, TruckTripUncheckedCreateWithoutDriverInput> | TruckTripCreateWithoutDriverInput[] | TruckTripUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutDriverInput | TruckTripCreateOrConnectWithoutDriverInput[]
    upsert?: TruckTripUpsertWithWhereUniqueWithoutDriverInput | TruckTripUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: TruckTripCreateManyDriverInputEnvelope
    set?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    disconnect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    delete?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    update?: TruckTripUpdateWithWhereUniqueWithoutDriverInput | TruckTripUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: TruckTripUpdateManyWithWhereWithoutDriverInput | TruckTripUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: TruckTripScalarWhereInput | TruckTripScalarWhereInput[]
  }

  export type WelderCertUncheckedUpdateManyWithoutWelderNestedInput = {
    create?: XOR<WelderCertCreateWithoutWelderInput, WelderCertUncheckedCreateWithoutWelderInput> | WelderCertCreateWithoutWelderInput[] | WelderCertUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWelderInput | WelderCertCreateOrConnectWithoutWelderInput[]
    upsert?: WelderCertUpsertWithWhereUniqueWithoutWelderInput | WelderCertUpsertWithWhereUniqueWithoutWelderInput[]
    createMany?: WelderCertCreateManyWelderInputEnvelope
    set?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    disconnect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    delete?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    update?: WelderCertUpdateWithWhereUniqueWithoutWelderInput | WelderCertUpdateWithWhereUniqueWithoutWelderInput[]
    updateMany?: WelderCertUpdateManyWithWhereWithoutWelderInput | WelderCertUpdateManyWithWhereWithoutWelderInput[]
    deleteMany?: WelderCertScalarWhereInput | WelderCertScalarWhereInput[]
  }

  export type TimecardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimecardCreateWithoutUserInput, TimecardUncheckedCreateWithoutUserInput> | TimecardCreateWithoutUserInput[] | TimecardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutUserInput | TimecardCreateOrConnectWithoutUserInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutUserInput | TimecardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimecardCreateManyUserInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutUserInput | TimecardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutUserInput | TimecardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type WeldPassUncheckedUpdateManyWithoutWelderNestedInput = {
    create?: XOR<WeldPassCreateWithoutWelderInput, WeldPassUncheckedCreateWithoutWelderInput> | WeldPassCreateWithoutWelderInput[] | WeldPassUncheckedCreateWithoutWelderInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWelderInput | WeldPassCreateOrConnectWithoutWelderInput[]
    upsert?: WeldPassUpsertWithWhereUniqueWithoutWelderInput | WeldPassUpsertWithWhereUniqueWithoutWelderInput[]
    createMany?: WeldPassCreateManyWelderInputEnvelope
    set?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    disconnect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    delete?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    update?: WeldPassUpdateWithWhereUniqueWithoutWelderInput | WeldPassUpdateWithWhereUniqueWithoutWelderInput[]
    updateMany?: WeldPassUpdateManyWithWhereWithoutWelderInput | WeldPassUpdateManyWithWhereWithoutWelderInput[]
    deleteMany?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
  }

  export type InspectionUncheckedUpdateManyWithoutInspectorNestedInput = {
    create?: XOR<InspectionCreateWithoutInspectorInput, InspectionUncheckedCreateWithoutInspectorInput> | InspectionCreateWithoutInspectorInput[] | InspectionUncheckedCreateWithoutInspectorInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutInspectorInput | InspectionCreateOrConnectWithoutInspectorInput[]
    upsert?: InspectionUpsertWithWhereUniqueWithoutInspectorInput | InspectionUpsertWithWhereUniqueWithoutInspectorInput[]
    createMany?: InspectionCreateManyInspectorInputEnvelope
    set?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    disconnect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    delete?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    update?: InspectionUpdateWithWhereUniqueWithoutInspectorInput | InspectionUpdateWithWhereUniqueWithoutInspectorInput[]
    updateMany?: InspectionUpdateManyWithWhereWithoutInspectorInput | InspectionUpdateManyWithWhereWithoutInspectorInput[]
    deleteMany?: InspectionScalarWhereInput | InspectionScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<JobCreateWithoutCreatedByInput, JobUncheckedCreateWithoutCreatedByInput> | JobCreateWithoutCreatedByInput[] | JobUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCreatedByInput | JobCreateOrConnectWithoutCreatedByInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCreatedByInput | JobUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: JobCreateManyCreatedByInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCreatedByInput | JobUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCreatedByInput | JobUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type TruckTripUncheckedUpdateManyWithoutDriverNestedInput = {
    create?: XOR<TruckTripCreateWithoutDriverInput, TruckTripUncheckedCreateWithoutDriverInput> | TruckTripCreateWithoutDriverInput[] | TruckTripUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutDriverInput | TruckTripCreateOrConnectWithoutDriverInput[]
    upsert?: TruckTripUpsertWithWhereUniqueWithoutDriverInput | TruckTripUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: TruckTripCreateManyDriverInputEnvelope
    set?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    disconnect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    delete?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    update?: TruckTripUpdateWithWhereUniqueWithoutDriverInput | TruckTripUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: TruckTripUpdateManyWithWhereWithoutDriverInput | TruckTripUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: TruckTripScalarWhereInput | TruckTripScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CustomerCreateWithoutCompanyInput, CustomerUncheckedCreateWithoutCompanyInput> | CustomerCreateWithoutCompanyInput[] | CustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCompanyInput | CustomerCreateOrConnectWithoutCompanyInput[]
    createMany?: CustomerCreateManyCompanyInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type VendorCreateNestedManyWithoutCompanyInput = {
    create?: XOR<VendorCreateWithoutCompanyInput, VendorUncheckedCreateWithoutCompanyInput> | VendorCreateWithoutCompanyInput[] | VendorUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutCompanyInput | VendorCreateOrConnectWithoutCompanyInput[]
    createMany?: VendorCreateManyCompanyInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CustomerCreateWithoutCompanyInput, CustomerUncheckedCreateWithoutCompanyInput> | CustomerCreateWithoutCompanyInput[] | CustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCompanyInput | CustomerCreateOrConnectWithoutCompanyInput[]
    createMany?: CustomerCreateManyCompanyInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type VendorUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<VendorCreateWithoutCompanyInput, VendorUncheckedCreateWithoutCompanyInput> | VendorCreateWithoutCompanyInput[] | VendorUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutCompanyInput | VendorCreateOrConnectWithoutCompanyInput[]
    createMany?: VendorCreateManyCompanyInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CustomerCreateWithoutCompanyInput, CustomerUncheckedCreateWithoutCompanyInput> | CustomerCreateWithoutCompanyInput[] | CustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCompanyInput | CustomerCreateOrConnectWithoutCompanyInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutCompanyInput | CustomerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CustomerCreateManyCompanyInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutCompanyInput | CustomerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutCompanyInput | CustomerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type VendorUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<VendorCreateWithoutCompanyInput, VendorUncheckedCreateWithoutCompanyInput> | VendorCreateWithoutCompanyInput[] | VendorUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutCompanyInput | VendorCreateOrConnectWithoutCompanyInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutCompanyInput | VendorUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: VendorCreateManyCompanyInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutCompanyInput | VendorUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutCompanyInput | VendorUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CustomerCreateWithoutCompanyInput, CustomerUncheckedCreateWithoutCompanyInput> | CustomerCreateWithoutCompanyInput[] | CustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutCompanyInput | CustomerCreateOrConnectWithoutCompanyInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutCompanyInput | CustomerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CustomerCreateManyCompanyInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutCompanyInput | CustomerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutCompanyInput | CustomerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type VendorUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<VendorCreateWithoutCompanyInput, VendorUncheckedCreateWithoutCompanyInput> | VendorCreateWithoutCompanyInput[] | VendorUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutCompanyInput | VendorCreateOrConnectWithoutCompanyInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutCompanyInput | VendorUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: VendorCreateManyCompanyInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutCompanyInput | VendorUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutCompanyInput | VendorUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutJobsInput = {
    create?: XOR<CustomerCreateWithoutJobsInput, CustomerUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutJobsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedJobsInput = {
    create?: XOR<UserCreateWithoutCreatedJobsInput, UserUncheckedCreateWithoutCreatedJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedJobsInput
    connect?: UserWhereUniqueInput
  }

  export type QuoteCreateNestedOneWithoutJobsInput = {
    create?: XOR<QuoteCreateWithoutJobsInput, QuoteUncheckedCreateWithoutJobsInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutJobsInput
    connect?: QuoteWhereUniqueInput
  }

  export type JobPhaseCreateNestedManyWithoutJobInput = {
    create?: XOR<JobPhaseCreateWithoutJobInput, JobPhaseUncheckedCreateWithoutJobInput> | JobPhaseCreateWithoutJobInput[] | JobPhaseUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobPhaseCreateOrConnectWithoutJobInput | JobPhaseCreateOrConnectWithoutJobInput[]
    createMany?: JobPhaseCreateManyJobInputEnvelope
    connect?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
  }

  export type DrawingCreateNestedManyWithoutJobInput = {
    create?: XOR<DrawingCreateWithoutJobInput, DrawingUncheckedCreateWithoutJobInput> | DrawingCreateWithoutJobInput[] | DrawingUncheckedCreateWithoutJobInput[]
    connectOrCreate?: DrawingCreateOrConnectWithoutJobInput | DrawingCreateOrConnectWithoutJobInput[]
    createMany?: DrawingCreateManyJobInputEnvelope
    connect?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
  }

  export type BomItemCreateNestedManyWithoutJobInput = {
    create?: XOR<BomItemCreateWithoutJobInput, BomItemUncheckedCreateWithoutJobInput> | BomItemCreateWithoutJobInput[] | BomItemUncheckedCreateWithoutJobInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutJobInput | BomItemCreateOrConnectWithoutJobInput[]
    createMany?: BomItemCreateManyJobInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type TimecardCreateNestedManyWithoutJobInput = {
    create?: XOR<TimecardCreateWithoutJobInput, TimecardUncheckedCreateWithoutJobInput> | TimecardCreateWithoutJobInput[] | TimecardUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutJobInput | TimecardCreateOrConnectWithoutJobInput[]
    createMany?: TimecardCreateManyJobInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutJobInput = {
    create?: XOR<InvoiceCreateWithoutJobInput, InvoiceUncheckedCreateWithoutJobInput> | InvoiceCreateWithoutJobInput[] | InvoiceUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutJobInput | InvoiceCreateOrConnectWithoutJobInput[]
    createMany?: InvoiceCreateManyJobInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type WorkOrderCreateNestedManyWithoutJobInput = {
    create?: XOR<WorkOrderCreateWithoutJobInput, WorkOrderUncheckedCreateWithoutJobInput> | WorkOrderCreateWithoutJobInput[] | WorkOrderUncheckedCreateWithoutJobInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutJobInput | WorkOrderCreateOrConnectWithoutJobInput[]
    createMany?: WorkOrderCreateManyJobInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type InspectionCreateNestedManyWithoutJobInput = {
    create?: XOR<InspectionCreateWithoutJobInput, InspectionUncheckedCreateWithoutJobInput> | InspectionCreateWithoutJobInput[] | InspectionUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutJobInput | InspectionCreateOrConnectWithoutJobInput[]
    createMany?: InspectionCreateManyJobInputEnvelope
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
  }

  export type JobPhaseUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobPhaseCreateWithoutJobInput, JobPhaseUncheckedCreateWithoutJobInput> | JobPhaseCreateWithoutJobInput[] | JobPhaseUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobPhaseCreateOrConnectWithoutJobInput | JobPhaseCreateOrConnectWithoutJobInput[]
    createMany?: JobPhaseCreateManyJobInputEnvelope
    connect?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
  }

  export type DrawingUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<DrawingCreateWithoutJobInput, DrawingUncheckedCreateWithoutJobInput> | DrawingCreateWithoutJobInput[] | DrawingUncheckedCreateWithoutJobInput[]
    connectOrCreate?: DrawingCreateOrConnectWithoutJobInput | DrawingCreateOrConnectWithoutJobInput[]
    createMany?: DrawingCreateManyJobInputEnvelope
    connect?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
  }

  export type BomItemUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<BomItemCreateWithoutJobInput, BomItemUncheckedCreateWithoutJobInput> | BomItemCreateWithoutJobInput[] | BomItemUncheckedCreateWithoutJobInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutJobInput | BomItemCreateOrConnectWithoutJobInput[]
    createMany?: BomItemCreateManyJobInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type TimecardUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<TimecardCreateWithoutJobInput, TimecardUncheckedCreateWithoutJobInput> | TimecardCreateWithoutJobInput[] | TimecardUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutJobInput | TimecardCreateOrConnectWithoutJobInput[]
    createMany?: TimecardCreateManyJobInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<InvoiceCreateWithoutJobInput, InvoiceUncheckedCreateWithoutJobInput> | InvoiceCreateWithoutJobInput[] | InvoiceUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutJobInput | InvoiceCreateOrConnectWithoutJobInput[]
    createMany?: InvoiceCreateManyJobInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<WorkOrderCreateWithoutJobInput, WorkOrderUncheckedCreateWithoutJobInput> | WorkOrderCreateWithoutJobInput[] | WorkOrderUncheckedCreateWithoutJobInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutJobInput | WorkOrderCreateOrConnectWithoutJobInput[]
    createMany?: WorkOrderCreateManyJobInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type InspectionUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<InspectionCreateWithoutJobInput, InspectionUncheckedCreateWithoutJobInput> | InspectionCreateWithoutJobInput[] | InspectionUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutJobInput | InspectionCreateOrConnectWithoutJobInput[]
    createMany?: InspectionCreateManyJobInputEnvelope
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CustomerUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<CustomerCreateWithoutJobsInput, CustomerUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutJobsInput
    upsert?: CustomerUpsertWithoutJobsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutJobsInput, CustomerUpdateWithoutJobsInput>, CustomerUncheckedUpdateWithoutJobsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedJobsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedJobsInput, UserUncheckedCreateWithoutCreatedJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedJobsInput
    upsert?: UserUpsertWithoutCreatedJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedJobsInput, UserUpdateWithoutCreatedJobsInput>, UserUncheckedUpdateWithoutCreatedJobsInput>
  }

  export type QuoteUpdateOneWithoutJobsNestedInput = {
    create?: XOR<QuoteCreateWithoutJobsInput, QuoteUncheckedCreateWithoutJobsInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutJobsInput
    upsert?: QuoteUpsertWithoutJobsInput
    disconnect?: QuoteWhereInput | boolean
    delete?: QuoteWhereInput | boolean
    connect?: QuoteWhereUniqueInput
    update?: XOR<XOR<QuoteUpdateToOneWithWhereWithoutJobsInput, QuoteUpdateWithoutJobsInput>, QuoteUncheckedUpdateWithoutJobsInput>
  }

  export type JobPhaseUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobPhaseCreateWithoutJobInput, JobPhaseUncheckedCreateWithoutJobInput> | JobPhaseCreateWithoutJobInput[] | JobPhaseUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobPhaseCreateOrConnectWithoutJobInput | JobPhaseCreateOrConnectWithoutJobInput[]
    upsert?: JobPhaseUpsertWithWhereUniqueWithoutJobInput | JobPhaseUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobPhaseCreateManyJobInputEnvelope
    set?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    disconnect?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    delete?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    connect?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    update?: JobPhaseUpdateWithWhereUniqueWithoutJobInput | JobPhaseUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobPhaseUpdateManyWithWhereWithoutJobInput | JobPhaseUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobPhaseScalarWhereInput | JobPhaseScalarWhereInput[]
  }

  export type DrawingUpdateManyWithoutJobNestedInput = {
    create?: XOR<DrawingCreateWithoutJobInput, DrawingUncheckedCreateWithoutJobInput> | DrawingCreateWithoutJobInput[] | DrawingUncheckedCreateWithoutJobInput[]
    connectOrCreate?: DrawingCreateOrConnectWithoutJobInput | DrawingCreateOrConnectWithoutJobInput[]
    upsert?: DrawingUpsertWithWhereUniqueWithoutJobInput | DrawingUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: DrawingCreateManyJobInputEnvelope
    set?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    disconnect?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    delete?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    connect?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    update?: DrawingUpdateWithWhereUniqueWithoutJobInput | DrawingUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: DrawingUpdateManyWithWhereWithoutJobInput | DrawingUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: DrawingScalarWhereInput | DrawingScalarWhereInput[]
  }

  export type BomItemUpdateManyWithoutJobNestedInput = {
    create?: XOR<BomItemCreateWithoutJobInput, BomItemUncheckedCreateWithoutJobInput> | BomItemCreateWithoutJobInput[] | BomItemUncheckedCreateWithoutJobInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutJobInput | BomItemCreateOrConnectWithoutJobInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutJobInput | BomItemUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: BomItemCreateManyJobInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutJobInput | BomItemUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutJobInput | BomItemUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type TimecardUpdateManyWithoutJobNestedInput = {
    create?: XOR<TimecardCreateWithoutJobInput, TimecardUncheckedCreateWithoutJobInput> | TimecardCreateWithoutJobInput[] | TimecardUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutJobInput | TimecardCreateOrConnectWithoutJobInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutJobInput | TimecardUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: TimecardCreateManyJobInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutJobInput | TimecardUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutJobInput | TimecardUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutJobNestedInput = {
    create?: XOR<InvoiceCreateWithoutJobInput, InvoiceUncheckedCreateWithoutJobInput> | InvoiceCreateWithoutJobInput[] | InvoiceUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutJobInput | InvoiceCreateOrConnectWithoutJobInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutJobInput | InvoiceUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InvoiceCreateManyJobInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutJobInput | InvoiceUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutJobInput | InvoiceUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type WorkOrderUpdateManyWithoutJobNestedInput = {
    create?: XOR<WorkOrderCreateWithoutJobInput, WorkOrderUncheckedCreateWithoutJobInput> | WorkOrderCreateWithoutJobInput[] | WorkOrderUncheckedCreateWithoutJobInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutJobInput | WorkOrderCreateOrConnectWithoutJobInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutJobInput | WorkOrderUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: WorkOrderCreateManyJobInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutJobInput | WorkOrderUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutJobInput | WorkOrderUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type InspectionUpdateManyWithoutJobNestedInput = {
    create?: XOR<InspectionCreateWithoutJobInput, InspectionUncheckedCreateWithoutJobInput> | InspectionCreateWithoutJobInput[] | InspectionUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutJobInput | InspectionCreateOrConnectWithoutJobInput[]
    upsert?: InspectionUpsertWithWhereUniqueWithoutJobInput | InspectionUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InspectionCreateManyJobInputEnvelope
    set?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    disconnect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    delete?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    update?: InspectionUpdateWithWhereUniqueWithoutJobInput | InspectionUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InspectionUpdateManyWithWhereWithoutJobInput | InspectionUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InspectionScalarWhereInput | InspectionScalarWhereInput[]
  }

  export type JobPhaseUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobPhaseCreateWithoutJobInput, JobPhaseUncheckedCreateWithoutJobInput> | JobPhaseCreateWithoutJobInput[] | JobPhaseUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobPhaseCreateOrConnectWithoutJobInput | JobPhaseCreateOrConnectWithoutJobInput[]
    upsert?: JobPhaseUpsertWithWhereUniqueWithoutJobInput | JobPhaseUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobPhaseCreateManyJobInputEnvelope
    set?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    disconnect?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    delete?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    connect?: JobPhaseWhereUniqueInput | JobPhaseWhereUniqueInput[]
    update?: JobPhaseUpdateWithWhereUniqueWithoutJobInput | JobPhaseUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobPhaseUpdateManyWithWhereWithoutJobInput | JobPhaseUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobPhaseScalarWhereInput | JobPhaseScalarWhereInput[]
  }

  export type DrawingUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<DrawingCreateWithoutJobInput, DrawingUncheckedCreateWithoutJobInput> | DrawingCreateWithoutJobInput[] | DrawingUncheckedCreateWithoutJobInput[]
    connectOrCreate?: DrawingCreateOrConnectWithoutJobInput | DrawingCreateOrConnectWithoutJobInput[]
    upsert?: DrawingUpsertWithWhereUniqueWithoutJobInput | DrawingUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: DrawingCreateManyJobInputEnvelope
    set?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    disconnect?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    delete?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    connect?: DrawingWhereUniqueInput | DrawingWhereUniqueInput[]
    update?: DrawingUpdateWithWhereUniqueWithoutJobInput | DrawingUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: DrawingUpdateManyWithWhereWithoutJobInput | DrawingUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: DrawingScalarWhereInput | DrawingScalarWhereInput[]
  }

  export type BomItemUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<BomItemCreateWithoutJobInput, BomItemUncheckedCreateWithoutJobInput> | BomItemCreateWithoutJobInput[] | BomItemUncheckedCreateWithoutJobInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutJobInput | BomItemCreateOrConnectWithoutJobInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutJobInput | BomItemUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: BomItemCreateManyJobInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutJobInput | BomItemUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutJobInput | BomItemUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type TimecardUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<TimecardCreateWithoutJobInput, TimecardUncheckedCreateWithoutJobInput> | TimecardCreateWithoutJobInput[] | TimecardUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutJobInput | TimecardCreateOrConnectWithoutJobInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutJobInput | TimecardUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: TimecardCreateManyJobInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutJobInput | TimecardUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutJobInput | TimecardUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<InvoiceCreateWithoutJobInput, InvoiceUncheckedCreateWithoutJobInput> | InvoiceCreateWithoutJobInput[] | InvoiceUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutJobInput | InvoiceCreateOrConnectWithoutJobInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutJobInput | InvoiceUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InvoiceCreateManyJobInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutJobInput | InvoiceUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutJobInput | InvoiceUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<WorkOrderCreateWithoutJobInput, WorkOrderUncheckedCreateWithoutJobInput> | WorkOrderCreateWithoutJobInput[] | WorkOrderUncheckedCreateWithoutJobInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutJobInput | WorkOrderCreateOrConnectWithoutJobInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutJobInput | WorkOrderUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: WorkOrderCreateManyJobInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutJobInput | WorkOrderUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutJobInput | WorkOrderUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type InspectionUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<InspectionCreateWithoutJobInput, InspectionUncheckedCreateWithoutJobInput> | InspectionCreateWithoutJobInput[] | InspectionUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InspectionCreateOrConnectWithoutJobInput | InspectionCreateOrConnectWithoutJobInput[]
    upsert?: InspectionUpsertWithWhereUniqueWithoutJobInput | InspectionUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InspectionCreateManyJobInputEnvelope
    set?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    disconnect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    delete?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    connect?: InspectionWhereUniqueInput | InspectionWhereUniqueInput[]
    update?: InspectionUpdateWithWhereUniqueWithoutJobInput | InspectionUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InspectionUpdateManyWithWhereWithoutJobInput | InspectionUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InspectionScalarWhereInput | InspectionScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutPhasesInput = {
    create?: XOR<JobCreateWithoutPhasesInput, JobUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: JobCreateOrConnectWithoutPhasesInput
    connect?: JobWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutPhaseInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutPhaseInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPhaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.PhaseStatus
  }

  export type JobUpdateOneRequiredWithoutPhasesNestedInput = {
    create?: XOR<JobCreateWithoutPhasesInput, JobUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: JobCreateOrConnectWithoutPhasesInput
    upsert?: JobUpsertWithoutPhasesInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutPhasesInput, JobUpdateWithoutPhasesInput>, JobUncheckedUpdateWithoutPhasesInput>
  }

  export type TaskUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutPhaseInput | TaskUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutPhaseInput | TaskUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutPhaseInput | TaskUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput> | TaskCreateWithoutPhaseInput[] | TaskUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutPhaseInput | TaskCreateOrConnectWithoutPhaseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutPhaseInput | TaskUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: TaskCreateManyPhaseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutPhaseInput | TaskUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutPhaseInput | TaskUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type JobPhaseCreateNestedOneWithoutTasksInput = {
    create?: XOR<JobPhaseCreateWithoutTasksInput, JobPhaseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: JobPhaseCreateOrConnectWithoutTasksInput
    connect?: JobPhaseWhereUniqueInput
  }

  export type TimecardCreateNestedManyWithoutTaskInput = {
    create?: XOR<TimecardCreateWithoutTaskInput, TimecardUncheckedCreateWithoutTaskInput> | TimecardCreateWithoutTaskInput[] | TimecardUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutTaskInput | TimecardCreateOrConnectWithoutTaskInput[]
    createMany?: TimecardCreateManyTaskInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type TimecardUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TimecardCreateWithoutTaskInput, TimecardUncheckedCreateWithoutTaskInput> | TimecardCreateWithoutTaskInput[] | TimecardUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutTaskInput | TimecardCreateOrConnectWithoutTaskInput[]
    createMany?: TimecardCreateManyTaskInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobPhaseUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<JobPhaseCreateWithoutTasksInput, JobPhaseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: JobPhaseCreateOrConnectWithoutTasksInput
    upsert?: JobPhaseUpsertWithoutTasksInput
    connect?: JobPhaseWhereUniqueInput
    update?: XOR<XOR<JobPhaseUpdateToOneWithWhereWithoutTasksInput, JobPhaseUpdateWithoutTasksInput>, JobPhaseUncheckedUpdateWithoutTasksInput>
  }

  export type TimecardUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TimecardCreateWithoutTaskInput, TimecardUncheckedCreateWithoutTaskInput> | TimecardCreateWithoutTaskInput[] | TimecardUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutTaskInput | TimecardCreateOrConnectWithoutTaskInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutTaskInput | TimecardUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TimecardCreateManyTaskInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutTaskInput | TimecardUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutTaskInput | TimecardUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type TimecardUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TimecardCreateWithoutTaskInput, TimecardUncheckedCreateWithoutTaskInput> | TimecardCreateWithoutTaskInput[] | TimecardUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutTaskInput | TimecardCreateOrConnectWithoutTaskInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutTaskInput | TimecardUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TimecardCreateManyTaskInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutTaskInput | TimecardUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutTaskInput | TimecardUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutDrawingsInput = {
    create?: XOR<JobCreateWithoutDrawingsInput, JobUncheckedCreateWithoutDrawingsInput>
    connectOrCreate?: JobCreateOrConnectWithoutDrawingsInput
    connect?: JobWhereUniqueInput
  }

  export type JobUpdateOneRequiredWithoutDrawingsNestedInput = {
    create?: XOR<JobCreateWithoutDrawingsInput, JobUncheckedCreateWithoutDrawingsInput>
    connectOrCreate?: JobCreateOrConnectWithoutDrawingsInput
    upsert?: JobUpsertWithoutDrawingsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutDrawingsInput, JobUpdateWithoutDrawingsInput>, JobUncheckedUpdateWithoutDrawingsInput>
  }

  export type JobCreateNestedOneWithoutBomItemsInput = {
    create?: XOR<JobCreateWithoutBomItemsInput, JobUncheckedCreateWithoutBomItemsInput>
    connectOrCreate?: JobCreateOrConnectWithoutBomItemsInput
    connect?: JobWhereUniqueInput
  }

  export type MaterialCreateNestedOneWithoutBomItemsInput = {
    create?: XOR<MaterialCreateWithoutBomItemsInput, MaterialUncheckedCreateWithoutBomItemsInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutBomItemsInput
    connect?: MaterialWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUpdateOneRequiredWithoutBomItemsNestedInput = {
    create?: XOR<JobCreateWithoutBomItemsInput, JobUncheckedCreateWithoutBomItemsInput>
    connectOrCreate?: JobCreateOrConnectWithoutBomItemsInput
    upsert?: JobUpsertWithoutBomItemsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutBomItemsInput, JobUpdateWithoutBomItemsInput>, JobUncheckedUpdateWithoutBomItemsInput>
  }

  export type MaterialUpdateOneRequiredWithoutBomItemsNestedInput = {
    create?: XOR<MaterialCreateWithoutBomItemsInput, MaterialUncheckedCreateWithoutBomItemsInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutBomItemsInput
    upsert?: MaterialUpsertWithoutBomItemsInput
    connect?: MaterialWhereUniqueInput
    update?: XOR<XOR<MaterialUpdateToOneWithWhereWithoutBomItemsInput, MaterialUpdateWithoutBomItemsInput>, MaterialUncheckedUpdateWithoutBomItemsInput>
  }

  export type BomItemCreateNestedManyWithoutMaterialInput = {
    create?: XOR<BomItemCreateWithoutMaterialInput, BomItemUncheckedCreateWithoutMaterialInput> | BomItemCreateWithoutMaterialInput[] | BomItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutMaterialInput | BomItemCreateOrConnectWithoutMaterialInput[]
    createMany?: BomItemCreateManyMaterialInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type HeatBatchCreateNestedManyWithoutMaterialInput = {
    create?: XOR<HeatBatchCreateWithoutMaterialInput, HeatBatchUncheckedCreateWithoutMaterialInput> | HeatBatchCreateWithoutMaterialInput[] | HeatBatchUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: HeatBatchCreateOrConnectWithoutMaterialInput | HeatBatchCreateOrConnectWithoutMaterialInput[]
    createMany?: HeatBatchCreateManyMaterialInputEnvelope
    connect?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
  }

  export type StockMovementCreateNestedManyWithoutMaterialInput = {
    create?: XOR<StockMovementCreateWithoutMaterialInput, StockMovementUncheckedCreateWithoutMaterialInput> | StockMovementCreateWithoutMaterialInput[] | StockMovementUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutMaterialInput | StockMovementCreateOrConnectWithoutMaterialInput[]
    createMany?: StockMovementCreateManyMaterialInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type PurchaseOrderItemCreateNestedManyWithoutMaterialInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMaterialInput, PurchaseOrderItemUncheckedCreateWithoutMaterialInput> | PurchaseOrderItemCreateWithoutMaterialInput[] | PurchaseOrderItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMaterialInput | PurchaseOrderItemCreateOrConnectWithoutMaterialInput[]
    createMany?: PurchaseOrderItemCreateManyMaterialInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type BomItemUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<BomItemCreateWithoutMaterialInput, BomItemUncheckedCreateWithoutMaterialInput> | BomItemCreateWithoutMaterialInput[] | BomItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutMaterialInput | BomItemCreateOrConnectWithoutMaterialInput[]
    createMany?: BomItemCreateManyMaterialInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type HeatBatchUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<HeatBatchCreateWithoutMaterialInput, HeatBatchUncheckedCreateWithoutMaterialInput> | HeatBatchCreateWithoutMaterialInput[] | HeatBatchUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: HeatBatchCreateOrConnectWithoutMaterialInput | HeatBatchCreateOrConnectWithoutMaterialInput[]
    createMany?: HeatBatchCreateManyMaterialInputEnvelope
    connect?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
  }

  export type StockMovementUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<StockMovementCreateWithoutMaterialInput, StockMovementUncheckedCreateWithoutMaterialInput> | StockMovementCreateWithoutMaterialInput[] | StockMovementUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutMaterialInput | StockMovementCreateOrConnectWithoutMaterialInput[]
    createMany?: StockMovementCreateManyMaterialInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type PurchaseOrderItemUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMaterialInput, PurchaseOrderItemUncheckedCreateWithoutMaterialInput> | PurchaseOrderItemCreateWithoutMaterialInput[] | PurchaseOrderItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMaterialInput | PurchaseOrderItemCreateOrConnectWithoutMaterialInput[]
    createMany?: PurchaseOrderItemCreateManyMaterialInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type BomItemUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<BomItemCreateWithoutMaterialInput, BomItemUncheckedCreateWithoutMaterialInput> | BomItemCreateWithoutMaterialInput[] | BomItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutMaterialInput | BomItemCreateOrConnectWithoutMaterialInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutMaterialInput | BomItemUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: BomItemCreateManyMaterialInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutMaterialInput | BomItemUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutMaterialInput | BomItemUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type HeatBatchUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<HeatBatchCreateWithoutMaterialInput, HeatBatchUncheckedCreateWithoutMaterialInput> | HeatBatchCreateWithoutMaterialInput[] | HeatBatchUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: HeatBatchCreateOrConnectWithoutMaterialInput | HeatBatchCreateOrConnectWithoutMaterialInput[]
    upsert?: HeatBatchUpsertWithWhereUniqueWithoutMaterialInput | HeatBatchUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: HeatBatchCreateManyMaterialInputEnvelope
    set?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    disconnect?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    delete?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    connect?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    update?: HeatBatchUpdateWithWhereUniqueWithoutMaterialInput | HeatBatchUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: HeatBatchUpdateManyWithWhereWithoutMaterialInput | HeatBatchUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: HeatBatchScalarWhereInput | HeatBatchScalarWhereInput[]
  }

  export type StockMovementUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<StockMovementCreateWithoutMaterialInput, StockMovementUncheckedCreateWithoutMaterialInput> | StockMovementCreateWithoutMaterialInput[] | StockMovementUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutMaterialInput | StockMovementCreateOrConnectWithoutMaterialInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutMaterialInput | StockMovementUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: StockMovementCreateManyMaterialInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutMaterialInput | StockMovementUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutMaterialInput | StockMovementUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type PurchaseOrderItemUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMaterialInput, PurchaseOrderItemUncheckedCreateWithoutMaterialInput> | PurchaseOrderItemCreateWithoutMaterialInput[] | PurchaseOrderItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMaterialInput | PurchaseOrderItemCreateOrConnectWithoutMaterialInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutMaterialInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: PurchaseOrderItemCreateManyMaterialInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutMaterialInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutMaterialInput | PurchaseOrderItemUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type BomItemUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<BomItemCreateWithoutMaterialInput, BomItemUncheckedCreateWithoutMaterialInput> | BomItemCreateWithoutMaterialInput[] | BomItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutMaterialInput | BomItemCreateOrConnectWithoutMaterialInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutMaterialInput | BomItemUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: BomItemCreateManyMaterialInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutMaterialInput | BomItemUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutMaterialInput | BomItemUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type HeatBatchUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<HeatBatchCreateWithoutMaterialInput, HeatBatchUncheckedCreateWithoutMaterialInput> | HeatBatchCreateWithoutMaterialInput[] | HeatBatchUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: HeatBatchCreateOrConnectWithoutMaterialInput | HeatBatchCreateOrConnectWithoutMaterialInput[]
    upsert?: HeatBatchUpsertWithWhereUniqueWithoutMaterialInput | HeatBatchUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: HeatBatchCreateManyMaterialInputEnvelope
    set?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    disconnect?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    delete?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    connect?: HeatBatchWhereUniqueInput | HeatBatchWhereUniqueInput[]
    update?: HeatBatchUpdateWithWhereUniqueWithoutMaterialInput | HeatBatchUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: HeatBatchUpdateManyWithWhereWithoutMaterialInput | HeatBatchUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: HeatBatchScalarWhereInput | HeatBatchScalarWhereInput[]
  }

  export type StockMovementUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<StockMovementCreateWithoutMaterialInput, StockMovementUncheckedCreateWithoutMaterialInput> | StockMovementCreateWithoutMaterialInput[] | StockMovementUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutMaterialInput | StockMovementCreateOrConnectWithoutMaterialInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutMaterialInput | StockMovementUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: StockMovementCreateManyMaterialInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutMaterialInput | StockMovementUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutMaterialInput | StockMovementUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMaterialInput, PurchaseOrderItemUncheckedCreateWithoutMaterialInput> | PurchaseOrderItemCreateWithoutMaterialInput[] | PurchaseOrderItemUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMaterialInput | PurchaseOrderItemCreateOrConnectWithoutMaterialInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutMaterialInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: PurchaseOrderItemCreateManyMaterialInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutMaterialInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutMaterialInput | PurchaseOrderItemUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type MaterialCreateNestedOneWithoutHeatBatchesInput = {
    create?: XOR<MaterialCreateWithoutHeatBatchesInput, MaterialUncheckedCreateWithoutHeatBatchesInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutHeatBatchesInput
    connect?: MaterialWhereUniqueInput
  }

  export type MaterialUpdateOneRequiredWithoutHeatBatchesNestedInput = {
    create?: XOR<MaterialCreateWithoutHeatBatchesInput, MaterialUncheckedCreateWithoutHeatBatchesInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutHeatBatchesInput
    upsert?: MaterialUpsertWithoutHeatBatchesInput
    connect?: MaterialWhereUniqueInput
    update?: XOR<XOR<MaterialUpdateToOneWithWhereWithoutHeatBatchesInput, MaterialUpdateWithoutHeatBatchesInput>, MaterialUncheckedUpdateWithoutHeatBatchesInput>
  }

  export type StockMovementCreateNestedManyWithoutFromLocationInput = {
    create?: XOR<StockMovementCreateWithoutFromLocationInput, StockMovementUncheckedCreateWithoutFromLocationInput> | StockMovementCreateWithoutFromLocationInput[] | StockMovementUncheckedCreateWithoutFromLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutFromLocationInput | StockMovementCreateOrConnectWithoutFromLocationInput[]
    createMany?: StockMovementCreateManyFromLocationInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type StockMovementCreateNestedManyWithoutToLocationInput = {
    create?: XOR<StockMovementCreateWithoutToLocationInput, StockMovementUncheckedCreateWithoutToLocationInput> | StockMovementCreateWithoutToLocationInput[] | StockMovementUncheckedCreateWithoutToLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutToLocationInput | StockMovementCreateOrConnectWithoutToLocationInput[]
    createMany?: StockMovementCreateManyToLocationInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type StockMovementUncheckedCreateNestedManyWithoutFromLocationInput = {
    create?: XOR<StockMovementCreateWithoutFromLocationInput, StockMovementUncheckedCreateWithoutFromLocationInput> | StockMovementCreateWithoutFromLocationInput[] | StockMovementUncheckedCreateWithoutFromLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutFromLocationInput | StockMovementCreateOrConnectWithoutFromLocationInput[]
    createMany?: StockMovementCreateManyFromLocationInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type StockMovementUncheckedCreateNestedManyWithoutToLocationInput = {
    create?: XOR<StockMovementCreateWithoutToLocationInput, StockMovementUncheckedCreateWithoutToLocationInput> | StockMovementCreateWithoutToLocationInput[] | StockMovementUncheckedCreateWithoutToLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutToLocationInput | StockMovementCreateOrConnectWithoutToLocationInput[]
    createMany?: StockMovementCreateManyToLocationInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type StockMovementUpdateManyWithoutFromLocationNestedInput = {
    create?: XOR<StockMovementCreateWithoutFromLocationInput, StockMovementUncheckedCreateWithoutFromLocationInput> | StockMovementCreateWithoutFromLocationInput[] | StockMovementUncheckedCreateWithoutFromLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutFromLocationInput | StockMovementCreateOrConnectWithoutFromLocationInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutFromLocationInput | StockMovementUpsertWithWhereUniqueWithoutFromLocationInput[]
    createMany?: StockMovementCreateManyFromLocationInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutFromLocationInput | StockMovementUpdateWithWhereUniqueWithoutFromLocationInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutFromLocationInput | StockMovementUpdateManyWithWhereWithoutFromLocationInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type StockMovementUpdateManyWithoutToLocationNestedInput = {
    create?: XOR<StockMovementCreateWithoutToLocationInput, StockMovementUncheckedCreateWithoutToLocationInput> | StockMovementCreateWithoutToLocationInput[] | StockMovementUncheckedCreateWithoutToLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutToLocationInput | StockMovementCreateOrConnectWithoutToLocationInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutToLocationInput | StockMovementUpsertWithWhereUniqueWithoutToLocationInput[]
    createMany?: StockMovementCreateManyToLocationInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutToLocationInput | StockMovementUpdateWithWhereUniqueWithoutToLocationInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutToLocationInput | StockMovementUpdateManyWithWhereWithoutToLocationInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type StockMovementUncheckedUpdateManyWithoutFromLocationNestedInput = {
    create?: XOR<StockMovementCreateWithoutFromLocationInput, StockMovementUncheckedCreateWithoutFromLocationInput> | StockMovementCreateWithoutFromLocationInput[] | StockMovementUncheckedCreateWithoutFromLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutFromLocationInput | StockMovementCreateOrConnectWithoutFromLocationInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutFromLocationInput | StockMovementUpsertWithWhereUniqueWithoutFromLocationInput[]
    createMany?: StockMovementCreateManyFromLocationInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutFromLocationInput | StockMovementUpdateWithWhereUniqueWithoutFromLocationInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutFromLocationInput | StockMovementUpdateManyWithWhereWithoutFromLocationInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type StockMovementUncheckedUpdateManyWithoutToLocationNestedInput = {
    create?: XOR<StockMovementCreateWithoutToLocationInput, StockMovementUncheckedCreateWithoutToLocationInput> | StockMovementCreateWithoutToLocationInput[] | StockMovementUncheckedCreateWithoutToLocationInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutToLocationInput | StockMovementCreateOrConnectWithoutToLocationInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutToLocationInput | StockMovementUpsertWithWhereUniqueWithoutToLocationInput[]
    createMany?: StockMovementCreateManyToLocationInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutToLocationInput | StockMovementUpdateWithWhereUniqueWithoutToLocationInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutToLocationInput | StockMovementUpdateManyWithWhereWithoutToLocationInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type MaterialCreateNestedOneWithoutStockMovesInput = {
    create?: XOR<MaterialCreateWithoutStockMovesInput, MaterialUncheckedCreateWithoutStockMovesInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutStockMovesInput
    connect?: MaterialWhereUniqueInput
  }

  export type StockLocationCreateNestedOneWithoutMovementsFromInput = {
    create?: XOR<StockLocationCreateWithoutMovementsFromInput, StockLocationUncheckedCreateWithoutMovementsFromInput>
    connectOrCreate?: StockLocationCreateOrConnectWithoutMovementsFromInput
    connect?: StockLocationWhereUniqueInput
  }

  export type StockLocationCreateNestedOneWithoutMovementsToInput = {
    create?: XOR<StockLocationCreateWithoutMovementsToInput, StockLocationUncheckedCreateWithoutMovementsToInput>
    connectOrCreate?: StockLocationCreateOrConnectWithoutMovementsToInput
    connect?: StockLocationWhereUniqueInput
  }

  export type MaterialUpdateOneRequiredWithoutStockMovesNestedInput = {
    create?: XOR<MaterialCreateWithoutStockMovesInput, MaterialUncheckedCreateWithoutStockMovesInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutStockMovesInput
    upsert?: MaterialUpsertWithoutStockMovesInput
    connect?: MaterialWhereUniqueInput
    update?: XOR<XOR<MaterialUpdateToOneWithWhereWithoutStockMovesInput, MaterialUpdateWithoutStockMovesInput>, MaterialUncheckedUpdateWithoutStockMovesInput>
  }

  export type StockLocationUpdateOneWithoutMovementsFromNestedInput = {
    create?: XOR<StockLocationCreateWithoutMovementsFromInput, StockLocationUncheckedCreateWithoutMovementsFromInput>
    connectOrCreate?: StockLocationCreateOrConnectWithoutMovementsFromInput
    upsert?: StockLocationUpsertWithoutMovementsFromInput
    disconnect?: StockLocationWhereInput | boolean
    delete?: StockLocationWhereInput | boolean
    connect?: StockLocationWhereUniqueInput
    update?: XOR<XOR<StockLocationUpdateToOneWithWhereWithoutMovementsFromInput, StockLocationUpdateWithoutMovementsFromInput>, StockLocationUncheckedUpdateWithoutMovementsFromInput>
  }

  export type StockLocationUpdateOneWithoutMovementsToNestedInput = {
    create?: XOR<StockLocationCreateWithoutMovementsToInput, StockLocationUncheckedCreateWithoutMovementsToInput>
    connectOrCreate?: StockLocationCreateOrConnectWithoutMovementsToInput
    upsert?: StockLocationUpsertWithoutMovementsToInput
    disconnect?: StockLocationWhereInput | boolean
    delete?: StockLocationWhereInput | boolean
    connect?: StockLocationWhereUniqueInput
    update?: XOR<XOR<StockLocationUpdateToOneWithWhereWithoutMovementsToInput, StockLocationUpdateWithoutMovementsToInput>, StockLocationUncheckedUpdateWithoutMovementsToInput>
  }

  export type UserCreateNestedOneWithoutTimecardsInput = {
    create?: XOR<UserCreateWithoutTimecardsInput, UserUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimecardsInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutTimecardsInput = {
    create?: XOR<JobCreateWithoutTimecardsInput, JobUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: JobCreateOrConnectWithoutTimecardsInput
    connect?: JobWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutTimecardsInput = {
    create?: XOR<TaskCreateWithoutTimecardsInput, TaskUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTimecardsInput
    connect?: TaskWhereUniqueInput
  }

  export type WpsSpecCreateNestedOneWithoutTimecardsInput = {
    create?: XOR<WpsSpecCreateWithoutTimecardsInput, WpsSpecUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutTimecardsInput
    connect?: WpsSpecWhereUniqueInput
  }

  export type WeldPassCreateNestedManyWithoutTimecardInput = {
    create?: XOR<WeldPassCreateWithoutTimecardInput, WeldPassUncheckedCreateWithoutTimecardInput> | WeldPassCreateWithoutTimecardInput[] | WeldPassUncheckedCreateWithoutTimecardInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutTimecardInput | WeldPassCreateOrConnectWithoutTimecardInput[]
    createMany?: WeldPassCreateManyTimecardInputEnvelope
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
  }

  export type WeldPassUncheckedCreateNestedManyWithoutTimecardInput = {
    create?: XOR<WeldPassCreateWithoutTimecardInput, WeldPassUncheckedCreateWithoutTimecardInput> | WeldPassCreateWithoutTimecardInput[] | WeldPassUncheckedCreateWithoutTimecardInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutTimecardInput | WeldPassCreateOrConnectWithoutTimecardInput[]
    createMany?: WeldPassCreateManyTimecardInputEnvelope
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTimecardsNestedInput = {
    create?: XOR<UserCreateWithoutTimecardsInput, UserUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimecardsInput
    upsert?: UserUpsertWithoutTimecardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimecardsInput, UserUpdateWithoutTimecardsInput>, UserUncheckedUpdateWithoutTimecardsInput>
  }

  export type JobUpdateOneWithoutTimecardsNestedInput = {
    create?: XOR<JobCreateWithoutTimecardsInput, JobUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: JobCreateOrConnectWithoutTimecardsInput
    upsert?: JobUpsertWithoutTimecardsInput
    disconnect?: JobWhereInput | boolean
    delete?: JobWhereInput | boolean
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutTimecardsInput, JobUpdateWithoutTimecardsInput>, JobUncheckedUpdateWithoutTimecardsInput>
  }

  export type TaskUpdateOneWithoutTimecardsNestedInput = {
    create?: XOR<TaskCreateWithoutTimecardsInput, TaskUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTimecardsInput
    upsert?: TaskUpsertWithoutTimecardsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutTimecardsInput, TaskUpdateWithoutTimecardsInput>, TaskUncheckedUpdateWithoutTimecardsInput>
  }

  export type WpsSpecUpdateOneWithoutTimecardsNestedInput = {
    create?: XOR<WpsSpecCreateWithoutTimecardsInput, WpsSpecUncheckedCreateWithoutTimecardsInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutTimecardsInput
    upsert?: WpsSpecUpsertWithoutTimecardsInput
    disconnect?: WpsSpecWhereInput | boolean
    delete?: WpsSpecWhereInput | boolean
    connect?: WpsSpecWhereUniqueInput
    update?: XOR<XOR<WpsSpecUpdateToOneWithWhereWithoutTimecardsInput, WpsSpecUpdateWithoutTimecardsInput>, WpsSpecUncheckedUpdateWithoutTimecardsInput>
  }

  export type WeldPassUpdateManyWithoutTimecardNestedInput = {
    create?: XOR<WeldPassCreateWithoutTimecardInput, WeldPassUncheckedCreateWithoutTimecardInput> | WeldPassCreateWithoutTimecardInput[] | WeldPassUncheckedCreateWithoutTimecardInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutTimecardInput | WeldPassCreateOrConnectWithoutTimecardInput[]
    upsert?: WeldPassUpsertWithWhereUniqueWithoutTimecardInput | WeldPassUpsertWithWhereUniqueWithoutTimecardInput[]
    createMany?: WeldPassCreateManyTimecardInputEnvelope
    set?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    disconnect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    delete?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    update?: WeldPassUpdateWithWhereUniqueWithoutTimecardInput | WeldPassUpdateWithWhereUniqueWithoutTimecardInput[]
    updateMany?: WeldPassUpdateManyWithWhereWithoutTimecardInput | WeldPassUpdateManyWithWhereWithoutTimecardInput[]
    deleteMany?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
  }

  export type WeldPassUncheckedUpdateManyWithoutTimecardNestedInput = {
    create?: XOR<WeldPassCreateWithoutTimecardInput, WeldPassUncheckedCreateWithoutTimecardInput> | WeldPassCreateWithoutTimecardInput[] | WeldPassUncheckedCreateWithoutTimecardInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutTimecardInput | WeldPassCreateOrConnectWithoutTimecardInput[]
    upsert?: WeldPassUpsertWithWhereUniqueWithoutTimecardInput | WeldPassUpsertWithWhereUniqueWithoutTimecardInput[]
    createMany?: WeldPassCreateManyTimecardInputEnvelope
    set?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    disconnect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    delete?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    update?: WeldPassUpdateWithWhereUniqueWithoutTimecardInput | WeldPassUpdateWithWhereUniqueWithoutTimecardInput[]
    updateMany?: WeldPassUpdateManyWithWhereWithoutTimecardInput | WeldPassUpdateManyWithWhereWithoutTimecardInput[]
    deleteMany?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
  }

  export type TimecardCreateNestedOneWithoutWeldPassesInput = {
    create?: XOR<TimecardCreateWithoutWeldPassesInput, TimecardUncheckedCreateWithoutWeldPassesInput>
    connectOrCreate?: TimecardCreateOrConnectWithoutWeldPassesInput
    connect?: TimecardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWeldPassesInput = {
    create?: XOR<UserCreateWithoutWeldPassesInput, UserUncheckedCreateWithoutWeldPassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeldPassesInput
    connect?: UserWhereUniqueInput
  }

  export type WpsSpecCreateNestedOneWithoutWeldPassesInput = {
    create?: XOR<WpsSpecCreateWithoutWeldPassesInput, WpsSpecUncheckedCreateWithoutWeldPassesInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutWeldPassesInput
    connect?: WpsSpecWhereUniqueInput
  }

  export type TimecardUpdateOneRequiredWithoutWeldPassesNestedInput = {
    create?: XOR<TimecardCreateWithoutWeldPassesInput, TimecardUncheckedCreateWithoutWeldPassesInput>
    connectOrCreate?: TimecardCreateOrConnectWithoutWeldPassesInput
    upsert?: TimecardUpsertWithoutWeldPassesInput
    connect?: TimecardWhereUniqueInput
    update?: XOR<XOR<TimecardUpdateToOneWithWhereWithoutWeldPassesInput, TimecardUpdateWithoutWeldPassesInput>, TimecardUncheckedUpdateWithoutWeldPassesInput>
  }

  export type UserUpdateOneRequiredWithoutWeldPassesNestedInput = {
    create?: XOR<UserCreateWithoutWeldPassesInput, UserUncheckedCreateWithoutWeldPassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeldPassesInput
    upsert?: UserUpsertWithoutWeldPassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWeldPassesInput, UserUpdateWithoutWeldPassesInput>, UserUncheckedUpdateWithoutWeldPassesInput>
  }

  export type WpsSpecUpdateOneRequiredWithoutWeldPassesNestedInput = {
    create?: XOR<WpsSpecCreateWithoutWeldPassesInput, WpsSpecUncheckedCreateWithoutWeldPassesInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutWeldPassesInput
    upsert?: WpsSpecUpsertWithoutWeldPassesInput
    connect?: WpsSpecWhereUniqueInput
    update?: XOR<XOR<WpsSpecUpdateToOneWithWhereWithoutWeldPassesInput, WpsSpecUpdateWithoutWeldPassesInput>, WpsSpecUncheckedUpdateWithoutWeldPassesInput>
  }

  export type WpsSpecCreatepositionsInput = {
    set: string[]
  }

  export type PqrTestCreateNestedManyWithoutWpsInput = {
    create?: XOR<PqrTestCreateWithoutWpsInput, PqrTestUncheckedCreateWithoutWpsInput> | PqrTestCreateWithoutWpsInput[] | PqrTestUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: PqrTestCreateOrConnectWithoutWpsInput | PqrTestCreateOrConnectWithoutWpsInput[]
    createMany?: PqrTestCreateManyWpsInputEnvelope
    connect?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
  }

  export type WelderCertCreateNestedManyWithoutWpsInput = {
    create?: XOR<WelderCertCreateWithoutWpsInput, WelderCertUncheckedCreateWithoutWpsInput> | WelderCertCreateWithoutWpsInput[] | WelderCertUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWpsInput | WelderCertCreateOrConnectWithoutWpsInput[]
    createMany?: WelderCertCreateManyWpsInputEnvelope
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
  }

  export type TimecardCreateNestedManyWithoutWpsInput = {
    create?: XOR<TimecardCreateWithoutWpsInput, TimecardUncheckedCreateWithoutWpsInput> | TimecardCreateWithoutWpsInput[] | TimecardUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutWpsInput | TimecardCreateOrConnectWithoutWpsInput[]
    createMany?: TimecardCreateManyWpsInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type WeldPassCreateNestedManyWithoutWpsInput = {
    create?: XOR<WeldPassCreateWithoutWpsInput, WeldPassUncheckedCreateWithoutWpsInput> | WeldPassCreateWithoutWpsInput[] | WeldPassUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWpsInput | WeldPassCreateOrConnectWithoutWpsInput[]
    createMany?: WeldPassCreateManyWpsInputEnvelope
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
  }

  export type PqrTestUncheckedCreateNestedManyWithoutWpsInput = {
    create?: XOR<PqrTestCreateWithoutWpsInput, PqrTestUncheckedCreateWithoutWpsInput> | PqrTestCreateWithoutWpsInput[] | PqrTestUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: PqrTestCreateOrConnectWithoutWpsInput | PqrTestCreateOrConnectWithoutWpsInput[]
    createMany?: PqrTestCreateManyWpsInputEnvelope
    connect?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
  }

  export type WelderCertUncheckedCreateNestedManyWithoutWpsInput = {
    create?: XOR<WelderCertCreateWithoutWpsInput, WelderCertUncheckedCreateWithoutWpsInput> | WelderCertCreateWithoutWpsInput[] | WelderCertUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWpsInput | WelderCertCreateOrConnectWithoutWpsInput[]
    createMany?: WelderCertCreateManyWpsInputEnvelope
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
  }

  export type TimecardUncheckedCreateNestedManyWithoutWpsInput = {
    create?: XOR<TimecardCreateWithoutWpsInput, TimecardUncheckedCreateWithoutWpsInput> | TimecardCreateWithoutWpsInput[] | TimecardUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutWpsInput | TimecardCreateOrConnectWithoutWpsInput[]
    createMany?: TimecardCreateManyWpsInputEnvelope
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
  }

  export type WeldPassUncheckedCreateNestedManyWithoutWpsInput = {
    create?: XOR<WeldPassCreateWithoutWpsInput, WeldPassUncheckedCreateWithoutWpsInput> | WeldPassCreateWithoutWpsInput[] | WeldPassUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWpsInput | WeldPassCreateOrConnectWithoutWpsInput[]
    createMany?: WeldPassCreateManyWpsInputEnvelope
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
  }

  export type WpsSpecUpdatepositionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PqrTestUpdateManyWithoutWpsNestedInput = {
    create?: XOR<PqrTestCreateWithoutWpsInput, PqrTestUncheckedCreateWithoutWpsInput> | PqrTestCreateWithoutWpsInput[] | PqrTestUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: PqrTestCreateOrConnectWithoutWpsInput | PqrTestCreateOrConnectWithoutWpsInput[]
    upsert?: PqrTestUpsertWithWhereUniqueWithoutWpsInput | PqrTestUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: PqrTestCreateManyWpsInputEnvelope
    set?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    disconnect?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    delete?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    connect?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    update?: PqrTestUpdateWithWhereUniqueWithoutWpsInput | PqrTestUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: PqrTestUpdateManyWithWhereWithoutWpsInput | PqrTestUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: PqrTestScalarWhereInput | PqrTestScalarWhereInput[]
  }

  export type WelderCertUpdateManyWithoutWpsNestedInput = {
    create?: XOR<WelderCertCreateWithoutWpsInput, WelderCertUncheckedCreateWithoutWpsInput> | WelderCertCreateWithoutWpsInput[] | WelderCertUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWpsInput | WelderCertCreateOrConnectWithoutWpsInput[]
    upsert?: WelderCertUpsertWithWhereUniqueWithoutWpsInput | WelderCertUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: WelderCertCreateManyWpsInputEnvelope
    set?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    disconnect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    delete?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    update?: WelderCertUpdateWithWhereUniqueWithoutWpsInput | WelderCertUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: WelderCertUpdateManyWithWhereWithoutWpsInput | WelderCertUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: WelderCertScalarWhereInput | WelderCertScalarWhereInput[]
  }

  export type TimecardUpdateManyWithoutWpsNestedInput = {
    create?: XOR<TimecardCreateWithoutWpsInput, TimecardUncheckedCreateWithoutWpsInput> | TimecardCreateWithoutWpsInput[] | TimecardUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutWpsInput | TimecardCreateOrConnectWithoutWpsInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutWpsInput | TimecardUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: TimecardCreateManyWpsInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutWpsInput | TimecardUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutWpsInput | TimecardUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type WeldPassUpdateManyWithoutWpsNestedInput = {
    create?: XOR<WeldPassCreateWithoutWpsInput, WeldPassUncheckedCreateWithoutWpsInput> | WeldPassCreateWithoutWpsInput[] | WeldPassUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWpsInput | WeldPassCreateOrConnectWithoutWpsInput[]
    upsert?: WeldPassUpsertWithWhereUniqueWithoutWpsInput | WeldPassUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: WeldPassCreateManyWpsInputEnvelope
    set?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    disconnect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    delete?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    update?: WeldPassUpdateWithWhereUniqueWithoutWpsInput | WeldPassUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: WeldPassUpdateManyWithWhereWithoutWpsInput | WeldPassUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
  }

  export type PqrTestUncheckedUpdateManyWithoutWpsNestedInput = {
    create?: XOR<PqrTestCreateWithoutWpsInput, PqrTestUncheckedCreateWithoutWpsInput> | PqrTestCreateWithoutWpsInput[] | PqrTestUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: PqrTestCreateOrConnectWithoutWpsInput | PqrTestCreateOrConnectWithoutWpsInput[]
    upsert?: PqrTestUpsertWithWhereUniqueWithoutWpsInput | PqrTestUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: PqrTestCreateManyWpsInputEnvelope
    set?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    disconnect?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    delete?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    connect?: PqrTestWhereUniqueInput | PqrTestWhereUniqueInput[]
    update?: PqrTestUpdateWithWhereUniqueWithoutWpsInput | PqrTestUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: PqrTestUpdateManyWithWhereWithoutWpsInput | PqrTestUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: PqrTestScalarWhereInput | PqrTestScalarWhereInput[]
  }

  export type WelderCertUncheckedUpdateManyWithoutWpsNestedInput = {
    create?: XOR<WelderCertCreateWithoutWpsInput, WelderCertUncheckedCreateWithoutWpsInput> | WelderCertCreateWithoutWpsInput[] | WelderCertUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WelderCertCreateOrConnectWithoutWpsInput | WelderCertCreateOrConnectWithoutWpsInput[]
    upsert?: WelderCertUpsertWithWhereUniqueWithoutWpsInput | WelderCertUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: WelderCertCreateManyWpsInputEnvelope
    set?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    disconnect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    delete?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    connect?: WelderCertWhereUniqueInput | WelderCertWhereUniqueInput[]
    update?: WelderCertUpdateWithWhereUniqueWithoutWpsInput | WelderCertUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: WelderCertUpdateManyWithWhereWithoutWpsInput | WelderCertUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: WelderCertScalarWhereInput | WelderCertScalarWhereInput[]
  }

  export type TimecardUncheckedUpdateManyWithoutWpsNestedInput = {
    create?: XOR<TimecardCreateWithoutWpsInput, TimecardUncheckedCreateWithoutWpsInput> | TimecardCreateWithoutWpsInput[] | TimecardUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: TimecardCreateOrConnectWithoutWpsInput | TimecardCreateOrConnectWithoutWpsInput[]
    upsert?: TimecardUpsertWithWhereUniqueWithoutWpsInput | TimecardUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: TimecardCreateManyWpsInputEnvelope
    set?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    disconnect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    delete?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    connect?: TimecardWhereUniqueInput | TimecardWhereUniqueInput[]
    update?: TimecardUpdateWithWhereUniqueWithoutWpsInput | TimecardUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: TimecardUpdateManyWithWhereWithoutWpsInput | TimecardUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
  }

  export type WeldPassUncheckedUpdateManyWithoutWpsNestedInput = {
    create?: XOR<WeldPassCreateWithoutWpsInput, WeldPassUncheckedCreateWithoutWpsInput> | WeldPassCreateWithoutWpsInput[] | WeldPassUncheckedCreateWithoutWpsInput[]
    connectOrCreate?: WeldPassCreateOrConnectWithoutWpsInput | WeldPassCreateOrConnectWithoutWpsInput[]
    upsert?: WeldPassUpsertWithWhereUniqueWithoutWpsInput | WeldPassUpsertWithWhereUniqueWithoutWpsInput[]
    createMany?: WeldPassCreateManyWpsInputEnvelope
    set?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    disconnect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    delete?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    connect?: WeldPassWhereUniqueInput | WeldPassWhereUniqueInput[]
    update?: WeldPassUpdateWithWhereUniqueWithoutWpsInput | WeldPassUpdateWithWhereUniqueWithoutWpsInput[]
    updateMany?: WeldPassUpdateManyWithWhereWithoutWpsInput | WeldPassUpdateManyWithWhereWithoutWpsInput[]
    deleteMany?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
  }

  export type WpsSpecCreateNestedOneWithoutPqrTestsInput = {
    create?: XOR<WpsSpecCreateWithoutPqrTestsInput, WpsSpecUncheckedCreateWithoutPqrTestsInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutPqrTestsInput
    connect?: WpsSpecWhereUniqueInput
  }

  export type WpsSpecUpdateOneRequiredWithoutPqrTestsNestedInput = {
    create?: XOR<WpsSpecCreateWithoutPqrTestsInput, WpsSpecUncheckedCreateWithoutPqrTestsInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutPqrTestsInput
    upsert?: WpsSpecUpsertWithoutPqrTestsInput
    connect?: WpsSpecWhereUniqueInput
    update?: XOR<XOR<WpsSpecUpdateToOneWithWhereWithoutPqrTestsInput, WpsSpecUpdateWithoutPqrTestsInput>, WpsSpecUncheckedUpdateWithoutPqrTestsInput>
  }

  export type UserCreateNestedOneWithoutWelderCertsInput = {
    create?: XOR<UserCreateWithoutWelderCertsInput, UserUncheckedCreateWithoutWelderCertsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWelderCertsInput
    connect?: UserWhereUniqueInput
  }

  export type WpsSpecCreateNestedOneWithoutWelderCertsInput = {
    create?: XOR<WpsSpecCreateWithoutWelderCertsInput, WpsSpecUncheckedCreateWithoutWelderCertsInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutWelderCertsInput
    connect?: WpsSpecWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWelderCertsNestedInput = {
    create?: XOR<UserCreateWithoutWelderCertsInput, UserUncheckedCreateWithoutWelderCertsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWelderCertsInput
    upsert?: UserUpsertWithoutWelderCertsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWelderCertsInput, UserUpdateWithoutWelderCertsInput>, UserUncheckedUpdateWithoutWelderCertsInput>
  }

  export type WpsSpecUpdateOneRequiredWithoutWelderCertsNestedInput = {
    create?: XOR<WpsSpecCreateWithoutWelderCertsInput, WpsSpecUncheckedCreateWithoutWelderCertsInput>
    connectOrCreate?: WpsSpecCreateOrConnectWithoutWelderCertsInput
    upsert?: WpsSpecUpsertWithoutWelderCertsInput
    connect?: WpsSpecWhereUniqueInput
    update?: XOR<XOR<WpsSpecUpdateToOneWithWhereWithoutWelderCertsInput, WpsSpecUpdateWithoutWelderCertsInput>, WpsSpecUncheckedUpdateWithoutWelderCertsInput>
  }

  export type InspectionCreatejointNumbersInput = {
    set: string[]
  }

  export type JobCreateNestedOneWithoutInspectionInput = {
    create?: XOR<JobCreateWithoutInspectionInput, JobUncheckedCreateWithoutInspectionInput>
    connectOrCreate?: JobCreateOrConnectWithoutInspectionInput
    connect?: JobWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInspectionsInput = {
    create?: XOR<UserCreateWithoutInspectionsInput, UserUncheckedCreateWithoutInspectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInspectionsInput
    connect?: UserWhereUniqueInput
  }

  export type WeldLogCreateNestedManyWithoutInspectionInput = {
    create?: XOR<WeldLogCreateWithoutInspectionInput, WeldLogUncheckedCreateWithoutInspectionInput> | WeldLogCreateWithoutInspectionInput[] | WeldLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: WeldLogCreateOrConnectWithoutInspectionInput | WeldLogCreateOrConnectWithoutInspectionInput[]
    createMany?: WeldLogCreateManyInspectionInputEnvelope
    connect?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
  }

  export type RepairLogCreateNestedManyWithoutInspectionInput = {
    create?: XOR<RepairLogCreateWithoutInspectionInput, RepairLogUncheckedCreateWithoutInspectionInput> | RepairLogCreateWithoutInspectionInput[] | RepairLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: RepairLogCreateOrConnectWithoutInspectionInput | RepairLogCreateOrConnectWithoutInspectionInput[]
    createMany?: RepairLogCreateManyInspectionInputEnvelope
    connect?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
  }

  export type WeldLogUncheckedCreateNestedManyWithoutInspectionInput = {
    create?: XOR<WeldLogCreateWithoutInspectionInput, WeldLogUncheckedCreateWithoutInspectionInput> | WeldLogCreateWithoutInspectionInput[] | WeldLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: WeldLogCreateOrConnectWithoutInspectionInput | WeldLogCreateOrConnectWithoutInspectionInput[]
    createMany?: WeldLogCreateManyInspectionInputEnvelope
    connect?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
  }

  export type RepairLogUncheckedCreateNestedManyWithoutInspectionInput = {
    create?: XOR<RepairLogCreateWithoutInspectionInput, RepairLogUncheckedCreateWithoutInspectionInput> | RepairLogCreateWithoutInspectionInput[] | RepairLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: RepairLogCreateOrConnectWithoutInspectionInput | RepairLogCreateOrConnectWithoutInspectionInput[]
    createMany?: RepairLogCreateManyInspectionInputEnvelope
    connect?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
  }

  export type EnumInspectionTypeFieldUpdateOperationsInput = {
    set?: $Enums.InspectionType
  }

  export type InspectionUpdatejointNumbersInput = {
    set?: string[]
    push?: string | string[]
  }

  export type JobUpdateOneWithoutInspectionNestedInput = {
    create?: XOR<JobCreateWithoutInspectionInput, JobUncheckedCreateWithoutInspectionInput>
    connectOrCreate?: JobCreateOrConnectWithoutInspectionInput
    upsert?: JobUpsertWithoutInspectionInput
    disconnect?: JobWhereInput | boolean
    delete?: JobWhereInput | boolean
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutInspectionInput, JobUpdateWithoutInspectionInput>, JobUncheckedUpdateWithoutInspectionInput>
  }

  export type UserUpdateOneWithoutInspectionsNestedInput = {
    create?: XOR<UserCreateWithoutInspectionsInput, UserUncheckedCreateWithoutInspectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInspectionsInput
    upsert?: UserUpsertWithoutInspectionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInspectionsInput, UserUpdateWithoutInspectionsInput>, UserUncheckedUpdateWithoutInspectionsInput>
  }

  export type WeldLogUpdateManyWithoutInspectionNestedInput = {
    create?: XOR<WeldLogCreateWithoutInspectionInput, WeldLogUncheckedCreateWithoutInspectionInput> | WeldLogCreateWithoutInspectionInput[] | WeldLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: WeldLogCreateOrConnectWithoutInspectionInput | WeldLogCreateOrConnectWithoutInspectionInput[]
    upsert?: WeldLogUpsertWithWhereUniqueWithoutInspectionInput | WeldLogUpsertWithWhereUniqueWithoutInspectionInput[]
    createMany?: WeldLogCreateManyInspectionInputEnvelope
    set?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    disconnect?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    delete?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    connect?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    update?: WeldLogUpdateWithWhereUniqueWithoutInspectionInput | WeldLogUpdateWithWhereUniqueWithoutInspectionInput[]
    updateMany?: WeldLogUpdateManyWithWhereWithoutInspectionInput | WeldLogUpdateManyWithWhereWithoutInspectionInput[]
    deleteMany?: WeldLogScalarWhereInput | WeldLogScalarWhereInput[]
  }

  export type RepairLogUpdateManyWithoutInspectionNestedInput = {
    create?: XOR<RepairLogCreateWithoutInspectionInput, RepairLogUncheckedCreateWithoutInspectionInput> | RepairLogCreateWithoutInspectionInput[] | RepairLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: RepairLogCreateOrConnectWithoutInspectionInput | RepairLogCreateOrConnectWithoutInspectionInput[]
    upsert?: RepairLogUpsertWithWhereUniqueWithoutInspectionInput | RepairLogUpsertWithWhereUniqueWithoutInspectionInput[]
    createMany?: RepairLogCreateManyInspectionInputEnvelope
    set?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    disconnect?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    delete?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    connect?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    update?: RepairLogUpdateWithWhereUniqueWithoutInspectionInput | RepairLogUpdateWithWhereUniqueWithoutInspectionInput[]
    updateMany?: RepairLogUpdateManyWithWhereWithoutInspectionInput | RepairLogUpdateManyWithWhereWithoutInspectionInput[]
    deleteMany?: RepairLogScalarWhereInput | RepairLogScalarWhereInput[]
  }

  export type WeldLogUncheckedUpdateManyWithoutInspectionNestedInput = {
    create?: XOR<WeldLogCreateWithoutInspectionInput, WeldLogUncheckedCreateWithoutInspectionInput> | WeldLogCreateWithoutInspectionInput[] | WeldLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: WeldLogCreateOrConnectWithoutInspectionInput | WeldLogCreateOrConnectWithoutInspectionInput[]
    upsert?: WeldLogUpsertWithWhereUniqueWithoutInspectionInput | WeldLogUpsertWithWhereUniqueWithoutInspectionInput[]
    createMany?: WeldLogCreateManyInspectionInputEnvelope
    set?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    disconnect?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    delete?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    connect?: WeldLogWhereUniqueInput | WeldLogWhereUniqueInput[]
    update?: WeldLogUpdateWithWhereUniqueWithoutInspectionInput | WeldLogUpdateWithWhereUniqueWithoutInspectionInput[]
    updateMany?: WeldLogUpdateManyWithWhereWithoutInspectionInput | WeldLogUpdateManyWithWhereWithoutInspectionInput[]
    deleteMany?: WeldLogScalarWhereInput | WeldLogScalarWhereInput[]
  }

  export type RepairLogUncheckedUpdateManyWithoutInspectionNestedInput = {
    create?: XOR<RepairLogCreateWithoutInspectionInput, RepairLogUncheckedCreateWithoutInspectionInput> | RepairLogCreateWithoutInspectionInput[] | RepairLogUncheckedCreateWithoutInspectionInput[]
    connectOrCreate?: RepairLogCreateOrConnectWithoutInspectionInput | RepairLogCreateOrConnectWithoutInspectionInput[]
    upsert?: RepairLogUpsertWithWhereUniqueWithoutInspectionInput | RepairLogUpsertWithWhereUniqueWithoutInspectionInput[]
    createMany?: RepairLogCreateManyInspectionInputEnvelope
    set?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    disconnect?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    delete?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    connect?: RepairLogWhereUniqueInput | RepairLogWhereUniqueInput[]
    update?: RepairLogUpdateWithWhereUniqueWithoutInspectionInput | RepairLogUpdateWithWhereUniqueWithoutInspectionInput[]
    updateMany?: RepairLogUpdateManyWithWhereWithoutInspectionInput | RepairLogUpdateManyWithWhereWithoutInspectionInput[]
    deleteMany?: RepairLogScalarWhereInput | RepairLogScalarWhereInput[]
  }

  export type WeldLogCreatedefectsInput = {
    set: string[]
  }

  export type InspectionCreateNestedOneWithoutWeldLogsInput = {
    create?: XOR<InspectionCreateWithoutWeldLogsInput, InspectionUncheckedCreateWithoutWeldLogsInput>
    connectOrCreate?: InspectionCreateOrConnectWithoutWeldLogsInput
    connect?: InspectionWhereUniqueInput
  }

  export type WeldLogUpdatedefectsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type InspectionUpdateOneRequiredWithoutWeldLogsNestedInput = {
    create?: XOR<InspectionCreateWithoutWeldLogsInput, InspectionUncheckedCreateWithoutWeldLogsInput>
    connectOrCreate?: InspectionCreateOrConnectWithoutWeldLogsInput
    upsert?: InspectionUpsertWithoutWeldLogsInput
    connect?: InspectionWhereUniqueInput
    update?: XOR<XOR<InspectionUpdateToOneWithWhereWithoutWeldLogsInput, InspectionUpdateWithoutWeldLogsInput>, InspectionUncheckedUpdateWithoutWeldLogsInput>
  }

  export type InspectionCreateNestedOneWithoutRepairLogsInput = {
    create?: XOR<InspectionCreateWithoutRepairLogsInput, InspectionUncheckedCreateWithoutRepairLogsInput>
    connectOrCreate?: InspectionCreateOrConnectWithoutRepairLogsInput
    connect?: InspectionWhereUniqueInput
  }

  export type InspectionUpdateOneRequiredWithoutRepairLogsNestedInput = {
    create?: XOR<InspectionCreateWithoutRepairLogsInput, InspectionUncheckedCreateWithoutRepairLogsInput>
    connectOrCreate?: InspectionCreateOrConnectWithoutRepairLogsInput
    upsert?: InspectionUpsertWithoutRepairLogsInput
    connect?: InspectionWhereUniqueInput
    update?: XOR<XOR<InspectionUpdateToOneWithWhereWithoutRepairLogsInput, InspectionUpdateWithoutRepairLogsInput>, InspectionUncheckedUpdateWithoutRepairLogsInput>
  }

  export type CompanyCreateNestedOneWithoutCustomersInput = {
    create?: XOR<CompanyCreateWithoutCustomersInput, CompanyUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCustomersInput
    connect?: CompanyWhereUniqueInput
  }

  export type JobCreateNestedManyWithoutCustomerInput = {
    create?: XOR<JobCreateWithoutCustomerInput, JobUncheckedCreateWithoutCustomerInput> | JobCreateWithoutCustomerInput[] | JobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCustomerInput | JobCreateOrConnectWithoutCustomerInput[]
    createMany?: JobCreateManyCustomerInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type QuoteCreateNestedManyWithoutCustomerInput = {
    create?: XOR<QuoteCreateWithoutCustomerInput, QuoteUncheckedCreateWithoutCustomerInput> | QuoteCreateWithoutCustomerInput[] | QuoteUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutCustomerInput | QuoteCreateOrConnectWithoutCustomerInput[]
    createMany?: QuoteCreateManyCustomerInputEnvelope
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutCustomerInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<JobCreateWithoutCustomerInput, JobUncheckedCreateWithoutCustomerInput> | JobCreateWithoutCustomerInput[] | JobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCustomerInput | JobCreateOrConnectWithoutCustomerInput[]
    createMany?: JobCreateManyCustomerInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type QuoteUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<QuoteCreateWithoutCustomerInput, QuoteUncheckedCreateWithoutCustomerInput> | QuoteCreateWithoutCustomerInput[] | QuoteUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutCustomerInput | QuoteCreateOrConnectWithoutCustomerInput[]
    createMany?: QuoteCreateManyCustomerInputEnvelope
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CompanyUpdateOneWithoutCustomersNestedInput = {
    create?: XOR<CompanyCreateWithoutCustomersInput, CompanyUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCustomersInput
    upsert?: CompanyUpsertWithoutCustomersInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutCustomersInput, CompanyUpdateWithoutCustomersInput>, CompanyUncheckedUpdateWithoutCustomersInput>
  }

  export type JobUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<JobCreateWithoutCustomerInput, JobUncheckedCreateWithoutCustomerInput> | JobCreateWithoutCustomerInput[] | JobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCustomerInput | JobCreateOrConnectWithoutCustomerInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCustomerInput | JobUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: JobCreateManyCustomerInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCustomerInput | JobUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCustomerInput | JobUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type QuoteUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<QuoteCreateWithoutCustomerInput, QuoteUncheckedCreateWithoutCustomerInput> | QuoteCreateWithoutCustomerInput[] | QuoteUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutCustomerInput | QuoteCreateOrConnectWithoutCustomerInput[]
    upsert?: QuoteUpsertWithWhereUniqueWithoutCustomerInput | QuoteUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: QuoteCreateManyCustomerInputEnvelope
    set?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    disconnect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    delete?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    update?: QuoteUpdateWithWhereUniqueWithoutCustomerInput | QuoteUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: QuoteUpdateManyWithWhereWithoutCustomerInput | QuoteUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCustomerInput | InvoiceUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCustomerInput | InvoiceUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCustomerInput | InvoiceUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<JobCreateWithoutCustomerInput, JobUncheckedCreateWithoutCustomerInput> | JobCreateWithoutCustomerInput[] | JobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCustomerInput | JobCreateOrConnectWithoutCustomerInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCustomerInput | JobUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: JobCreateManyCustomerInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCustomerInput | JobUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCustomerInput | JobUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type QuoteUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<QuoteCreateWithoutCustomerInput, QuoteUncheckedCreateWithoutCustomerInput> | QuoteCreateWithoutCustomerInput[] | QuoteUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutCustomerInput | QuoteCreateOrConnectWithoutCustomerInput[]
    upsert?: QuoteUpsertWithWhereUniqueWithoutCustomerInput | QuoteUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: QuoteCreateManyCustomerInputEnvelope
    set?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    disconnect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    delete?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    update?: QuoteUpdateWithWhereUniqueWithoutCustomerInput | QuoteUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: QuoteUpdateManyWithWhereWithoutCustomerInput | QuoteUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCustomerInput | InvoiceUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCustomerInput | InvoiceUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCustomerInput | InvoiceUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutVendorsInput = {
    create?: XOR<CompanyCreateWithoutVendorsInput, CompanyUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutVendorsInput
    connect?: CompanyWhereUniqueInput
  }

  export type PurchaseOrderCreateNestedManyWithoutVendorInput = {
    create?: XOR<PurchaseOrderCreateWithoutVendorInput, PurchaseOrderUncheckedCreateWithoutVendorInput> | PurchaseOrderCreateWithoutVendorInput[] | PurchaseOrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutVendorInput | PurchaseOrderCreateOrConnectWithoutVendorInput[]
    createMany?: PurchaseOrderCreateManyVendorInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<PurchaseOrderCreateWithoutVendorInput, PurchaseOrderUncheckedCreateWithoutVendorInput> | PurchaseOrderCreateWithoutVendorInput[] | PurchaseOrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutVendorInput | PurchaseOrderCreateOrConnectWithoutVendorInput[]
    createMany?: PurchaseOrderCreateManyVendorInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type CompanyUpdateOneWithoutVendorsNestedInput = {
    create?: XOR<CompanyCreateWithoutVendorsInput, CompanyUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutVendorsInput
    upsert?: CompanyUpsertWithoutVendorsInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutVendorsInput, CompanyUpdateWithoutVendorsInput>, CompanyUncheckedUpdateWithoutVendorsInput>
  }

  export type PurchaseOrderUpdateManyWithoutVendorNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutVendorInput, PurchaseOrderUncheckedCreateWithoutVendorInput> | PurchaseOrderCreateWithoutVendorInput[] | PurchaseOrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutVendorInput | PurchaseOrderCreateOrConnectWithoutVendorInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutVendorInput | PurchaseOrderUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: PurchaseOrderCreateManyVendorInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutVendorInput | PurchaseOrderUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutVendorInput | PurchaseOrderUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutVendorInput, PurchaseOrderUncheckedCreateWithoutVendorInput> | PurchaseOrderCreateWithoutVendorInput[] | PurchaseOrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutVendorInput | PurchaseOrderCreateOrConnectWithoutVendorInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutVendorInput | PurchaseOrderUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: PurchaseOrderCreateManyVendorInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutVendorInput | PurchaseOrderUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutVendorInput | PurchaseOrderUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type VendorCreateNestedOneWithoutPurchaseOrdersInput = {
    create?: XOR<VendorCreateWithoutPurchaseOrdersInput, VendorUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: VendorCreateOrConnectWithoutPurchaseOrdersInput
    connect?: VendorWhereUniqueInput
  }

  export type PurchaseOrderItemCreateNestedManyWithoutPoInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPoInput, PurchaseOrderItemUncheckedCreateWithoutPoInput> | PurchaseOrderItemCreateWithoutPoInput[] | PurchaseOrderItemUncheckedCreateWithoutPoInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPoInput | PurchaseOrderItemCreateOrConnectWithoutPoInput[]
    createMany?: PurchaseOrderItemCreateManyPoInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type PurchaseOrderItemUncheckedCreateNestedManyWithoutPoInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPoInput, PurchaseOrderItemUncheckedCreateWithoutPoInput> | PurchaseOrderItemCreateWithoutPoInput[] | PurchaseOrderItemUncheckedCreateWithoutPoInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPoInput | PurchaseOrderItemCreateOrConnectWithoutPoInput[]
    createMany?: PurchaseOrderItemCreateManyPoInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type EnumPoStatusFieldUpdateOperationsInput = {
    set?: $Enums.PoStatus
  }

  export type VendorUpdateOneRequiredWithoutPurchaseOrdersNestedInput = {
    create?: XOR<VendorCreateWithoutPurchaseOrdersInput, VendorUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: VendorCreateOrConnectWithoutPurchaseOrdersInput
    upsert?: VendorUpsertWithoutPurchaseOrdersInput
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutPurchaseOrdersInput, VendorUpdateWithoutPurchaseOrdersInput>, VendorUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type PurchaseOrderItemUpdateManyWithoutPoNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPoInput, PurchaseOrderItemUncheckedCreateWithoutPoInput> | PurchaseOrderItemCreateWithoutPoInput[] | PurchaseOrderItemUncheckedCreateWithoutPoInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPoInput | PurchaseOrderItemCreateOrConnectWithoutPoInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutPoInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutPoInput[]
    createMany?: PurchaseOrderItemCreateManyPoInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutPoInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutPoInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutPoInput | PurchaseOrderItemUpdateManyWithWhereWithoutPoInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutPoNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPoInput, PurchaseOrderItemUncheckedCreateWithoutPoInput> | PurchaseOrderItemCreateWithoutPoInput[] | PurchaseOrderItemUncheckedCreateWithoutPoInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPoInput | PurchaseOrderItemCreateOrConnectWithoutPoInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutPoInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutPoInput[]
    createMany?: PurchaseOrderItemCreateManyPoInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutPoInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutPoInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutPoInput | PurchaseOrderItemUpdateManyWithWhereWithoutPoInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type PurchaseOrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutItemsInput
    connect?: PurchaseOrderWhereUniqueInput
  }

  export type MaterialCreateNestedOneWithoutPoItemsInput = {
    create?: XOR<MaterialCreateWithoutPoItemsInput, MaterialUncheckedCreateWithoutPoItemsInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutPoItemsInput
    connect?: MaterialWhereUniqueInput
  }

  export type PurchaseOrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutItemsInput
    upsert?: PurchaseOrderUpsertWithoutItemsInput
    connect?: PurchaseOrderWhereUniqueInput
    update?: XOR<XOR<PurchaseOrderUpdateToOneWithWhereWithoutItemsInput, PurchaseOrderUpdateWithoutItemsInput>, PurchaseOrderUncheckedUpdateWithoutItemsInput>
  }

  export type MaterialUpdateOneRequiredWithoutPoItemsNestedInput = {
    create?: XOR<MaterialCreateWithoutPoItemsInput, MaterialUncheckedCreateWithoutPoItemsInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutPoItemsInput
    upsert?: MaterialUpsertWithoutPoItemsInput
    connect?: MaterialWhereUniqueInput
    update?: XOR<XOR<MaterialUpdateToOneWithWhereWithoutPoItemsInput, MaterialUpdateWithoutPoItemsInput>, MaterialUncheckedUpdateWithoutPoItemsInput>
  }

  export type CustomerCreateNestedOneWithoutQuotesInput = {
    create?: XOR<CustomerCreateWithoutQuotesInput, CustomerUncheckedCreateWithoutQuotesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutQuotesInput
    connect?: CustomerWhereUniqueInput
  }

  export type QuoteItemCreateNestedManyWithoutQuoteInput = {
    create?: XOR<QuoteItemCreateWithoutQuoteInput, QuoteItemUncheckedCreateWithoutQuoteInput> | QuoteItemCreateWithoutQuoteInput[] | QuoteItemUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: QuoteItemCreateOrConnectWithoutQuoteInput | QuoteItemCreateOrConnectWithoutQuoteInput[]
    createMany?: QuoteItemCreateManyQuoteInputEnvelope
    connect?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutQuoteInput = {
    create?: XOR<JobCreateWithoutQuoteInput, JobUncheckedCreateWithoutQuoteInput> | JobCreateWithoutQuoteInput[] | JobUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: JobCreateOrConnectWithoutQuoteInput | JobCreateOrConnectWithoutQuoteInput[]
    createMany?: JobCreateManyQuoteInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type QuoteItemUncheckedCreateNestedManyWithoutQuoteInput = {
    create?: XOR<QuoteItemCreateWithoutQuoteInput, QuoteItemUncheckedCreateWithoutQuoteInput> | QuoteItemCreateWithoutQuoteInput[] | QuoteItemUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: QuoteItemCreateOrConnectWithoutQuoteInput | QuoteItemCreateOrConnectWithoutQuoteInput[]
    createMany?: QuoteItemCreateManyQuoteInputEnvelope
    connect?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutQuoteInput = {
    create?: XOR<JobCreateWithoutQuoteInput, JobUncheckedCreateWithoutQuoteInput> | JobCreateWithoutQuoteInput[] | JobUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: JobCreateOrConnectWithoutQuoteInput | JobCreateOrConnectWithoutQuoteInput[]
    createMany?: JobCreateManyQuoteInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type EnumQuoteStatusFieldUpdateOperationsInput = {
    set?: $Enums.QuoteStatus
  }

  export type CustomerUpdateOneRequiredWithoutQuotesNestedInput = {
    create?: XOR<CustomerCreateWithoutQuotesInput, CustomerUncheckedCreateWithoutQuotesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutQuotesInput
    upsert?: CustomerUpsertWithoutQuotesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutQuotesInput, CustomerUpdateWithoutQuotesInput>, CustomerUncheckedUpdateWithoutQuotesInput>
  }

  export type QuoteItemUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<QuoteItemCreateWithoutQuoteInput, QuoteItemUncheckedCreateWithoutQuoteInput> | QuoteItemCreateWithoutQuoteInput[] | QuoteItemUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: QuoteItemCreateOrConnectWithoutQuoteInput | QuoteItemCreateOrConnectWithoutQuoteInput[]
    upsert?: QuoteItemUpsertWithWhereUniqueWithoutQuoteInput | QuoteItemUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: QuoteItemCreateManyQuoteInputEnvelope
    set?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    disconnect?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    delete?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    connect?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    update?: QuoteItemUpdateWithWhereUniqueWithoutQuoteInput | QuoteItemUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: QuoteItemUpdateManyWithWhereWithoutQuoteInput | QuoteItemUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: QuoteItemScalarWhereInput | QuoteItemScalarWhereInput[]
  }

  export type JobUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<JobCreateWithoutQuoteInput, JobUncheckedCreateWithoutQuoteInput> | JobCreateWithoutQuoteInput[] | JobUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: JobCreateOrConnectWithoutQuoteInput | JobCreateOrConnectWithoutQuoteInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutQuoteInput | JobUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: JobCreateManyQuoteInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutQuoteInput | JobUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: JobUpdateManyWithWhereWithoutQuoteInput | JobUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type QuoteItemUncheckedUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<QuoteItemCreateWithoutQuoteInput, QuoteItemUncheckedCreateWithoutQuoteInput> | QuoteItemCreateWithoutQuoteInput[] | QuoteItemUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: QuoteItemCreateOrConnectWithoutQuoteInput | QuoteItemCreateOrConnectWithoutQuoteInput[]
    upsert?: QuoteItemUpsertWithWhereUniqueWithoutQuoteInput | QuoteItemUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: QuoteItemCreateManyQuoteInputEnvelope
    set?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    disconnect?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    delete?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    connect?: QuoteItemWhereUniqueInput | QuoteItemWhereUniqueInput[]
    update?: QuoteItemUpdateWithWhereUniqueWithoutQuoteInput | QuoteItemUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: QuoteItemUpdateManyWithWhereWithoutQuoteInput | QuoteItemUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: QuoteItemScalarWhereInput | QuoteItemScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<JobCreateWithoutQuoteInput, JobUncheckedCreateWithoutQuoteInput> | JobCreateWithoutQuoteInput[] | JobUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: JobCreateOrConnectWithoutQuoteInput | JobCreateOrConnectWithoutQuoteInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutQuoteInput | JobUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: JobCreateManyQuoteInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutQuoteInput | JobUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: JobUpdateManyWithWhereWithoutQuoteInput | JobUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type QuoteCreateNestedOneWithoutItemsInput = {
    create?: XOR<QuoteCreateWithoutItemsInput, QuoteUncheckedCreateWithoutItemsInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutItemsInput
    connect?: QuoteWhereUniqueInput
  }

  export type QuoteUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<QuoteCreateWithoutItemsInput, QuoteUncheckedCreateWithoutItemsInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutItemsInput
    upsert?: QuoteUpsertWithoutItemsInput
    connect?: QuoteWhereUniqueInput
    update?: XOR<XOR<QuoteUpdateToOneWithWhereWithoutItemsInput, QuoteUpdateWithoutItemsInput>, QuoteUncheckedUpdateWithoutItemsInput>
  }

  export type CustomerCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutInvoicesInput
    connect?: CustomerWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<JobCreateWithoutInvoicesInput, JobUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: JobCreateOrConnectWithoutInvoicesInput
    connect?: JobWhereUniqueInput
  }

  export type InvoiceItemCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumInvoiceStatusFieldUpdateOperationsInput = {
    set?: $Enums.InvoiceStatus
  }

  export type CustomerUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutInvoicesInput
    upsert?: CustomerUpsertWithoutInvoicesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutInvoicesInput, CustomerUpdateWithoutInvoicesInput>, CustomerUncheckedUpdateWithoutInvoicesInput>
  }

  export type JobUpdateOneWithoutInvoicesNestedInput = {
    create?: XOR<JobCreateWithoutInvoicesInput, JobUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: JobCreateOrConnectWithoutInvoicesInput
    upsert?: JobUpsertWithoutInvoicesInput
    disconnect?: JobWhereInput | boolean
    delete?: JobWhereInput | boolean
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutInvoicesInput, JobUpdateWithoutInvoicesInput>, JobUncheckedUpdateWithoutInvoicesInput>
  }

  export type InvoiceItemUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvoiceInput | PaymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvoiceInput | PaymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvoiceInput | PaymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvoiceInput | PaymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvoiceInput | PaymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvoiceInput | PaymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutItemsInput = {
    create?: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItemsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItemsInput
    upsert?: InvoiceUpsertWithoutItemsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutItemsInput, InvoiceUpdateWithoutItemsInput>, InvoiceUncheckedUpdateWithoutItemsInput>
  }

  export type InvoiceCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type InvoiceUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentsInput
    upsert?: InvoiceUpsertWithoutPaymentsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutPaymentsInput, InvoiceUpdateWithoutPaymentsInput>, InvoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type ServiceLogCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<ServiceLogCreateWithoutEquipmentInput, ServiceLogUncheckedCreateWithoutEquipmentInput> | ServiceLogCreateWithoutEquipmentInput[] | ServiceLogUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ServiceLogCreateOrConnectWithoutEquipmentInput | ServiceLogCreateOrConnectWithoutEquipmentInput[]
    createMany?: ServiceLogCreateManyEquipmentInputEnvelope
    connect?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
  }

  export type ServiceLogUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<ServiceLogCreateWithoutEquipmentInput, ServiceLogUncheckedCreateWithoutEquipmentInput> | ServiceLogCreateWithoutEquipmentInput[] | ServiceLogUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ServiceLogCreateOrConnectWithoutEquipmentInput | ServiceLogCreateOrConnectWithoutEquipmentInput[]
    createMany?: ServiceLogCreateManyEquipmentInputEnvelope
    connect?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
  }

  export type EnumEquipmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.EquipmentType
  }

  export type ServiceLogUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<ServiceLogCreateWithoutEquipmentInput, ServiceLogUncheckedCreateWithoutEquipmentInput> | ServiceLogCreateWithoutEquipmentInput[] | ServiceLogUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ServiceLogCreateOrConnectWithoutEquipmentInput | ServiceLogCreateOrConnectWithoutEquipmentInput[]
    upsert?: ServiceLogUpsertWithWhereUniqueWithoutEquipmentInput | ServiceLogUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: ServiceLogCreateManyEquipmentInputEnvelope
    set?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    disconnect?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    delete?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    connect?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    update?: ServiceLogUpdateWithWhereUniqueWithoutEquipmentInput | ServiceLogUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: ServiceLogUpdateManyWithWhereWithoutEquipmentInput | ServiceLogUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: ServiceLogScalarWhereInput | ServiceLogScalarWhereInput[]
  }

  export type ServiceLogUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<ServiceLogCreateWithoutEquipmentInput, ServiceLogUncheckedCreateWithoutEquipmentInput> | ServiceLogCreateWithoutEquipmentInput[] | ServiceLogUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ServiceLogCreateOrConnectWithoutEquipmentInput | ServiceLogCreateOrConnectWithoutEquipmentInput[]
    upsert?: ServiceLogUpsertWithWhereUniqueWithoutEquipmentInput | ServiceLogUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: ServiceLogCreateManyEquipmentInputEnvelope
    set?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    disconnect?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    delete?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    connect?: ServiceLogWhereUniqueInput | ServiceLogWhereUniqueInput[]
    update?: ServiceLogUpdateWithWhereUniqueWithoutEquipmentInput | ServiceLogUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: ServiceLogUpdateManyWithWhereWithoutEquipmentInput | ServiceLogUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: ServiceLogScalarWhereInput | ServiceLogScalarWhereInput[]
  }

  export type EquipmentCreateNestedOneWithoutServiceLogsInput = {
    create?: XOR<EquipmentCreateWithoutServiceLogsInput, EquipmentUncheckedCreateWithoutServiceLogsInput>
    connectOrCreate?: EquipmentCreateOrConnectWithoutServiceLogsInput
    connect?: EquipmentWhereUniqueInput
  }

  export type EnumServiceTypeFieldUpdateOperationsInput = {
    set?: $Enums.ServiceType
  }

  export type EquipmentUpdateOneRequiredWithoutServiceLogsNestedInput = {
    create?: XOR<EquipmentCreateWithoutServiceLogsInput, EquipmentUncheckedCreateWithoutServiceLogsInput>
    connectOrCreate?: EquipmentCreateOrConnectWithoutServiceLogsInput
    upsert?: EquipmentUpsertWithoutServiceLogsInput
    connect?: EquipmentWhereUniqueInput
    update?: XOR<XOR<EquipmentUpdateToOneWithWhereWithoutServiceLogsInput, EquipmentUpdateWithoutServiceLogsInput>, EquipmentUncheckedUpdateWithoutServiceLogsInput>
  }

  export type JobCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<JobCreateWithoutWorkOrdersInput, JobUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: JobCreateOrConnectWithoutWorkOrdersInput
    connect?: JobWhereUniqueInput
  }

  export type TruckTripCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<TruckTripCreateWithoutWorkOrderInput, TruckTripUncheckedCreateWithoutWorkOrderInput> | TruckTripCreateWithoutWorkOrderInput[] | TruckTripUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutWorkOrderInput | TruckTripCreateOrConnectWithoutWorkOrderInput[]
    createMany?: TruckTripCreateManyWorkOrderInputEnvelope
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
  }

  export type TruckTripUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<TruckTripCreateWithoutWorkOrderInput, TruckTripUncheckedCreateWithoutWorkOrderInput> | TruckTripCreateWithoutWorkOrderInput[] | TruckTripUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutWorkOrderInput | TruckTripCreateOrConnectWithoutWorkOrderInput[]
    createMany?: TruckTripCreateManyWorkOrderInputEnvelope
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
  }

  export type EnumWorkOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.WorkOrderStatus
  }

  export type JobUpdateOneWithoutWorkOrdersNestedInput = {
    create?: XOR<JobCreateWithoutWorkOrdersInput, JobUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: JobCreateOrConnectWithoutWorkOrdersInput
    upsert?: JobUpsertWithoutWorkOrdersInput
    disconnect?: JobWhereInput | boolean
    delete?: JobWhereInput | boolean
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutWorkOrdersInput, JobUpdateWithoutWorkOrdersInput>, JobUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type TruckTripUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<TruckTripCreateWithoutWorkOrderInput, TruckTripUncheckedCreateWithoutWorkOrderInput> | TruckTripCreateWithoutWorkOrderInput[] | TruckTripUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutWorkOrderInput | TruckTripCreateOrConnectWithoutWorkOrderInput[]
    upsert?: TruckTripUpsertWithWhereUniqueWithoutWorkOrderInput | TruckTripUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: TruckTripCreateManyWorkOrderInputEnvelope
    set?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    disconnect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    delete?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    update?: TruckTripUpdateWithWhereUniqueWithoutWorkOrderInput | TruckTripUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: TruckTripUpdateManyWithWhereWithoutWorkOrderInput | TruckTripUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: TruckTripScalarWhereInput | TruckTripScalarWhereInput[]
  }

  export type TruckTripUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<TruckTripCreateWithoutWorkOrderInput, TruckTripUncheckedCreateWithoutWorkOrderInput> | TruckTripCreateWithoutWorkOrderInput[] | TruckTripUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: TruckTripCreateOrConnectWithoutWorkOrderInput | TruckTripCreateOrConnectWithoutWorkOrderInput[]
    upsert?: TruckTripUpsertWithWhereUniqueWithoutWorkOrderInput | TruckTripUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: TruckTripCreateManyWorkOrderInputEnvelope
    set?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    disconnect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    delete?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    connect?: TruckTripWhereUniqueInput | TruckTripWhereUniqueInput[]
    update?: TruckTripUpdateWithWhereUniqueWithoutWorkOrderInput | TruckTripUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: TruckTripUpdateManyWithWhereWithoutWorkOrderInput | TruckTripUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: TruckTripScalarWhereInput | TruckTripScalarWhereInput[]
  }

  export type TruckTripCreatephotosInput = {
    set: string[]
  }

  export type WorkOrderCreateNestedOneWithoutTruckTripsInput = {
    create?: XOR<WorkOrderCreateWithoutTruckTripsInput, WorkOrderUncheckedCreateWithoutTruckTripsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutTruckTripsInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTruckTripsInput = {
    create?: XOR<UserCreateWithoutTruckTripsInput, UserUncheckedCreateWithoutTruckTripsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTruckTripsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TruckTripUpdatephotosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type WorkOrderUpdateOneRequiredWithoutTruckTripsNestedInput = {
    create?: XOR<WorkOrderCreateWithoutTruckTripsInput, WorkOrderUncheckedCreateWithoutTruckTripsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutTruckTripsInput
    upsert?: WorkOrderUpsertWithoutTruckTripsInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutTruckTripsInput, WorkOrderUpdateWithoutTruckTripsInput>, WorkOrderUncheckedUpdateWithoutTruckTripsInput>
  }

  export type UserUpdateOneRequiredWithoutTruckTripsNestedInput = {
    create?: XOR<UserCreateWithoutTruckTripsInput, UserUncheckedCreateWithoutTruckTripsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTruckTripsInput
    upsert?: UserUpsertWithoutTruckTripsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTruckTripsInput, UserUpdateWithoutTruckTripsInput>, UserUncheckedUpdateWithoutTruckTripsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPhaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusFilter<$PrismaModel> | $Enums.PhaseStatus
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.PhaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhaseStatusFilter<$PrismaModel>
    _max?: NestedEnumPhaseStatusFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumInspectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InspectionType | EnumInspectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInspectionTypeFilter<$PrismaModel> | $Enums.InspectionType
  }

  export type NestedEnumInspectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InspectionType | EnumInspectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InspectionType[] | ListEnumInspectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInspectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InspectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInspectionTypeFilter<$PrismaModel>
    _max?: NestedEnumInspectionTypeFilter<$PrismaModel>
  }

  export type NestedEnumPoStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PoStatus | EnumPoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPoStatusFilter<$PrismaModel> | $Enums.PoStatus
  }

  export type NestedEnumPoStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PoStatus | EnumPoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PoStatus[] | ListEnumPoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPoStatusWithAggregatesFilter<$PrismaModel> | $Enums.PoStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPoStatusFilter<$PrismaModel>
    _max?: NestedEnumPoStatusFilter<$PrismaModel>
  }

  export type NestedEnumQuoteStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuoteStatus | EnumQuoteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuoteStatusFilter<$PrismaModel> | $Enums.QuoteStatus
  }

  export type NestedEnumQuoteStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuoteStatus | EnumQuoteStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuoteStatus[] | ListEnumQuoteStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuoteStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuoteStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuoteStatusFilter<$PrismaModel>
    _max?: NestedEnumQuoteStatusFilter<$PrismaModel>
  }

  export type NestedEnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumEquipmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EquipmentType | EnumEquipmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentTypeFilter<$PrismaModel> | $Enums.EquipmentType
  }

  export type NestedEnumEquipmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EquipmentType | EnumEquipmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EquipmentType[] | ListEnumEquipmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.EquipmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEquipmentTypeFilter<$PrismaModel>
    _max?: NestedEnumEquipmentTypeFilter<$PrismaModel>
  }

  export type NestedEnumServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeFilter<$PrismaModel> | $Enums.ServiceType
  }

  export type NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeFilter<$PrismaModel>
  }

  export type NestedEnumWorkOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusFilter<$PrismaModel> | $Enums.WorkOrderStatus
  }

  export type NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type WelderCertCreateWithoutWelderInput = {
    id?: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
    wps: WpsSpecCreateNestedOneWithoutWelderCertsInput
  }

  export type WelderCertUncheckedCreateWithoutWelderInput = {
    id?: string
    wpsId: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
  }

  export type WelderCertCreateOrConnectWithoutWelderInput = {
    where: WelderCertWhereUniqueInput
    create: XOR<WelderCertCreateWithoutWelderInput, WelderCertUncheckedCreateWithoutWelderInput>
  }

  export type WelderCertCreateManyWelderInputEnvelope = {
    data: WelderCertCreateManyWelderInput | WelderCertCreateManyWelderInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type CompanyCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    customers?: CustomerCreateNestedManyWithoutCompanyInput
    vendors?: VendorCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    customers?: CustomerUncheckedCreateNestedManyWithoutCompanyInput
    vendors?: VendorUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUsersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
  }

  export type TimecardCreateWithoutUserInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    job?: JobCreateNestedOneWithoutTimecardsInput
    task?: TaskCreateNestedOneWithoutTimecardsInput
    wps?: WpsSpecCreateNestedOneWithoutTimecardsInput
    weldPasses?: WeldPassCreateNestedManyWithoutTimecardInput
  }

  export type TimecardUncheckedCreateWithoutUserInput = {
    id?: string
    jobId?: string | null
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutTimecardInput
  }

  export type TimecardCreateOrConnectWithoutUserInput = {
    where: TimecardWhereUniqueInput
    create: XOR<TimecardCreateWithoutUserInput, TimecardUncheckedCreateWithoutUserInput>
  }

  export type TimecardCreateManyUserInputEnvelope = {
    data: TimecardCreateManyUserInput | TimecardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WeldPassCreateWithoutWelderInput = {
    id?: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
    timecard: TimecardCreateNestedOneWithoutWeldPassesInput
    wps: WpsSpecCreateNestedOneWithoutWeldPassesInput
  }

  export type WeldPassUncheckedCreateWithoutWelderInput = {
    id?: string
    timecardId: string
    wpsId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type WeldPassCreateOrConnectWithoutWelderInput = {
    where: WeldPassWhereUniqueInput
    create: XOR<WeldPassCreateWithoutWelderInput, WeldPassUncheckedCreateWithoutWelderInput>
  }

  export type WeldPassCreateManyWelderInputEnvelope = {
    data: WeldPassCreateManyWelderInput | WeldPassCreateManyWelderInput[]
    skipDuplicates?: boolean
  }

  export type InspectionCreateWithoutInspectorInput = {
    id?: string
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    job?: JobCreateNestedOneWithoutInspectionInput
    weldLogs?: WeldLogCreateNestedManyWithoutInspectionInput
    repairLogs?: RepairLogCreateNestedManyWithoutInspectionInput
  }

  export type InspectionUncheckedCreateWithoutInspectorInput = {
    id?: string
    jobId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    weldLogs?: WeldLogUncheckedCreateNestedManyWithoutInspectionInput
    repairLogs?: RepairLogUncheckedCreateNestedManyWithoutInspectionInput
  }

  export type InspectionCreateOrConnectWithoutInspectorInput = {
    where: InspectionWhereUniqueInput
    create: XOR<InspectionCreateWithoutInspectorInput, InspectionUncheckedCreateWithoutInspectorInput>
  }

  export type InspectionCreateManyInspectorInputEnvelope = {
    data: InspectionCreateManyInspectorInput | InspectionCreateManyInspectorInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutCreatedByInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutCreatedByInput, JobUncheckedCreateWithoutCreatedByInput>
  }

  export type JobCreateManyCreatedByInputEnvelope = {
    data: JobCreateManyCreatedByInput | JobCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TruckTripCreateWithoutDriverInput = {
    id?: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutTruckTripsInput
  }

  export type TruckTripUncheckedCreateWithoutDriverInput = {
    id?: string
    workOrderId: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type TruckTripCreateOrConnectWithoutDriverInput = {
    where: TruckTripWhereUniqueInput
    create: XOR<TruckTripCreateWithoutDriverInput, TruckTripUncheckedCreateWithoutDriverInput>
  }

  export type TruckTripCreateManyDriverInputEnvelope = {
    data: TruckTripCreateManyDriverInput | TruckTripCreateManyDriverInput[]
    skipDuplicates?: boolean
  }

  export type WelderCertUpsertWithWhereUniqueWithoutWelderInput = {
    where: WelderCertWhereUniqueInput
    update: XOR<WelderCertUpdateWithoutWelderInput, WelderCertUncheckedUpdateWithoutWelderInput>
    create: XOR<WelderCertCreateWithoutWelderInput, WelderCertUncheckedCreateWithoutWelderInput>
  }

  export type WelderCertUpdateWithWhereUniqueWithoutWelderInput = {
    where: WelderCertWhereUniqueInput
    data: XOR<WelderCertUpdateWithoutWelderInput, WelderCertUncheckedUpdateWithoutWelderInput>
  }

  export type WelderCertUpdateManyWithWhereWithoutWelderInput = {
    where: WelderCertScalarWhereInput
    data: XOR<WelderCertUpdateManyMutationInput, WelderCertUncheckedUpdateManyWithoutWelderInput>
  }

  export type WelderCertScalarWhereInput = {
    AND?: WelderCertScalarWhereInput | WelderCertScalarWhereInput[]
    OR?: WelderCertScalarWhereInput[]
    NOT?: WelderCertScalarWhereInput | WelderCertScalarWhereInput[]
    id?: StringFilter<"WelderCert"> | string
    welderId?: StringFilter<"WelderCert"> | string
    wpsId?: StringFilter<"WelderCert"> | string
    certNumber?: StringFilter<"WelderCert"> | string
    issuedAt?: DateTimeFilter<"WelderCert"> | Date | string
    expiresAt?: DateTimeFilter<"WelderCert"> | Date | string
    isActive?: BoolFilter<"WelderCert"> | boolean
    certPdfUrl?: StringNullableFilter<"WelderCert"> | string | null
    createdAt?: DateTimeFilter<"WelderCert"> | Date | string
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type CompanyUpsertWithoutUsersInput = {
    update: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUsersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type CompanyUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: CustomerUpdateManyWithoutCompanyNestedInput
    vendors?: VendorUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: CustomerUncheckedUpdateManyWithoutCompanyNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type TimecardUpsertWithWhereUniqueWithoutUserInput = {
    where: TimecardWhereUniqueInput
    update: XOR<TimecardUpdateWithoutUserInput, TimecardUncheckedUpdateWithoutUserInput>
    create: XOR<TimecardCreateWithoutUserInput, TimecardUncheckedCreateWithoutUserInput>
  }

  export type TimecardUpdateWithWhereUniqueWithoutUserInput = {
    where: TimecardWhereUniqueInput
    data: XOR<TimecardUpdateWithoutUserInput, TimecardUncheckedUpdateWithoutUserInput>
  }

  export type TimecardUpdateManyWithWhereWithoutUserInput = {
    where: TimecardScalarWhereInput
    data: XOR<TimecardUpdateManyMutationInput, TimecardUncheckedUpdateManyWithoutUserInput>
  }

  export type TimecardScalarWhereInput = {
    AND?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
    OR?: TimecardScalarWhereInput[]
    NOT?: TimecardScalarWhereInput | TimecardScalarWhereInput[]
    id?: StringFilter<"Timecard"> | string
    userId?: StringFilter<"Timecard"> | string
    jobId?: StringNullableFilter<"Timecard"> | string | null
    taskId?: StringNullableFilter<"Timecard"> | string | null
    startTime?: DateTimeFilter<"Timecard"> | Date | string
    endTime?: DateTimeNullableFilter<"Timecard"> | Date | string | null
    totalHours?: FloatNullableFilter<"Timecard"> | number | null
    wpsId?: StringNullableFilter<"Timecard"> | string | null
    notes?: StringNullableFilter<"Timecard"> | string | null
    isApproved?: BoolFilter<"Timecard"> | boolean
    createdAt?: DateTimeFilter<"Timecard"> | Date | string
  }

  export type WeldPassUpsertWithWhereUniqueWithoutWelderInput = {
    where: WeldPassWhereUniqueInput
    update: XOR<WeldPassUpdateWithoutWelderInput, WeldPassUncheckedUpdateWithoutWelderInput>
    create: XOR<WeldPassCreateWithoutWelderInput, WeldPassUncheckedCreateWithoutWelderInput>
  }

  export type WeldPassUpdateWithWhereUniqueWithoutWelderInput = {
    where: WeldPassWhereUniqueInput
    data: XOR<WeldPassUpdateWithoutWelderInput, WeldPassUncheckedUpdateWithoutWelderInput>
  }

  export type WeldPassUpdateManyWithWhereWithoutWelderInput = {
    where: WeldPassScalarWhereInput
    data: XOR<WeldPassUpdateManyMutationInput, WeldPassUncheckedUpdateManyWithoutWelderInput>
  }

  export type WeldPassScalarWhereInput = {
    AND?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
    OR?: WeldPassScalarWhereInput[]
    NOT?: WeldPassScalarWhereInput | WeldPassScalarWhereInput[]
    id?: StringFilter<"WeldPass"> | string
    timecardId?: StringFilter<"WeldPass"> | string
    welderId?: StringFilter<"WeldPass"> | string
    wpsId?: StringFilter<"WeldPass"> | string
    jointNumber?: StringNullableFilter<"WeldPass"> | string | null
    passNumber?: IntFilter<"WeldPass"> | number
    amps?: FloatNullableFilter<"WeldPass"> | number | null
    volts?: FloatNullableFilter<"WeldPass"> | number | null
    wireFeed?: FloatNullableFilter<"WeldPass"> | number | null
    travelSpeed?: FloatNullableFilter<"WeldPass"> | number | null
    notes?: StringNullableFilter<"WeldPass"> | string | null
    createdAt?: DateTimeFilter<"WeldPass"> | Date | string
  }

  export type InspectionUpsertWithWhereUniqueWithoutInspectorInput = {
    where: InspectionWhereUniqueInput
    update: XOR<InspectionUpdateWithoutInspectorInput, InspectionUncheckedUpdateWithoutInspectorInput>
    create: XOR<InspectionCreateWithoutInspectorInput, InspectionUncheckedCreateWithoutInspectorInput>
  }

  export type InspectionUpdateWithWhereUniqueWithoutInspectorInput = {
    where: InspectionWhereUniqueInput
    data: XOR<InspectionUpdateWithoutInspectorInput, InspectionUncheckedUpdateWithoutInspectorInput>
  }

  export type InspectionUpdateManyWithWhereWithoutInspectorInput = {
    where: InspectionScalarWhereInput
    data: XOR<InspectionUpdateManyMutationInput, InspectionUncheckedUpdateManyWithoutInspectorInput>
  }

  export type InspectionScalarWhereInput = {
    AND?: InspectionScalarWhereInput | InspectionScalarWhereInput[]
    OR?: InspectionScalarWhereInput[]
    NOT?: InspectionScalarWhereInput | InspectionScalarWhereInput[]
    id?: StringFilter<"Inspection"> | string
    jobId?: StringNullableFilter<"Inspection"> | string | null
    inspectorId?: StringNullableFilter<"Inspection"> | string | null
    inspectionType?: EnumInspectionTypeFilter<"Inspection"> | $Enums.InspectionType
    jointNumbers?: StringNullableListFilter<"Inspection">
    result?: StringFilter<"Inspection"> | string
    notes?: StringNullableFilter<"Inspection"> | string | null
    reportUrl?: StringNullableFilter<"Inspection"> | string | null
    inspectedAt?: DateTimeFilter<"Inspection"> | Date | string
    createdAt?: DateTimeFilter<"Inspection"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type JobUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutCreatedByInput, JobUncheckedUpdateWithoutCreatedByInput>
    create: XOR<JobCreateWithoutCreatedByInput, JobUncheckedCreateWithoutCreatedByInput>
  }

  export type JobUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutCreatedByInput, JobUncheckedUpdateWithoutCreatedByInput>
  }

  export type JobUpdateManyWithWhereWithoutCreatedByInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringNullableFilter<"Job"> | string | null
    customerId?: StringFilter<"Job"> | string
    quoteId?: StringNullableFilter<"Job"> | string | null
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityFilter<"Job"> | $Enums.Priority
    dueDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    startDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    createdById?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }

  export type TruckTripUpsertWithWhereUniqueWithoutDriverInput = {
    where: TruckTripWhereUniqueInput
    update: XOR<TruckTripUpdateWithoutDriverInput, TruckTripUncheckedUpdateWithoutDriverInput>
    create: XOR<TruckTripCreateWithoutDriverInput, TruckTripUncheckedCreateWithoutDriverInput>
  }

  export type TruckTripUpdateWithWhereUniqueWithoutDriverInput = {
    where: TruckTripWhereUniqueInput
    data: XOR<TruckTripUpdateWithoutDriverInput, TruckTripUncheckedUpdateWithoutDriverInput>
  }

  export type TruckTripUpdateManyWithWhereWithoutDriverInput = {
    where: TruckTripScalarWhereInput
    data: XOR<TruckTripUpdateManyMutationInput, TruckTripUncheckedUpdateManyWithoutDriverInput>
  }

  export type TruckTripScalarWhereInput = {
    AND?: TruckTripScalarWhereInput | TruckTripScalarWhereInput[]
    OR?: TruckTripScalarWhereInput[]
    NOT?: TruckTripScalarWhereInput | TruckTripScalarWhereInput[]
    id?: StringFilter<"TruckTrip"> | string
    workOrderId?: StringFilter<"TruckTrip"> | string
    driverId?: StringFilter<"TruckTrip"> | string
    truckId?: StringNullableFilter<"TruckTrip"> | string | null
    startTime?: DateTimeNullableFilter<"TruckTrip"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TruckTrip"> | Date | string | null
    odometerStart?: IntNullableFilter<"TruckTrip"> | number | null
    odometerEnd?: IntNullableFilter<"TruckTrip"> | number | null
    gpsStart?: JsonNullableFilter<"TruckTrip">
    gpsEnd?: JsonNullableFilter<"TruckTrip">
    photos?: StringNullableListFilter<"TruckTrip">
    signature?: StringNullableFilter<"TruckTrip"> | string | null
    notes?: StringNullableFilter<"TruckTrip"> | string | null
    createdAt?: DateTimeFilter<"TruckTrip"> | Date | string
  }

  export type UserCreateWithoutRoleInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    roleId?: StringFilter<"User"> | string
    companyId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type UserCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: UserCreateManyCompanyInput | UserCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutCompanyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    jobs?: JobCreateNestedManyWithoutCustomerInput
    quotes?: QuoteCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutCustomerInput
    quotes?: QuoteUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCompanyInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCompanyInput, CustomerUncheckedCreateWithoutCompanyInput>
  }

  export type CustomerCreateManyCompanyInputEnvelope = {
    data: CustomerCreateManyCompanyInput | CustomerCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type VendorCreateWithoutCompanyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutCompanyInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutCompanyInput, VendorUncheckedCreateWithoutCompanyInput>
  }

  export type VendorCreateManyCompanyInputEnvelope = {
    data: VendorCreateManyCompanyInput | VendorCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CustomerUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutCompanyInput, CustomerUncheckedUpdateWithoutCompanyInput>
    create: XOR<CustomerCreateWithoutCompanyInput, CustomerUncheckedCreateWithoutCompanyInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutCompanyInput, CustomerUncheckedUpdateWithoutCompanyInput>
  }

  export type CustomerUpdateManyWithWhereWithoutCompanyInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    id?: StringFilter<"Customer"> | string
    companyId?: StringNullableFilter<"Customer"> | string | null
    name?: StringFilter<"Customer"> | string
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    province?: StringNullableFilter<"Customer"> | string | null
    postal?: StringNullableFilter<"Customer"> | string | null
    gstHst?: StringNullableFilter<"Customer"> | string | null
    terms?: IntFilter<"Customer"> | number
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
  }

  export type VendorUpsertWithWhereUniqueWithoutCompanyInput = {
    where: VendorWhereUniqueInput
    update: XOR<VendorUpdateWithoutCompanyInput, VendorUncheckedUpdateWithoutCompanyInput>
    create: XOR<VendorCreateWithoutCompanyInput, VendorUncheckedCreateWithoutCompanyInput>
  }

  export type VendorUpdateWithWhereUniqueWithoutCompanyInput = {
    where: VendorWhereUniqueInput
    data: XOR<VendorUpdateWithoutCompanyInput, VendorUncheckedUpdateWithoutCompanyInput>
  }

  export type VendorUpdateManyWithWhereWithoutCompanyInput = {
    where: VendorScalarWhereInput
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyWithoutCompanyInput>
  }

  export type VendorScalarWhereInput = {
    AND?: VendorScalarWhereInput | VendorScalarWhereInput[]
    OR?: VendorScalarWhereInput[]
    NOT?: VendorScalarWhereInput | VendorScalarWhereInput[]
    id?: StringFilter<"Vendor"> | string
    companyId?: StringNullableFilter<"Vendor"> | string | null
    name?: StringFilter<"Vendor"> | string
    email?: StringNullableFilter<"Vendor"> | string | null
    phone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    city?: StringNullableFilter<"Vendor"> | string | null
    province?: StringNullableFilter<"Vendor"> | string | null
    postal?: StringNullableFilter<"Vendor"> | string | null
    terms?: IntFilter<"Vendor"> | number
    isActive?: BoolFilter<"Vendor"> | boolean
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
  }

  export type CustomerCreateWithoutJobsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    company?: CompanyCreateNestedOneWithoutCustomersInput
    quotes?: QuoteCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutJobsInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    quotes?: QuoteUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutJobsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutJobsInput, CustomerUncheckedCreateWithoutJobsInput>
  }

  export type UserCreateWithoutCreatedJobsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutCreatedJobsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutCreatedJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedJobsInput, UserUncheckedCreateWithoutCreatedJobsInput>
  }

  export type QuoteCreateWithoutJobsInput = {
    id?: string
    quoteNumber: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutQuotesInput
    items?: QuoteItemCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateWithoutJobsInput = {
    id?: string
    quoteNumber: string
    customerId: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: QuoteItemUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteCreateOrConnectWithoutJobsInput = {
    where: QuoteWhereUniqueInput
    create: XOR<QuoteCreateWithoutJobsInput, QuoteUncheckedCreateWithoutJobsInput>
  }

  export type JobPhaseCreateWithoutJobInput = {
    id?: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutPhaseInput
  }

  export type JobPhaseUncheckedCreateWithoutJobInput = {
    id?: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type JobPhaseCreateOrConnectWithoutJobInput = {
    where: JobPhaseWhereUniqueInput
    create: XOR<JobPhaseCreateWithoutJobInput, JobPhaseUncheckedCreateWithoutJobInput>
  }

  export type JobPhaseCreateManyJobInputEnvelope = {
    data: JobPhaseCreateManyJobInput | JobPhaseCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type DrawingCreateWithoutJobInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    revision?: string
    isApproved?: boolean
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
  }

  export type DrawingUncheckedCreateWithoutJobInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    revision?: string
    isApproved?: boolean
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
  }

  export type DrawingCreateOrConnectWithoutJobInput = {
    where: DrawingWhereUniqueInput
    create: XOR<DrawingCreateWithoutJobInput, DrawingUncheckedCreateWithoutJobInput>
  }

  export type DrawingCreateManyJobInputEnvelope = {
    data: DrawingCreateManyJobInput | DrawingCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type BomItemCreateWithoutJobInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
    material: MaterialCreateNestedOneWithoutBomItemsInput
  }

  export type BomItemUncheckedCreateWithoutJobInput = {
    id?: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
  }

  export type BomItemCreateOrConnectWithoutJobInput = {
    where: BomItemWhereUniqueInput
    create: XOR<BomItemCreateWithoutJobInput, BomItemUncheckedCreateWithoutJobInput>
  }

  export type BomItemCreateManyJobInputEnvelope = {
    data: BomItemCreateManyJobInput | BomItemCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type TimecardCreateWithoutJobInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimecardsInput
    task?: TaskCreateNestedOneWithoutTimecardsInput
    wps?: WpsSpecCreateNestedOneWithoutTimecardsInput
    weldPasses?: WeldPassCreateNestedManyWithoutTimecardInput
  }

  export type TimecardUncheckedCreateWithoutJobInput = {
    id?: string
    userId: string
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutTimecardInput
  }

  export type TimecardCreateOrConnectWithoutJobInput = {
    where: TimecardWhereUniqueInput
    create: XOR<TimecardCreateWithoutJobInput, TimecardUncheckedCreateWithoutJobInput>
  }

  export type TimecardCreateManyJobInputEnvelope = {
    data: TimecardCreateManyJobInput | TimecardCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutJobInput = {
    id?: string
    invoiceNumber: string
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutJobInput = {
    id?: string
    invoiceNumber: string
    customerId: string
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutJobInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutJobInput, InvoiceUncheckedCreateWithoutJobInput>
  }

  export type InvoiceCreateManyJobInputEnvelope = {
    data: InvoiceCreateManyJobInput | InvoiceCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderCreateWithoutJobInput = {
    id?: string
    woNumber: string
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    truckTrips?: TruckTripCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutJobInput = {
    id?: string
    woNumber: string
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutJobInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutJobInput, WorkOrderUncheckedCreateWithoutJobInput>
  }

  export type WorkOrderCreateManyJobInputEnvelope = {
    data: WorkOrderCreateManyJobInput | WorkOrderCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type InspectionCreateWithoutJobInput = {
    id?: string
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    inspector?: UserCreateNestedOneWithoutInspectionsInput
    weldLogs?: WeldLogCreateNestedManyWithoutInspectionInput
    repairLogs?: RepairLogCreateNestedManyWithoutInspectionInput
  }

  export type InspectionUncheckedCreateWithoutJobInput = {
    id?: string
    inspectorId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    weldLogs?: WeldLogUncheckedCreateNestedManyWithoutInspectionInput
    repairLogs?: RepairLogUncheckedCreateNestedManyWithoutInspectionInput
  }

  export type InspectionCreateOrConnectWithoutJobInput = {
    where: InspectionWhereUniqueInput
    create: XOR<InspectionCreateWithoutJobInput, InspectionUncheckedCreateWithoutJobInput>
  }

  export type InspectionCreateManyJobInputEnvelope = {
    data: InspectionCreateManyJobInput | InspectionCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutJobsInput = {
    update: XOR<CustomerUpdateWithoutJobsInput, CustomerUncheckedUpdateWithoutJobsInput>
    create: XOR<CustomerCreateWithoutJobsInput, CustomerUncheckedCreateWithoutJobsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutJobsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutJobsInput, CustomerUncheckedUpdateWithoutJobsInput>
  }

  export type CustomerUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutCustomersNestedInput
    quotes?: QuoteUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserUpsertWithoutCreatedJobsInput = {
    update: XOR<UserUpdateWithoutCreatedJobsInput, UserUncheckedUpdateWithoutCreatedJobsInput>
    create: XOR<UserCreateWithoutCreatedJobsInput, UserUncheckedCreateWithoutCreatedJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedJobsInput, UserUncheckedUpdateWithoutCreatedJobsInput>
  }

  export type UserUpdateWithoutCreatedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type QuoteUpsertWithoutJobsInput = {
    update: XOR<QuoteUpdateWithoutJobsInput, QuoteUncheckedUpdateWithoutJobsInput>
    create: XOR<QuoteCreateWithoutJobsInput, QuoteUncheckedCreateWithoutJobsInput>
    where?: QuoteWhereInput
  }

  export type QuoteUpdateToOneWithWhereWithoutJobsInput = {
    where?: QuoteWhereInput
    data: XOR<QuoteUpdateWithoutJobsInput, QuoteUncheckedUpdateWithoutJobsInput>
  }

  export type QuoteUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutQuotesNestedInput
    items?: QuoteItemUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: QuoteItemUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type JobPhaseUpsertWithWhereUniqueWithoutJobInput = {
    where: JobPhaseWhereUniqueInput
    update: XOR<JobPhaseUpdateWithoutJobInput, JobPhaseUncheckedUpdateWithoutJobInput>
    create: XOR<JobPhaseCreateWithoutJobInput, JobPhaseUncheckedCreateWithoutJobInput>
  }

  export type JobPhaseUpdateWithWhereUniqueWithoutJobInput = {
    where: JobPhaseWhereUniqueInput
    data: XOR<JobPhaseUpdateWithoutJobInput, JobPhaseUncheckedUpdateWithoutJobInput>
  }

  export type JobPhaseUpdateManyWithWhereWithoutJobInput = {
    where: JobPhaseScalarWhereInput
    data: XOR<JobPhaseUpdateManyMutationInput, JobPhaseUncheckedUpdateManyWithoutJobInput>
  }

  export type JobPhaseScalarWhereInput = {
    AND?: JobPhaseScalarWhereInput | JobPhaseScalarWhereInput[]
    OR?: JobPhaseScalarWhereInput[]
    NOT?: JobPhaseScalarWhereInput | JobPhaseScalarWhereInput[]
    id?: StringFilter<"JobPhase"> | string
    jobId?: StringFilter<"JobPhase"> | string
    name?: StringFilter<"JobPhase"> | string
    sequence?: IntFilter<"JobPhase"> | number
    status?: EnumPhaseStatusFilter<"JobPhase"> | $Enums.PhaseStatus
    startDate?: DateTimeNullableFilter<"JobPhase"> | Date | string | null
    endDate?: DateTimeNullableFilter<"JobPhase"> | Date | string | null
    createdAt?: DateTimeFilter<"JobPhase"> | Date | string
    updatedAt?: DateTimeFilter<"JobPhase"> | Date | string
  }

  export type DrawingUpsertWithWhereUniqueWithoutJobInput = {
    where: DrawingWhereUniqueInput
    update: XOR<DrawingUpdateWithoutJobInput, DrawingUncheckedUpdateWithoutJobInput>
    create: XOR<DrawingCreateWithoutJobInput, DrawingUncheckedCreateWithoutJobInput>
  }

  export type DrawingUpdateWithWhereUniqueWithoutJobInput = {
    where: DrawingWhereUniqueInput
    data: XOR<DrawingUpdateWithoutJobInput, DrawingUncheckedUpdateWithoutJobInput>
  }

  export type DrawingUpdateManyWithWhereWithoutJobInput = {
    where: DrawingScalarWhereInput
    data: XOR<DrawingUpdateManyMutationInput, DrawingUncheckedUpdateManyWithoutJobInput>
  }

  export type DrawingScalarWhereInput = {
    AND?: DrawingScalarWhereInput | DrawingScalarWhereInput[]
    OR?: DrawingScalarWhereInput[]
    NOT?: DrawingScalarWhereInput | DrawingScalarWhereInput[]
    id?: StringFilter<"Drawing"> | string
    jobId?: StringFilter<"Drawing"> | string
    filename?: StringFilter<"Drawing"> | string
    fileUrl?: StringFilter<"Drawing"> | string
    fileType?: StringFilter<"Drawing"> | string
    revision?: StringFilter<"Drawing"> | string
    isApproved?: BoolFilter<"Drawing"> | boolean
    approvedAt?: DateTimeNullableFilter<"Drawing"> | Date | string | null
    approvedBy?: StringNullableFilter<"Drawing"> | string | null
    createdAt?: DateTimeFilter<"Drawing"> | Date | string
  }

  export type BomItemUpsertWithWhereUniqueWithoutJobInput = {
    where: BomItemWhereUniqueInput
    update: XOR<BomItemUpdateWithoutJobInput, BomItemUncheckedUpdateWithoutJobInput>
    create: XOR<BomItemCreateWithoutJobInput, BomItemUncheckedCreateWithoutJobInput>
  }

  export type BomItemUpdateWithWhereUniqueWithoutJobInput = {
    where: BomItemWhereUniqueInput
    data: XOR<BomItemUpdateWithoutJobInput, BomItemUncheckedUpdateWithoutJobInput>
  }

  export type BomItemUpdateManyWithWhereWithoutJobInput = {
    where: BomItemScalarWhereInput
    data: XOR<BomItemUpdateManyMutationInput, BomItemUncheckedUpdateManyWithoutJobInput>
  }

  export type BomItemScalarWhereInput = {
    AND?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
    OR?: BomItemScalarWhereInput[]
    NOT?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
    id?: StringFilter<"BomItem"> | string
    jobId?: StringFilter<"BomItem"> | string
    materialId?: StringFilter<"BomItem"> | string
    description?: StringFilter<"BomItem"> | string
    quantity?: FloatFilter<"BomItem"> | number
    unit?: StringFilter<"BomItem"> | string
    unitCost?: FloatNullableFilter<"BomItem"> | number | null
    totalCost?: FloatNullableFilter<"BomItem"> | number | null
    isOrdered?: BoolFilter<"BomItem"> | boolean
    createdAt?: DateTimeFilter<"BomItem"> | Date | string
  }

  export type TimecardUpsertWithWhereUniqueWithoutJobInput = {
    where: TimecardWhereUniqueInput
    update: XOR<TimecardUpdateWithoutJobInput, TimecardUncheckedUpdateWithoutJobInput>
    create: XOR<TimecardCreateWithoutJobInput, TimecardUncheckedCreateWithoutJobInput>
  }

  export type TimecardUpdateWithWhereUniqueWithoutJobInput = {
    where: TimecardWhereUniqueInput
    data: XOR<TimecardUpdateWithoutJobInput, TimecardUncheckedUpdateWithoutJobInput>
  }

  export type TimecardUpdateManyWithWhereWithoutJobInput = {
    where: TimecardScalarWhereInput
    data: XOR<TimecardUpdateManyMutationInput, TimecardUncheckedUpdateManyWithoutJobInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutJobInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutJobInput, InvoiceUncheckedUpdateWithoutJobInput>
    create: XOR<InvoiceCreateWithoutJobInput, InvoiceUncheckedCreateWithoutJobInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutJobInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutJobInput, InvoiceUncheckedUpdateWithoutJobInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutJobInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutJobInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: StringFilter<"Invoice"> | string
    invoiceNumber?: StringFilter<"Invoice"> | string
    customerId?: StringFilter<"Invoice"> | string
    jobId?: StringNullableFilter<"Invoice"> | string | null
    subtotal?: FloatFilter<"Invoice"> | number
    gstHst?: FloatFilter<"Invoice"> | number
    pst?: FloatFilter<"Invoice"> | number
    total?: FloatFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    issuedAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    dueAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    paidAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutJobInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutJobInput, WorkOrderUncheckedUpdateWithoutJobInput>
    create: XOR<WorkOrderCreateWithoutJobInput, WorkOrderUncheckedCreateWithoutJobInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutJobInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutJobInput, WorkOrderUncheckedUpdateWithoutJobInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutJobInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutJobInput>
  }

  export type WorkOrderScalarWhereInput = {
    AND?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    OR?: WorkOrderScalarWhereInput[]
    NOT?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    id?: StringFilter<"WorkOrder"> | string
    woNumber?: StringFilter<"WorkOrder"> | string
    jobId?: StringNullableFilter<"WorkOrder"> | string | null
    customerId?: StringNullableFilter<"WorkOrder"> | string | null
    title?: StringFilter<"WorkOrder"> | string
    description?: StringNullableFilter<"WorkOrder"> | string | null
    address?: StringFilter<"WorkOrder"> | string
    city?: StringFilter<"WorkOrder"> | string
    province?: StringFilter<"WorkOrder"> | string
    postal?: StringNullableFilter<"WorkOrder"> | string | null
    priority?: EnumPriorityFilter<"WorkOrder"> | $Enums.Priority
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    scheduledAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
  }

  export type InspectionUpsertWithWhereUniqueWithoutJobInput = {
    where: InspectionWhereUniqueInput
    update: XOR<InspectionUpdateWithoutJobInput, InspectionUncheckedUpdateWithoutJobInput>
    create: XOR<InspectionCreateWithoutJobInput, InspectionUncheckedCreateWithoutJobInput>
  }

  export type InspectionUpdateWithWhereUniqueWithoutJobInput = {
    where: InspectionWhereUniqueInput
    data: XOR<InspectionUpdateWithoutJobInput, InspectionUncheckedUpdateWithoutJobInput>
  }

  export type InspectionUpdateManyWithWhereWithoutJobInput = {
    where: InspectionScalarWhereInput
    data: XOR<InspectionUpdateManyMutationInput, InspectionUncheckedUpdateManyWithoutJobInput>
  }

  export type JobCreateWithoutPhasesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutPhasesInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutPhasesInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutPhasesInput, JobUncheckedCreateWithoutPhasesInput>
  }

  export type TaskCreateWithoutPhaseInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timecards?: TimecardCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutPhaseInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    timecards?: TimecardUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutPhaseInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput>
  }

  export type TaskCreateManyPhaseInputEnvelope = {
    data: TaskCreateManyPhaseInput | TaskCreateManyPhaseInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutPhasesInput = {
    update: XOR<JobUpdateWithoutPhasesInput, JobUncheckedUpdateWithoutPhasesInput>
    create: XOR<JobCreateWithoutPhasesInput, JobUncheckedCreateWithoutPhasesInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutPhasesInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutPhasesInput, JobUncheckedUpdateWithoutPhasesInput>
  }

  export type JobUpdateWithoutPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutPhaseInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutPhaseInput, TaskUncheckedUpdateWithoutPhaseInput>
    create: XOR<TaskCreateWithoutPhaseInput, TaskUncheckedCreateWithoutPhaseInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutPhaseInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutPhaseInput, TaskUncheckedUpdateWithoutPhaseInput>
  }

  export type TaskUpdateManyWithWhereWithoutPhaseInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutPhaseInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    phaseId?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    estimatedHours?: FloatNullableFilter<"Task"> | number | null
    actualHours?: FloatNullableFilter<"Task"> | number | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
  }

  export type JobPhaseCreateWithoutTasksInput = {
    id?: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutPhasesInput
  }

  export type JobPhaseUncheckedCreateWithoutTasksInput = {
    id?: string
    jobId: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobPhaseCreateOrConnectWithoutTasksInput = {
    where: JobPhaseWhereUniqueInput
    create: XOR<JobPhaseCreateWithoutTasksInput, JobPhaseUncheckedCreateWithoutTasksInput>
  }

  export type TimecardCreateWithoutTaskInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimecardsInput
    job?: JobCreateNestedOneWithoutTimecardsInput
    wps?: WpsSpecCreateNestedOneWithoutTimecardsInput
    weldPasses?: WeldPassCreateNestedManyWithoutTimecardInput
  }

  export type TimecardUncheckedCreateWithoutTaskInput = {
    id?: string
    userId: string
    jobId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutTimecardInput
  }

  export type TimecardCreateOrConnectWithoutTaskInput = {
    where: TimecardWhereUniqueInput
    create: XOR<TimecardCreateWithoutTaskInput, TimecardUncheckedCreateWithoutTaskInput>
  }

  export type TimecardCreateManyTaskInputEnvelope = {
    data: TimecardCreateManyTaskInput | TimecardCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type JobPhaseUpsertWithoutTasksInput = {
    update: XOR<JobPhaseUpdateWithoutTasksInput, JobPhaseUncheckedUpdateWithoutTasksInput>
    create: XOR<JobPhaseCreateWithoutTasksInput, JobPhaseUncheckedCreateWithoutTasksInput>
    where?: JobPhaseWhereInput
  }

  export type JobPhaseUpdateToOneWithWhereWithoutTasksInput = {
    where?: JobPhaseWhereInput
    data: XOR<JobPhaseUpdateWithoutTasksInput, JobPhaseUncheckedUpdateWithoutTasksInput>
  }

  export type JobPhaseUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutPhasesNestedInput
  }

  export type JobPhaseUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimecardUpsertWithWhereUniqueWithoutTaskInput = {
    where: TimecardWhereUniqueInput
    update: XOR<TimecardUpdateWithoutTaskInput, TimecardUncheckedUpdateWithoutTaskInput>
    create: XOR<TimecardCreateWithoutTaskInput, TimecardUncheckedCreateWithoutTaskInput>
  }

  export type TimecardUpdateWithWhereUniqueWithoutTaskInput = {
    where: TimecardWhereUniqueInput
    data: XOR<TimecardUpdateWithoutTaskInput, TimecardUncheckedUpdateWithoutTaskInput>
  }

  export type TimecardUpdateManyWithWhereWithoutTaskInput = {
    where: TimecardScalarWhereInput
    data: XOR<TimecardUpdateManyMutationInput, TimecardUncheckedUpdateManyWithoutTaskInput>
  }

  export type JobCreateWithoutDrawingsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutDrawingsInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutDrawingsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutDrawingsInput, JobUncheckedCreateWithoutDrawingsInput>
  }

  export type JobUpsertWithoutDrawingsInput = {
    update: XOR<JobUpdateWithoutDrawingsInput, JobUncheckedUpdateWithoutDrawingsInput>
    create: XOR<JobCreateWithoutDrawingsInput, JobUncheckedCreateWithoutDrawingsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutDrawingsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutDrawingsInput, JobUncheckedUpdateWithoutDrawingsInput>
  }

  export type JobUpdateWithoutDrawingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutDrawingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateWithoutBomItemsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutBomItemsInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutBomItemsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutBomItemsInput, JobUncheckedCreateWithoutBomItemsInput>
  }

  export type MaterialCreateWithoutBomItemsInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heatBatches?: HeatBatchCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateWithoutBomItemsInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heatBatches?: HeatBatchUncheckedCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementUncheckedCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialCreateOrConnectWithoutBomItemsInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutBomItemsInput, MaterialUncheckedCreateWithoutBomItemsInput>
  }

  export type JobUpsertWithoutBomItemsInput = {
    update: XOR<JobUpdateWithoutBomItemsInput, JobUncheckedUpdateWithoutBomItemsInput>
    create: XOR<JobCreateWithoutBomItemsInput, JobUncheckedCreateWithoutBomItemsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutBomItemsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutBomItemsInput, JobUncheckedUpdateWithoutBomItemsInput>
  }

  export type JobUpdateWithoutBomItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutBomItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type MaterialUpsertWithoutBomItemsInput = {
    update: XOR<MaterialUpdateWithoutBomItemsInput, MaterialUncheckedUpdateWithoutBomItemsInput>
    create: XOR<MaterialCreateWithoutBomItemsInput, MaterialUncheckedCreateWithoutBomItemsInput>
    where?: MaterialWhereInput
  }

  export type MaterialUpdateToOneWithWhereWithoutBomItemsInput = {
    where?: MaterialWhereInput
    data: XOR<MaterialUpdateWithoutBomItemsInput, MaterialUncheckedUpdateWithoutBomItemsInput>
  }

  export type MaterialUpdateWithoutBomItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heatBatches?: HeatBatchUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateWithoutBomItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heatBatches?: HeatBatchUncheckedUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUncheckedUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type BomItemCreateWithoutMaterialInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutBomItemsInput
  }

  export type BomItemUncheckedCreateWithoutMaterialInput = {
    id?: string
    jobId: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
  }

  export type BomItemCreateOrConnectWithoutMaterialInput = {
    where: BomItemWhereUniqueInput
    create: XOR<BomItemCreateWithoutMaterialInput, BomItemUncheckedCreateWithoutMaterialInput>
  }

  export type BomItemCreateManyMaterialInputEnvelope = {
    data: BomItemCreateManyMaterialInput | BomItemCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type HeatBatchCreateWithoutMaterialInput = {
    id?: string
    heatNumber: string
    mtrUrl?: string | null
    quantity: number
    unit: string
    receivedAt: Date | string
    createdAt?: Date | string
  }

  export type HeatBatchUncheckedCreateWithoutMaterialInput = {
    id?: string
    heatNumber: string
    mtrUrl?: string | null
    quantity: number
    unit: string
    receivedAt: Date | string
    createdAt?: Date | string
  }

  export type HeatBatchCreateOrConnectWithoutMaterialInput = {
    where: HeatBatchWhereUniqueInput
    create: XOR<HeatBatchCreateWithoutMaterialInput, HeatBatchUncheckedCreateWithoutMaterialInput>
  }

  export type HeatBatchCreateManyMaterialInputEnvelope = {
    data: HeatBatchCreateManyMaterialInput | HeatBatchCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type StockMovementCreateWithoutMaterialInput = {
    id?: string
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    fromLocation?: StockLocationCreateNestedOneWithoutMovementsFromInput
    toLocation?: StockLocationCreateNestedOneWithoutMovementsToInput
  }

  export type StockMovementUncheckedCreateWithoutMaterialInput = {
    id?: string
    fromLocationId?: string | null
    toLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type StockMovementCreateOrConnectWithoutMaterialInput = {
    where: StockMovementWhereUniqueInput
    create: XOR<StockMovementCreateWithoutMaterialInput, StockMovementUncheckedCreateWithoutMaterialInput>
  }

  export type StockMovementCreateManyMaterialInputEnvelope = {
    data: StockMovementCreateManyMaterialInput | StockMovementCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderItemCreateWithoutMaterialInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
    po: PurchaseOrderCreateNestedOneWithoutItemsInput
  }

  export type PurchaseOrderItemUncheckedCreateWithoutMaterialInput = {
    id?: string
    poId: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
  }

  export type PurchaseOrderItemCreateOrConnectWithoutMaterialInput = {
    where: PurchaseOrderItemWhereUniqueInput
    create: XOR<PurchaseOrderItemCreateWithoutMaterialInput, PurchaseOrderItemUncheckedCreateWithoutMaterialInput>
  }

  export type PurchaseOrderItemCreateManyMaterialInputEnvelope = {
    data: PurchaseOrderItemCreateManyMaterialInput | PurchaseOrderItemCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type BomItemUpsertWithWhereUniqueWithoutMaterialInput = {
    where: BomItemWhereUniqueInput
    update: XOR<BomItemUpdateWithoutMaterialInput, BomItemUncheckedUpdateWithoutMaterialInput>
    create: XOR<BomItemCreateWithoutMaterialInput, BomItemUncheckedCreateWithoutMaterialInput>
  }

  export type BomItemUpdateWithWhereUniqueWithoutMaterialInput = {
    where: BomItemWhereUniqueInput
    data: XOR<BomItemUpdateWithoutMaterialInput, BomItemUncheckedUpdateWithoutMaterialInput>
  }

  export type BomItemUpdateManyWithWhereWithoutMaterialInput = {
    where: BomItemScalarWhereInput
    data: XOR<BomItemUpdateManyMutationInput, BomItemUncheckedUpdateManyWithoutMaterialInput>
  }

  export type HeatBatchUpsertWithWhereUniqueWithoutMaterialInput = {
    where: HeatBatchWhereUniqueInput
    update: XOR<HeatBatchUpdateWithoutMaterialInput, HeatBatchUncheckedUpdateWithoutMaterialInput>
    create: XOR<HeatBatchCreateWithoutMaterialInput, HeatBatchUncheckedCreateWithoutMaterialInput>
  }

  export type HeatBatchUpdateWithWhereUniqueWithoutMaterialInput = {
    where: HeatBatchWhereUniqueInput
    data: XOR<HeatBatchUpdateWithoutMaterialInput, HeatBatchUncheckedUpdateWithoutMaterialInput>
  }

  export type HeatBatchUpdateManyWithWhereWithoutMaterialInput = {
    where: HeatBatchScalarWhereInput
    data: XOR<HeatBatchUpdateManyMutationInput, HeatBatchUncheckedUpdateManyWithoutMaterialInput>
  }

  export type HeatBatchScalarWhereInput = {
    AND?: HeatBatchScalarWhereInput | HeatBatchScalarWhereInput[]
    OR?: HeatBatchScalarWhereInput[]
    NOT?: HeatBatchScalarWhereInput | HeatBatchScalarWhereInput[]
    id?: StringFilter<"HeatBatch"> | string
    materialId?: StringFilter<"HeatBatch"> | string
    heatNumber?: StringFilter<"HeatBatch"> | string
    mtrUrl?: StringNullableFilter<"HeatBatch"> | string | null
    quantity?: FloatFilter<"HeatBatch"> | number
    unit?: StringFilter<"HeatBatch"> | string
    receivedAt?: DateTimeFilter<"HeatBatch"> | Date | string
    createdAt?: DateTimeFilter<"HeatBatch"> | Date | string
  }

  export type StockMovementUpsertWithWhereUniqueWithoutMaterialInput = {
    where: StockMovementWhereUniqueInput
    update: XOR<StockMovementUpdateWithoutMaterialInput, StockMovementUncheckedUpdateWithoutMaterialInput>
    create: XOR<StockMovementCreateWithoutMaterialInput, StockMovementUncheckedCreateWithoutMaterialInput>
  }

  export type StockMovementUpdateWithWhereUniqueWithoutMaterialInput = {
    where: StockMovementWhereUniqueInput
    data: XOR<StockMovementUpdateWithoutMaterialInput, StockMovementUncheckedUpdateWithoutMaterialInput>
  }

  export type StockMovementUpdateManyWithWhereWithoutMaterialInput = {
    where: StockMovementScalarWhereInput
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyWithoutMaterialInput>
  }

  export type StockMovementScalarWhereInput = {
    AND?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
    OR?: StockMovementScalarWhereInput[]
    NOT?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
    id?: StringFilter<"StockMovement"> | string
    materialId?: StringFilter<"StockMovement"> | string
    fromLocationId?: StringNullableFilter<"StockMovement"> | string | null
    toLocationId?: StringNullableFilter<"StockMovement"> | string | null
    quantity?: FloatFilter<"StockMovement"> | number
    unit?: StringFilter<"StockMovement"> | string
    movementType?: StringFilter<"StockMovement"> | string
    reference?: StringNullableFilter<"StockMovement"> | string | null
    notes?: StringNullableFilter<"StockMovement"> | string | null
    createdAt?: DateTimeFilter<"StockMovement"> | Date | string
  }

  export type PurchaseOrderItemUpsertWithWhereUniqueWithoutMaterialInput = {
    where: PurchaseOrderItemWhereUniqueInput
    update: XOR<PurchaseOrderItemUpdateWithoutMaterialInput, PurchaseOrderItemUncheckedUpdateWithoutMaterialInput>
    create: XOR<PurchaseOrderItemCreateWithoutMaterialInput, PurchaseOrderItemUncheckedCreateWithoutMaterialInput>
  }

  export type PurchaseOrderItemUpdateWithWhereUniqueWithoutMaterialInput = {
    where: PurchaseOrderItemWhereUniqueInput
    data: XOR<PurchaseOrderItemUpdateWithoutMaterialInput, PurchaseOrderItemUncheckedUpdateWithoutMaterialInput>
  }

  export type PurchaseOrderItemUpdateManyWithWhereWithoutMaterialInput = {
    where: PurchaseOrderItemScalarWhereInput
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyWithoutMaterialInput>
  }

  export type PurchaseOrderItemScalarWhereInput = {
    AND?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
    OR?: PurchaseOrderItemScalarWhereInput[]
    NOT?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
    id?: StringFilter<"PurchaseOrderItem"> | string
    poId?: StringFilter<"PurchaseOrderItem"> | string
    materialId?: StringFilter<"PurchaseOrderItem"> | string
    description?: StringFilter<"PurchaseOrderItem"> | string
    quantity?: FloatFilter<"PurchaseOrderItem"> | number
    unit?: StringFilter<"PurchaseOrderItem"> | string
    unitCost?: FloatFilter<"PurchaseOrderItem"> | number
    totalCost?: FloatFilter<"PurchaseOrderItem"> | number
    qtyReceived?: FloatFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
  }

  export type MaterialCreateWithoutHeatBatchesInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateWithoutHeatBatchesInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemUncheckedCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementUncheckedCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialCreateOrConnectWithoutHeatBatchesInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutHeatBatchesInput, MaterialUncheckedCreateWithoutHeatBatchesInput>
  }

  export type MaterialUpsertWithoutHeatBatchesInput = {
    update: XOR<MaterialUpdateWithoutHeatBatchesInput, MaterialUncheckedUpdateWithoutHeatBatchesInput>
    create: XOR<MaterialCreateWithoutHeatBatchesInput, MaterialUncheckedCreateWithoutHeatBatchesInput>
    where?: MaterialWhereInput
  }

  export type MaterialUpdateToOneWithWhereWithoutHeatBatchesInput = {
    where?: MaterialWhereInput
    data: XOR<MaterialUpdateWithoutHeatBatchesInput, MaterialUncheckedUpdateWithoutHeatBatchesInput>
  }

  export type MaterialUpdateWithoutHeatBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateWithoutHeatBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUncheckedUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUncheckedUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type StockMovementCreateWithoutFromLocationInput = {
    id?: string
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    material: MaterialCreateNestedOneWithoutStockMovesInput
    toLocation?: StockLocationCreateNestedOneWithoutMovementsToInput
  }

  export type StockMovementUncheckedCreateWithoutFromLocationInput = {
    id?: string
    materialId: string
    toLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type StockMovementCreateOrConnectWithoutFromLocationInput = {
    where: StockMovementWhereUniqueInput
    create: XOR<StockMovementCreateWithoutFromLocationInput, StockMovementUncheckedCreateWithoutFromLocationInput>
  }

  export type StockMovementCreateManyFromLocationInputEnvelope = {
    data: StockMovementCreateManyFromLocationInput | StockMovementCreateManyFromLocationInput[]
    skipDuplicates?: boolean
  }

  export type StockMovementCreateWithoutToLocationInput = {
    id?: string
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    material: MaterialCreateNestedOneWithoutStockMovesInput
    fromLocation?: StockLocationCreateNestedOneWithoutMovementsFromInput
  }

  export type StockMovementUncheckedCreateWithoutToLocationInput = {
    id?: string
    materialId: string
    fromLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type StockMovementCreateOrConnectWithoutToLocationInput = {
    where: StockMovementWhereUniqueInput
    create: XOR<StockMovementCreateWithoutToLocationInput, StockMovementUncheckedCreateWithoutToLocationInput>
  }

  export type StockMovementCreateManyToLocationInputEnvelope = {
    data: StockMovementCreateManyToLocationInput | StockMovementCreateManyToLocationInput[]
    skipDuplicates?: boolean
  }

  export type StockMovementUpsertWithWhereUniqueWithoutFromLocationInput = {
    where: StockMovementWhereUniqueInput
    update: XOR<StockMovementUpdateWithoutFromLocationInput, StockMovementUncheckedUpdateWithoutFromLocationInput>
    create: XOR<StockMovementCreateWithoutFromLocationInput, StockMovementUncheckedCreateWithoutFromLocationInput>
  }

  export type StockMovementUpdateWithWhereUniqueWithoutFromLocationInput = {
    where: StockMovementWhereUniqueInput
    data: XOR<StockMovementUpdateWithoutFromLocationInput, StockMovementUncheckedUpdateWithoutFromLocationInput>
  }

  export type StockMovementUpdateManyWithWhereWithoutFromLocationInput = {
    where: StockMovementScalarWhereInput
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyWithoutFromLocationInput>
  }

  export type StockMovementUpsertWithWhereUniqueWithoutToLocationInput = {
    where: StockMovementWhereUniqueInput
    update: XOR<StockMovementUpdateWithoutToLocationInput, StockMovementUncheckedUpdateWithoutToLocationInput>
    create: XOR<StockMovementCreateWithoutToLocationInput, StockMovementUncheckedCreateWithoutToLocationInput>
  }

  export type StockMovementUpdateWithWhereUniqueWithoutToLocationInput = {
    where: StockMovementWhereUniqueInput
    data: XOR<StockMovementUpdateWithoutToLocationInput, StockMovementUncheckedUpdateWithoutToLocationInput>
  }

  export type StockMovementUpdateManyWithWhereWithoutToLocationInput = {
    where: StockMovementScalarWhereInput
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyWithoutToLocationInput>
  }

  export type MaterialCreateWithoutStockMovesInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemCreateNestedManyWithoutMaterialInput
    heatBatches?: HeatBatchCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateWithoutStockMovesInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemUncheckedCreateNestedManyWithoutMaterialInput
    heatBatches?: HeatBatchUncheckedCreateNestedManyWithoutMaterialInput
    poItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialCreateOrConnectWithoutStockMovesInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutStockMovesInput, MaterialUncheckedCreateWithoutStockMovesInput>
  }

  export type StockLocationCreateWithoutMovementsFromInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    movementsTo?: StockMovementCreateNestedManyWithoutToLocationInput
  }

  export type StockLocationUncheckedCreateWithoutMovementsFromInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    movementsTo?: StockMovementUncheckedCreateNestedManyWithoutToLocationInput
  }

  export type StockLocationCreateOrConnectWithoutMovementsFromInput = {
    where: StockLocationWhereUniqueInput
    create: XOR<StockLocationCreateWithoutMovementsFromInput, StockLocationUncheckedCreateWithoutMovementsFromInput>
  }

  export type StockLocationCreateWithoutMovementsToInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    movementsFrom?: StockMovementCreateNestedManyWithoutFromLocationInput
  }

  export type StockLocationUncheckedCreateWithoutMovementsToInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    movementsFrom?: StockMovementUncheckedCreateNestedManyWithoutFromLocationInput
  }

  export type StockLocationCreateOrConnectWithoutMovementsToInput = {
    where: StockLocationWhereUniqueInput
    create: XOR<StockLocationCreateWithoutMovementsToInput, StockLocationUncheckedCreateWithoutMovementsToInput>
  }

  export type MaterialUpsertWithoutStockMovesInput = {
    update: XOR<MaterialUpdateWithoutStockMovesInput, MaterialUncheckedUpdateWithoutStockMovesInput>
    create: XOR<MaterialCreateWithoutStockMovesInput, MaterialUncheckedCreateWithoutStockMovesInput>
    where?: MaterialWhereInput
  }

  export type MaterialUpdateToOneWithWhereWithoutStockMovesInput = {
    where?: MaterialWhereInput
    data: XOR<MaterialUpdateWithoutStockMovesInput, MaterialUncheckedUpdateWithoutStockMovesInput>
  }

  export type MaterialUpdateWithoutStockMovesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUpdateManyWithoutMaterialNestedInput
    heatBatches?: HeatBatchUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateWithoutStockMovesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUncheckedUpdateManyWithoutMaterialNestedInput
    heatBatches?: HeatBatchUncheckedUpdateManyWithoutMaterialNestedInput
    poItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type StockLocationUpsertWithoutMovementsFromInput = {
    update: XOR<StockLocationUpdateWithoutMovementsFromInput, StockLocationUncheckedUpdateWithoutMovementsFromInput>
    create: XOR<StockLocationCreateWithoutMovementsFromInput, StockLocationUncheckedCreateWithoutMovementsFromInput>
    where?: StockLocationWhereInput
  }

  export type StockLocationUpdateToOneWithWhereWithoutMovementsFromInput = {
    where?: StockLocationWhereInput
    data: XOR<StockLocationUpdateWithoutMovementsFromInput, StockLocationUncheckedUpdateWithoutMovementsFromInput>
  }

  export type StockLocationUpdateWithoutMovementsFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    movementsTo?: StockMovementUpdateManyWithoutToLocationNestedInput
  }

  export type StockLocationUncheckedUpdateWithoutMovementsFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    movementsTo?: StockMovementUncheckedUpdateManyWithoutToLocationNestedInput
  }

  export type StockLocationUpsertWithoutMovementsToInput = {
    update: XOR<StockLocationUpdateWithoutMovementsToInput, StockLocationUncheckedUpdateWithoutMovementsToInput>
    create: XOR<StockLocationCreateWithoutMovementsToInput, StockLocationUncheckedCreateWithoutMovementsToInput>
    where?: StockLocationWhereInput
  }

  export type StockLocationUpdateToOneWithWhereWithoutMovementsToInput = {
    where?: StockLocationWhereInput
    data: XOR<StockLocationUpdateWithoutMovementsToInput, StockLocationUncheckedUpdateWithoutMovementsToInput>
  }

  export type StockLocationUpdateWithoutMovementsToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    movementsFrom?: StockMovementUpdateManyWithoutFromLocationNestedInput
  }

  export type StockLocationUncheckedUpdateWithoutMovementsToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    movementsFrom?: StockMovementUncheckedUpdateManyWithoutFromLocationNestedInput
  }

  export type UserCreateWithoutTimecardsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutTimecardsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutTimecardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimecardsInput, UserUncheckedCreateWithoutTimecardsInput>
  }

  export type JobCreateWithoutTimecardsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutTimecardsInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutTimecardsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutTimecardsInput, JobUncheckedCreateWithoutTimecardsInput>
  }

  export type TaskCreateWithoutTimecardsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: JobPhaseCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutTimecardsInput = {
    id?: string
    phaseId: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutTimecardsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutTimecardsInput, TaskUncheckedCreateWithoutTimecardsInput>
  }

  export type WpsSpecCreateWithoutTimecardsInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestCreateNestedManyWithoutWpsInput
    welderCerts?: WelderCertCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecUncheckedCreateWithoutTimecardsInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedCreateNestedManyWithoutWpsInput
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecCreateOrConnectWithoutTimecardsInput = {
    where: WpsSpecWhereUniqueInput
    create: XOR<WpsSpecCreateWithoutTimecardsInput, WpsSpecUncheckedCreateWithoutTimecardsInput>
  }

  export type WeldPassCreateWithoutTimecardInput = {
    id?: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
    welder: UserCreateNestedOneWithoutWeldPassesInput
    wps: WpsSpecCreateNestedOneWithoutWeldPassesInput
  }

  export type WeldPassUncheckedCreateWithoutTimecardInput = {
    id?: string
    welderId: string
    wpsId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type WeldPassCreateOrConnectWithoutTimecardInput = {
    where: WeldPassWhereUniqueInput
    create: XOR<WeldPassCreateWithoutTimecardInput, WeldPassUncheckedCreateWithoutTimecardInput>
  }

  export type WeldPassCreateManyTimecardInputEnvelope = {
    data: WeldPassCreateManyTimecardInput | WeldPassCreateManyTimecardInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTimecardsInput = {
    update: XOR<UserUpdateWithoutTimecardsInput, UserUncheckedUpdateWithoutTimecardsInput>
    create: XOR<UserCreateWithoutTimecardsInput, UserUncheckedCreateWithoutTimecardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimecardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimecardsInput, UserUncheckedUpdateWithoutTimecardsInput>
  }

  export type UserUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type JobUpsertWithoutTimecardsInput = {
    update: XOR<JobUpdateWithoutTimecardsInput, JobUncheckedUpdateWithoutTimecardsInput>
    create: XOR<JobCreateWithoutTimecardsInput, JobUncheckedCreateWithoutTimecardsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutTimecardsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutTimecardsInput, JobUncheckedUpdateWithoutTimecardsInput>
  }

  export type JobUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type TaskUpsertWithoutTimecardsInput = {
    update: XOR<TaskUpdateWithoutTimecardsInput, TaskUncheckedUpdateWithoutTimecardsInput>
    create: XOR<TaskCreateWithoutTimecardsInput, TaskUncheckedCreateWithoutTimecardsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutTimecardsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutTimecardsInput, TaskUncheckedUpdateWithoutTimecardsInput>
  }

  export type TaskUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: JobPhaseUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WpsSpecUpsertWithoutTimecardsInput = {
    update: XOR<WpsSpecUpdateWithoutTimecardsInput, WpsSpecUncheckedUpdateWithoutTimecardsInput>
    create: XOR<WpsSpecCreateWithoutTimecardsInput, WpsSpecUncheckedCreateWithoutTimecardsInput>
    where?: WpsSpecWhereInput
  }

  export type WpsSpecUpdateToOneWithWhereWithoutTimecardsInput = {
    where?: WpsSpecWhereInput
    data: XOR<WpsSpecUpdateWithoutTimecardsInput, WpsSpecUncheckedUpdateWithoutTimecardsInput>
  }

  export type WpsSpecUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUpdateManyWithoutWpsNestedInput
    welderCerts?: WelderCertUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWpsNestedInput
  }

  export type WpsSpecUncheckedUpdateWithoutTimecardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedUpdateManyWithoutWpsNestedInput
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWpsNestedInput
  }

  export type WeldPassUpsertWithWhereUniqueWithoutTimecardInput = {
    where: WeldPassWhereUniqueInput
    update: XOR<WeldPassUpdateWithoutTimecardInput, WeldPassUncheckedUpdateWithoutTimecardInput>
    create: XOR<WeldPassCreateWithoutTimecardInput, WeldPassUncheckedCreateWithoutTimecardInput>
  }

  export type WeldPassUpdateWithWhereUniqueWithoutTimecardInput = {
    where: WeldPassWhereUniqueInput
    data: XOR<WeldPassUpdateWithoutTimecardInput, WeldPassUncheckedUpdateWithoutTimecardInput>
  }

  export type WeldPassUpdateManyWithWhereWithoutTimecardInput = {
    where: WeldPassScalarWhereInput
    data: XOR<WeldPassUpdateManyMutationInput, WeldPassUncheckedUpdateManyWithoutTimecardInput>
  }

  export type TimecardCreateWithoutWeldPassesInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimecardsInput
    job?: JobCreateNestedOneWithoutTimecardsInput
    task?: TaskCreateNestedOneWithoutTimecardsInput
    wps?: WpsSpecCreateNestedOneWithoutTimecardsInput
  }

  export type TimecardUncheckedCreateWithoutWeldPassesInput = {
    id?: string
    userId: string
    jobId?: string | null
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
  }

  export type TimecardCreateOrConnectWithoutWeldPassesInput = {
    where: TimecardWhereUniqueInput
    create: XOR<TimecardCreateWithoutWeldPassesInput, TimecardUncheckedCreateWithoutWeldPassesInput>
  }

  export type UserCreateWithoutWeldPassesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutWeldPassesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutWeldPassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWeldPassesInput, UserUncheckedCreateWithoutWeldPassesInput>
  }

  export type WpsSpecCreateWithoutWeldPassesInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestCreateNestedManyWithoutWpsInput
    welderCerts?: WelderCertCreateNestedManyWithoutWpsInput
    timecards?: TimecardCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecUncheckedCreateWithoutWeldPassesInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedCreateNestedManyWithoutWpsInput
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWpsInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecCreateOrConnectWithoutWeldPassesInput = {
    where: WpsSpecWhereUniqueInput
    create: XOR<WpsSpecCreateWithoutWeldPassesInput, WpsSpecUncheckedCreateWithoutWeldPassesInput>
  }

  export type TimecardUpsertWithoutWeldPassesInput = {
    update: XOR<TimecardUpdateWithoutWeldPassesInput, TimecardUncheckedUpdateWithoutWeldPassesInput>
    create: XOR<TimecardCreateWithoutWeldPassesInput, TimecardUncheckedCreateWithoutWeldPassesInput>
    where?: TimecardWhereInput
  }

  export type TimecardUpdateToOneWithWhereWithoutWeldPassesInput = {
    where?: TimecardWhereInput
    data: XOR<TimecardUpdateWithoutWeldPassesInput, TimecardUncheckedUpdateWithoutWeldPassesInput>
  }

  export type TimecardUpdateWithoutWeldPassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimecardsNestedInput
    job?: JobUpdateOneWithoutTimecardsNestedInput
    task?: TaskUpdateOneWithoutTimecardsNestedInput
    wps?: WpsSpecUpdateOneWithoutTimecardsNestedInput
  }

  export type TimecardUncheckedUpdateWithoutWeldPassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutWeldPassesInput = {
    update: XOR<UserUpdateWithoutWeldPassesInput, UserUncheckedUpdateWithoutWeldPassesInput>
    create: XOR<UserCreateWithoutWeldPassesInput, UserUncheckedCreateWithoutWeldPassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWeldPassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWeldPassesInput, UserUncheckedUpdateWithoutWeldPassesInput>
  }

  export type UserUpdateWithoutWeldPassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutWeldPassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type WpsSpecUpsertWithoutWeldPassesInput = {
    update: XOR<WpsSpecUpdateWithoutWeldPassesInput, WpsSpecUncheckedUpdateWithoutWeldPassesInput>
    create: XOR<WpsSpecCreateWithoutWeldPassesInput, WpsSpecUncheckedCreateWithoutWeldPassesInput>
    where?: WpsSpecWhereInput
  }

  export type WpsSpecUpdateToOneWithWhereWithoutWeldPassesInput = {
    where?: WpsSpecWhereInput
    data: XOR<WpsSpecUpdateWithoutWeldPassesInput, WpsSpecUncheckedUpdateWithoutWeldPassesInput>
  }

  export type WpsSpecUpdateWithoutWeldPassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUpdateManyWithoutWpsNestedInput
    welderCerts?: WelderCertUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUpdateManyWithoutWpsNestedInput
  }

  export type WpsSpecUncheckedUpdateWithoutWeldPassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedUpdateManyWithoutWpsNestedInput
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutWpsNestedInput
  }

  export type PqrTestCreateWithoutWpsInput = {
    id?: string
    testType: string
    result: string
    value?: number | null
    unit?: string | null
    testDate: Date | string
    labName?: string | null
    certUrl?: string | null
    createdAt?: Date | string
  }

  export type PqrTestUncheckedCreateWithoutWpsInput = {
    id?: string
    testType: string
    result: string
    value?: number | null
    unit?: string | null
    testDate: Date | string
    labName?: string | null
    certUrl?: string | null
    createdAt?: Date | string
  }

  export type PqrTestCreateOrConnectWithoutWpsInput = {
    where: PqrTestWhereUniqueInput
    create: XOR<PqrTestCreateWithoutWpsInput, PqrTestUncheckedCreateWithoutWpsInput>
  }

  export type PqrTestCreateManyWpsInputEnvelope = {
    data: PqrTestCreateManyWpsInput | PqrTestCreateManyWpsInput[]
    skipDuplicates?: boolean
  }

  export type WelderCertCreateWithoutWpsInput = {
    id?: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
    welder: UserCreateNestedOneWithoutWelderCertsInput
  }

  export type WelderCertUncheckedCreateWithoutWpsInput = {
    id?: string
    welderId: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
  }

  export type WelderCertCreateOrConnectWithoutWpsInput = {
    where: WelderCertWhereUniqueInput
    create: XOR<WelderCertCreateWithoutWpsInput, WelderCertUncheckedCreateWithoutWpsInput>
  }

  export type WelderCertCreateManyWpsInputEnvelope = {
    data: WelderCertCreateManyWpsInput | WelderCertCreateManyWpsInput[]
    skipDuplicates?: boolean
  }

  export type TimecardCreateWithoutWpsInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimecardsInput
    job?: JobCreateNestedOneWithoutTimecardsInput
    task?: TaskCreateNestedOneWithoutTimecardsInput
    weldPasses?: WeldPassCreateNestedManyWithoutTimecardInput
  }

  export type TimecardUncheckedCreateWithoutWpsInput = {
    id?: string
    userId: string
    jobId?: string | null
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutTimecardInput
  }

  export type TimecardCreateOrConnectWithoutWpsInput = {
    where: TimecardWhereUniqueInput
    create: XOR<TimecardCreateWithoutWpsInput, TimecardUncheckedCreateWithoutWpsInput>
  }

  export type TimecardCreateManyWpsInputEnvelope = {
    data: TimecardCreateManyWpsInput | TimecardCreateManyWpsInput[]
    skipDuplicates?: boolean
  }

  export type WeldPassCreateWithoutWpsInput = {
    id?: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
    timecard: TimecardCreateNestedOneWithoutWeldPassesInput
    welder: UserCreateNestedOneWithoutWeldPassesInput
  }

  export type WeldPassUncheckedCreateWithoutWpsInput = {
    id?: string
    timecardId: string
    welderId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type WeldPassCreateOrConnectWithoutWpsInput = {
    where: WeldPassWhereUniqueInput
    create: XOR<WeldPassCreateWithoutWpsInput, WeldPassUncheckedCreateWithoutWpsInput>
  }

  export type WeldPassCreateManyWpsInputEnvelope = {
    data: WeldPassCreateManyWpsInput | WeldPassCreateManyWpsInput[]
    skipDuplicates?: boolean
  }

  export type PqrTestUpsertWithWhereUniqueWithoutWpsInput = {
    where: PqrTestWhereUniqueInput
    update: XOR<PqrTestUpdateWithoutWpsInput, PqrTestUncheckedUpdateWithoutWpsInput>
    create: XOR<PqrTestCreateWithoutWpsInput, PqrTestUncheckedCreateWithoutWpsInput>
  }

  export type PqrTestUpdateWithWhereUniqueWithoutWpsInput = {
    where: PqrTestWhereUniqueInput
    data: XOR<PqrTestUpdateWithoutWpsInput, PqrTestUncheckedUpdateWithoutWpsInput>
  }

  export type PqrTestUpdateManyWithWhereWithoutWpsInput = {
    where: PqrTestScalarWhereInput
    data: XOR<PqrTestUpdateManyMutationInput, PqrTestUncheckedUpdateManyWithoutWpsInput>
  }

  export type PqrTestScalarWhereInput = {
    AND?: PqrTestScalarWhereInput | PqrTestScalarWhereInput[]
    OR?: PqrTestScalarWhereInput[]
    NOT?: PqrTestScalarWhereInput | PqrTestScalarWhereInput[]
    id?: StringFilter<"PqrTest"> | string
    wpsId?: StringFilter<"PqrTest"> | string
    testType?: StringFilter<"PqrTest"> | string
    result?: StringFilter<"PqrTest"> | string
    value?: FloatNullableFilter<"PqrTest"> | number | null
    unit?: StringNullableFilter<"PqrTest"> | string | null
    testDate?: DateTimeFilter<"PqrTest"> | Date | string
    labName?: StringNullableFilter<"PqrTest"> | string | null
    certUrl?: StringNullableFilter<"PqrTest"> | string | null
    createdAt?: DateTimeFilter<"PqrTest"> | Date | string
  }

  export type WelderCertUpsertWithWhereUniqueWithoutWpsInput = {
    where: WelderCertWhereUniqueInput
    update: XOR<WelderCertUpdateWithoutWpsInput, WelderCertUncheckedUpdateWithoutWpsInput>
    create: XOR<WelderCertCreateWithoutWpsInput, WelderCertUncheckedCreateWithoutWpsInput>
  }

  export type WelderCertUpdateWithWhereUniqueWithoutWpsInput = {
    where: WelderCertWhereUniqueInput
    data: XOR<WelderCertUpdateWithoutWpsInput, WelderCertUncheckedUpdateWithoutWpsInput>
  }

  export type WelderCertUpdateManyWithWhereWithoutWpsInput = {
    where: WelderCertScalarWhereInput
    data: XOR<WelderCertUpdateManyMutationInput, WelderCertUncheckedUpdateManyWithoutWpsInput>
  }

  export type TimecardUpsertWithWhereUniqueWithoutWpsInput = {
    where: TimecardWhereUniqueInput
    update: XOR<TimecardUpdateWithoutWpsInput, TimecardUncheckedUpdateWithoutWpsInput>
    create: XOR<TimecardCreateWithoutWpsInput, TimecardUncheckedCreateWithoutWpsInput>
  }

  export type TimecardUpdateWithWhereUniqueWithoutWpsInput = {
    where: TimecardWhereUniqueInput
    data: XOR<TimecardUpdateWithoutWpsInput, TimecardUncheckedUpdateWithoutWpsInput>
  }

  export type TimecardUpdateManyWithWhereWithoutWpsInput = {
    where: TimecardScalarWhereInput
    data: XOR<TimecardUpdateManyMutationInput, TimecardUncheckedUpdateManyWithoutWpsInput>
  }

  export type WeldPassUpsertWithWhereUniqueWithoutWpsInput = {
    where: WeldPassWhereUniqueInput
    update: XOR<WeldPassUpdateWithoutWpsInput, WeldPassUncheckedUpdateWithoutWpsInput>
    create: XOR<WeldPassCreateWithoutWpsInput, WeldPassUncheckedCreateWithoutWpsInput>
  }

  export type WeldPassUpdateWithWhereUniqueWithoutWpsInput = {
    where: WeldPassWhereUniqueInput
    data: XOR<WeldPassUpdateWithoutWpsInput, WeldPassUncheckedUpdateWithoutWpsInput>
  }

  export type WeldPassUpdateManyWithWhereWithoutWpsInput = {
    where: WeldPassScalarWhereInput
    data: XOR<WeldPassUpdateManyMutationInput, WeldPassUncheckedUpdateManyWithoutWpsInput>
  }

  export type WpsSpecCreateWithoutPqrTestsInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    welderCerts?: WelderCertCreateNestedManyWithoutWpsInput
    timecards?: TimecardCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecUncheckedCreateWithoutPqrTestsInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWpsInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecCreateOrConnectWithoutPqrTestsInput = {
    where: WpsSpecWhereUniqueInput
    create: XOR<WpsSpecCreateWithoutPqrTestsInput, WpsSpecUncheckedCreateWithoutPqrTestsInput>
  }

  export type WpsSpecUpsertWithoutPqrTestsInput = {
    update: XOR<WpsSpecUpdateWithoutPqrTestsInput, WpsSpecUncheckedUpdateWithoutPqrTestsInput>
    create: XOR<WpsSpecCreateWithoutPqrTestsInput, WpsSpecUncheckedCreateWithoutPqrTestsInput>
    where?: WpsSpecWhereInput
  }

  export type WpsSpecUpdateToOneWithWhereWithoutPqrTestsInput = {
    where?: WpsSpecWhereInput
    data: XOR<WpsSpecUpdateWithoutPqrTestsInput, WpsSpecUncheckedUpdateWithoutPqrTestsInput>
  }

  export type WpsSpecUpdateWithoutPqrTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    welderCerts?: WelderCertUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWpsNestedInput
  }

  export type WpsSpecUncheckedUpdateWithoutPqrTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWpsNestedInput
  }

  export type UserCreateWithoutWelderCertsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutWelderCertsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutWelderCertsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWelderCertsInput, UserUncheckedCreateWithoutWelderCertsInput>
  }

  export type WpsSpecCreateWithoutWelderCertsInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestCreateNestedManyWithoutWpsInput
    timecards?: TimecardCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecUncheckedCreateWithoutWelderCertsInput = {
    id?: string
    code: string
    title: string
    process: string
    materialGroup: string
    positions?: WpsSpecCreatepositionsInput | string[]
    thickness?: string | null
    pdfUrl?: string | null
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedCreateNestedManyWithoutWpsInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutWpsInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWpsInput
  }

  export type WpsSpecCreateOrConnectWithoutWelderCertsInput = {
    where: WpsSpecWhereUniqueInput
    create: XOR<WpsSpecCreateWithoutWelderCertsInput, WpsSpecUncheckedCreateWithoutWelderCertsInput>
  }

  export type UserUpsertWithoutWelderCertsInput = {
    update: XOR<UserUpdateWithoutWelderCertsInput, UserUncheckedUpdateWithoutWelderCertsInput>
    create: XOR<UserCreateWithoutWelderCertsInput, UserUncheckedCreateWithoutWelderCertsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWelderCertsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWelderCertsInput, UserUncheckedUpdateWithoutWelderCertsInput>
  }

  export type UserUpdateWithoutWelderCertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutWelderCertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type WpsSpecUpsertWithoutWelderCertsInput = {
    update: XOR<WpsSpecUpdateWithoutWelderCertsInput, WpsSpecUncheckedUpdateWithoutWelderCertsInput>
    create: XOR<WpsSpecCreateWithoutWelderCertsInput, WpsSpecUncheckedCreateWithoutWelderCertsInput>
    where?: WpsSpecWhereInput
  }

  export type WpsSpecUpdateToOneWithWhereWithoutWelderCertsInput = {
    where?: WpsSpecWhereInput
    data: XOR<WpsSpecUpdateWithoutWelderCertsInput, WpsSpecUncheckedUpdateWithoutWelderCertsInput>
  }

  export type WpsSpecUpdateWithoutWelderCertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWpsNestedInput
  }

  export type WpsSpecUncheckedUpdateWithoutWelderCertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    process?: StringFieldUpdateOperationsInput | string
    materialGroup?: StringFieldUpdateOperationsInput | string
    positions?: WpsSpecUpdatepositionsInput | string[]
    thickness?: NullableStringFieldUpdateOperationsInput | string | null
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    pqrTests?: PqrTestUncheckedUpdateManyWithoutWpsNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutWpsNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWpsNestedInput
  }

  export type JobCreateWithoutInspectionInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutInspectionInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutInspectionInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutInspectionInput, JobUncheckedCreateWithoutInspectionInput>
  }

  export type UserCreateWithoutInspectionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutInspectionsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
    truckTrips?: TruckTripUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutInspectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInspectionsInput, UserUncheckedCreateWithoutInspectionsInput>
  }

  export type WeldLogCreateWithoutInspectionInput = {
    id?: string
    weldNumber: string
    jointId?: string | null
    process: string
    position: string
    welderId?: string | null
    length?: number | null
    defects?: WeldLogCreatedefectsInput | string[]
    createdAt?: Date | string
  }

  export type WeldLogUncheckedCreateWithoutInspectionInput = {
    id?: string
    weldNumber: string
    jointId?: string | null
    process: string
    position: string
    welderId?: string | null
    length?: number | null
    defects?: WeldLogCreatedefectsInput | string[]
    createdAt?: Date | string
  }

  export type WeldLogCreateOrConnectWithoutInspectionInput = {
    where: WeldLogWhereUniqueInput
    create: XOR<WeldLogCreateWithoutInspectionInput, WeldLogUncheckedCreateWithoutInspectionInput>
  }

  export type WeldLogCreateManyInspectionInputEnvelope = {
    data: WeldLogCreateManyInspectionInput | WeldLogCreateManyInspectionInput[]
    skipDuplicates?: boolean
  }

  export type RepairLogCreateWithoutInspectionInput = {
    id?: string
    weldNumber: string
    defectType: string
    repairMethod: string
    repairedBy?: string | null
    repairedAt?: Date | string | null
    isCompleted?: boolean
    notes?: string | null
    createdAt?: Date | string
  }

  export type RepairLogUncheckedCreateWithoutInspectionInput = {
    id?: string
    weldNumber: string
    defectType: string
    repairMethod: string
    repairedBy?: string | null
    repairedAt?: Date | string | null
    isCompleted?: boolean
    notes?: string | null
    createdAt?: Date | string
  }

  export type RepairLogCreateOrConnectWithoutInspectionInput = {
    where: RepairLogWhereUniqueInput
    create: XOR<RepairLogCreateWithoutInspectionInput, RepairLogUncheckedCreateWithoutInspectionInput>
  }

  export type RepairLogCreateManyInspectionInputEnvelope = {
    data: RepairLogCreateManyInspectionInput | RepairLogCreateManyInspectionInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutInspectionInput = {
    update: XOR<JobUpdateWithoutInspectionInput, JobUncheckedUpdateWithoutInspectionInput>
    create: XOR<JobCreateWithoutInspectionInput, JobUncheckedCreateWithoutInspectionInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutInspectionInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutInspectionInput, JobUncheckedUpdateWithoutInspectionInput>
  }

  export type JobUpdateWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
  }

  export type UserUpsertWithoutInspectionsInput = {
    update: XOR<UserUpdateWithoutInspectionsInput, UserUncheckedUpdateWithoutInspectionsInput>
    create: XOR<UserCreateWithoutInspectionsInput, UserUncheckedCreateWithoutInspectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInspectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInspectionsInput, UserUncheckedUpdateWithoutInspectionsInput>
  }

  export type UserUpdateWithoutInspectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutInspectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type WeldLogUpsertWithWhereUniqueWithoutInspectionInput = {
    where: WeldLogWhereUniqueInput
    update: XOR<WeldLogUpdateWithoutInspectionInput, WeldLogUncheckedUpdateWithoutInspectionInput>
    create: XOR<WeldLogCreateWithoutInspectionInput, WeldLogUncheckedCreateWithoutInspectionInput>
  }

  export type WeldLogUpdateWithWhereUniqueWithoutInspectionInput = {
    where: WeldLogWhereUniqueInput
    data: XOR<WeldLogUpdateWithoutInspectionInput, WeldLogUncheckedUpdateWithoutInspectionInput>
  }

  export type WeldLogUpdateManyWithWhereWithoutInspectionInput = {
    where: WeldLogScalarWhereInput
    data: XOR<WeldLogUpdateManyMutationInput, WeldLogUncheckedUpdateManyWithoutInspectionInput>
  }

  export type WeldLogScalarWhereInput = {
    AND?: WeldLogScalarWhereInput | WeldLogScalarWhereInput[]
    OR?: WeldLogScalarWhereInput[]
    NOT?: WeldLogScalarWhereInput | WeldLogScalarWhereInput[]
    id?: StringFilter<"WeldLog"> | string
    inspectionId?: StringFilter<"WeldLog"> | string
    weldNumber?: StringFilter<"WeldLog"> | string
    jointId?: StringNullableFilter<"WeldLog"> | string | null
    process?: StringFilter<"WeldLog"> | string
    position?: StringFilter<"WeldLog"> | string
    welderId?: StringNullableFilter<"WeldLog"> | string | null
    length?: FloatNullableFilter<"WeldLog"> | number | null
    defects?: StringNullableListFilter<"WeldLog">
    createdAt?: DateTimeFilter<"WeldLog"> | Date | string
  }

  export type RepairLogUpsertWithWhereUniqueWithoutInspectionInput = {
    where: RepairLogWhereUniqueInput
    update: XOR<RepairLogUpdateWithoutInspectionInput, RepairLogUncheckedUpdateWithoutInspectionInput>
    create: XOR<RepairLogCreateWithoutInspectionInput, RepairLogUncheckedCreateWithoutInspectionInput>
  }

  export type RepairLogUpdateWithWhereUniqueWithoutInspectionInput = {
    where: RepairLogWhereUniqueInput
    data: XOR<RepairLogUpdateWithoutInspectionInput, RepairLogUncheckedUpdateWithoutInspectionInput>
  }

  export type RepairLogUpdateManyWithWhereWithoutInspectionInput = {
    where: RepairLogScalarWhereInput
    data: XOR<RepairLogUpdateManyMutationInput, RepairLogUncheckedUpdateManyWithoutInspectionInput>
  }

  export type RepairLogScalarWhereInput = {
    AND?: RepairLogScalarWhereInput | RepairLogScalarWhereInput[]
    OR?: RepairLogScalarWhereInput[]
    NOT?: RepairLogScalarWhereInput | RepairLogScalarWhereInput[]
    id?: StringFilter<"RepairLog"> | string
    inspectionId?: StringFilter<"RepairLog"> | string
    weldNumber?: StringFilter<"RepairLog"> | string
    defectType?: StringFilter<"RepairLog"> | string
    repairMethod?: StringFilter<"RepairLog"> | string
    repairedBy?: StringNullableFilter<"RepairLog"> | string | null
    repairedAt?: DateTimeNullableFilter<"RepairLog"> | Date | string | null
    isCompleted?: BoolFilter<"RepairLog"> | boolean
    notes?: StringNullableFilter<"RepairLog"> | string | null
    createdAt?: DateTimeFilter<"RepairLog"> | Date | string
  }

  export type InspectionCreateWithoutWeldLogsInput = {
    id?: string
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    job?: JobCreateNestedOneWithoutInspectionInput
    inspector?: UserCreateNestedOneWithoutInspectionsInput
    repairLogs?: RepairLogCreateNestedManyWithoutInspectionInput
  }

  export type InspectionUncheckedCreateWithoutWeldLogsInput = {
    id?: string
    jobId?: string | null
    inspectorId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    repairLogs?: RepairLogUncheckedCreateNestedManyWithoutInspectionInput
  }

  export type InspectionCreateOrConnectWithoutWeldLogsInput = {
    where: InspectionWhereUniqueInput
    create: XOR<InspectionCreateWithoutWeldLogsInput, InspectionUncheckedCreateWithoutWeldLogsInput>
  }

  export type InspectionUpsertWithoutWeldLogsInput = {
    update: XOR<InspectionUpdateWithoutWeldLogsInput, InspectionUncheckedUpdateWithoutWeldLogsInput>
    create: XOR<InspectionCreateWithoutWeldLogsInput, InspectionUncheckedCreateWithoutWeldLogsInput>
    where?: InspectionWhereInput
  }

  export type InspectionUpdateToOneWithWhereWithoutWeldLogsInput = {
    where?: InspectionWhereInput
    data: XOR<InspectionUpdateWithoutWeldLogsInput, InspectionUncheckedUpdateWithoutWeldLogsInput>
  }

  export type InspectionUpdateWithoutWeldLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutInspectionNestedInput
    inspector?: UserUpdateOneWithoutInspectionsNestedInput
    repairLogs?: RepairLogUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionUncheckedUpdateWithoutWeldLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectorId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repairLogs?: RepairLogUncheckedUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionCreateWithoutRepairLogsInput = {
    id?: string
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    job?: JobCreateNestedOneWithoutInspectionInput
    inspector?: UserCreateNestedOneWithoutInspectionsInput
    weldLogs?: WeldLogCreateNestedManyWithoutInspectionInput
  }

  export type InspectionUncheckedCreateWithoutRepairLogsInput = {
    id?: string
    jobId?: string | null
    inspectorId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
    weldLogs?: WeldLogUncheckedCreateNestedManyWithoutInspectionInput
  }

  export type InspectionCreateOrConnectWithoutRepairLogsInput = {
    where: InspectionWhereUniqueInput
    create: XOR<InspectionCreateWithoutRepairLogsInput, InspectionUncheckedCreateWithoutRepairLogsInput>
  }

  export type InspectionUpsertWithoutRepairLogsInput = {
    update: XOR<InspectionUpdateWithoutRepairLogsInput, InspectionUncheckedUpdateWithoutRepairLogsInput>
    create: XOR<InspectionCreateWithoutRepairLogsInput, InspectionUncheckedCreateWithoutRepairLogsInput>
    where?: InspectionWhereInput
  }

  export type InspectionUpdateToOneWithWhereWithoutRepairLogsInput = {
    where?: InspectionWhereInput
    data: XOR<InspectionUpdateWithoutRepairLogsInput, InspectionUncheckedUpdateWithoutRepairLogsInput>
  }

  export type InspectionUpdateWithoutRepairLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutInspectionNestedInput
    inspector?: UserUpdateOneWithoutInspectionsNestedInput
    weldLogs?: WeldLogUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionUncheckedUpdateWithoutRepairLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectorId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldLogs?: WeldLogUncheckedUpdateManyWithoutInspectionNestedInput
  }

  export type CompanyCreateWithoutCustomersInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    users?: UserCreateNestedManyWithoutCompanyInput
    vendors?: VendorCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCustomersInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    vendors?: VendorUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCustomersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCustomersInput, CompanyUncheckedCreateWithoutCustomersInput>
  }

  export type JobCreateWithoutCustomerInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutCustomerInput = {
    id?: string
    title: string
    description?: string | null
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutCustomerInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutCustomerInput, JobUncheckedCreateWithoutCustomerInput>
  }

  export type JobCreateManyCustomerInputEnvelope = {
    data: JobCreateManyCustomerInput | JobCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type QuoteCreateWithoutCustomerInput = {
    id?: string
    quoteNumber: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: QuoteItemCreateNestedManyWithoutQuoteInput
    jobs?: JobCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateWithoutCustomerInput = {
    id?: string
    quoteNumber: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: QuoteItemUncheckedCreateNestedManyWithoutQuoteInput
    jobs?: JobUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteCreateOrConnectWithoutCustomerInput = {
    where: QuoteWhereUniqueInput
    create: XOR<QuoteCreateWithoutCustomerInput, QuoteUncheckedCreateWithoutCustomerInput>
  }

  export type QuoteCreateManyCustomerInputEnvelope = {
    data: QuoteCreateManyCustomerInput | QuoteCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutCustomerInput = {
    id?: string
    invoiceNumber: string
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job?: JobCreateNestedOneWithoutInvoicesInput
    items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutCustomerInput = {
    id?: string
    invoiceNumber: string
    jobId?: string | null
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutCustomerInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput>
  }

  export type InvoiceCreateManyCustomerInputEnvelope = {
    data: InvoiceCreateManyCustomerInput | InvoiceCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutCustomersInput = {
    update: XOR<CompanyUpdateWithoutCustomersInput, CompanyUncheckedUpdateWithoutCustomersInput>
    create: XOR<CompanyCreateWithoutCustomersInput, CompanyUncheckedCreateWithoutCustomersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutCustomersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutCustomersInput, CompanyUncheckedUpdateWithoutCustomersInput>
  }

  export type CompanyUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutCompanyNestedInput
    vendors?: VendorUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type JobUpsertWithWhereUniqueWithoutCustomerInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutCustomerInput, JobUncheckedUpdateWithoutCustomerInput>
    create: XOR<JobCreateWithoutCustomerInput, JobUncheckedCreateWithoutCustomerInput>
  }

  export type JobUpdateWithWhereUniqueWithoutCustomerInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutCustomerInput, JobUncheckedUpdateWithoutCustomerInput>
  }

  export type JobUpdateManyWithWhereWithoutCustomerInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutCustomerInput>
  }

  export type QuoteUpsertWithWhereUniqueWithoutCustomerInput = {
    where: QuoteWhereUniqueInput
    update: XOR<QuoteUpdateWithoutCustomerInput, QuoteUncheckedUpdateWithoutCustomerInput>
    create: XOR<QuoteCreateWithoutCustomerInput, QuoteUncheckedCreateWithoutCustomerInput>
  }

  export type QuoteUpdateWithWhereUniqueWithoutCustomerInput = {
    where: QuoteWhereUniqueInput
    data: XOR<QuoteUpdateWithoutCustomerInput, QuoteUncheckedUpdateWithoutCustomerInput>
  }

  export type QuoteUpdateManyWithWhereWithoutCustomerInput = {
    where: QuoteScalarWhereInput
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyWithoutCustomerInput>
  }

  export type QuoteScalarWhereInput = {
    AND?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
    OR?: QuoteScalarWhereInput[]
    NOT?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
    id?: StringFilter<"Quote"> | string
    quoteNumber?: StringFilter<"Quote"> | string
    customerId?: StringFilter<"Quote"> | string
    title?: StringFilter<"Quote"> | string
    subtotal?: FloatFilter<"Quote"> | number
    tax?: FloatFilter<"Quote"> | number
    total?: FloatFilter<"Quote"> | number
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    status?: EnumQuoteStatusFilter<"Quote"> | $Enums.QuoteStatus
    createdAt?: DateTimeFilter<"Quote"> | Date | string
    updatedAt?: DateTimeFilter<"Quote"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutCustomerInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutCustomerInput, InvoiceUncheckedUpdateWithoutCustomerInput>
    create: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutCustomerInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutCustomerInput, InvoiceUncheckedUpdateWithoutCustomerInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutCustomerInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CompanyCreateWithoutVendorsInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    users?: UserCreateNestedManyWithoutCompanyInput
    customers?: CustomerCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutVendorsInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    phone?: string | null
    email?: string | null
    gstHst?: string | null
    pst?: string | null
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    customers?: CustomerUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutVendorsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutVendorsInput, CompanyUncheckedCreateWithoutVendorsInput>
  }

  export type PurchaseOrderCreateWithoutVendorInput = {
    id?: string
    poNumber: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PurchaseOrderItemCreateNestedManyWithoutPoInput
  }

  export type PurchaseOrderUncheckedCreateWithoutVendorInput = {
    id?: string
    poNumber: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PurchaseOrderItemUncheckedCreateNestedManyWithoutPoInput
  }

  export type PurchaseOrderCreateOrConnectWithoutVendorInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutVendorInput, PurchaseOrderUncheckedCreateWithoutVendorInput>
  }

  export type PurchaseOrderCreateManyVendorInputEnvelope = {
    data: PurchaseOrderCreateManyVendorInput | PurchaseOrderCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutVendorsInput = {
    update: XOR<CompanyUpdateWithoutVendorsInput, CompanyUncheckedUpdateWithoutVendorsInput>
    create: XOR<CompanyCreateWithoutVendorsInput, CompanyUncheckedCreateWithoutVendorsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutVendorsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutVendorsInput, CompanyUncheckedUpdateWithoutVendorsInput>
  }

  export type CompanyUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutCompanyNestedInput
    customers?: CustomerUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    pst?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutVendorInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutVendorInput, PurchaseOrderUncheckedUpdateWithoutVendorInput>
    create: XOR<PurchaseOrderCreateWithoutVendorInput, PurchaseOrderUncheckedCreateWithoutVendorInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutVendorInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutVendorInput, PurchaseOrderUncheckedUpdateWithoutVendorInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutVendorInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutVendorInput>
  }

  export type PurchaseOrderScalarWhereInput = {
    AND?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
    OR?: PurchaseOrderScalarWhereInput[]
    NOT?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
    id?: StringFilter<"PurchaseOrder"> | string
    poNumber?: StringFilter<"PurchaseOrder"> | string
    vendorId?: StringFilter<"PurchaseOrder"> | string
    status?: EnumPoStatusFilter<"PurchaseOrder"> | $Enums.PoStatus
    orderDate?: DateTimeFilter<"PurchaseOrder"> | Date | string
    requiredBy?: DateTimeNullableFilter<"PurchaseOrder"> | Date | string | null
    subtotal?: FloatFilter<"PurchaseOrder"> | number
    tax?: FloatFilter<"PurchaseOrder"> | number
    total?: FloatFilter<"PurchaseOrder"> | number
    notes?: StringNullableFilter<"PurchaseOrder"> | string | null
    createdAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
  }

  export type VendorCreateWithoutPurchaseOrdersInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    company?: CompanyCreateNestedOneWithoutVendorsInput
  }

  export type VendorUncheckedCreateWithoutPurchaseOrdersInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type VendorCreateOrConnectWithoutPurchaseOrdersInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutPurchaseOrdersInput, VendorUncheckedCreateWithoutPurchaseOrdersInput>
  }

  export type PurchaseOrderItemCreateWithoutPoInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
    material: MaterialCreateNestedOneWithoutPoItemsInput
  }

  export type PurchaseOrderItemUncheckedCreateWithoutPoInput = {
    id?: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
  }

  export type PurchaseOrderItemCreateOrConnectWithoutPoInput = {
    where: PurchaseOrderItemWhereUniqueInput
    create: XOR<PurchaseOrderItemCreateWithoutPoInput, PurchaseOrderItemUncheckedCreateWithoutPoInput>
  }

  export type PurchaseOrderItemCreateManyPoInputEnvelope = {
    data: PurchaseOrderItemCreateManyPoInput | PurchaseOrderItemCreateManyPoInput[]
    skipDuplicates?: boolean
  }

  export type VendorUpsertWithoutPurchaseOrdersInput = {
    update: XOR<VendorUpdateWithoutPurchaseOrdersInput, VendorUncheckedUpdateWithoutPurchaseOrdersInput>
    create: XOR<VendorCreateWithoutPurchaseOrdersInput, VendorUncheckedCreateWithoutPurchaseOrdersInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutPurchaseOrdersInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutPurchaseOrdersInput, VendorUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type VendorUpdateWithoutPurchaseOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutVendorsNestedInput
  }

  export type VendorUncheckedUpdateWithoutPurchaseOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUpsertWithWhereUniqueWithoutPoInput = {
    where: PurchaseOrderItemWhereUniqueInput
    update: XOR<PurchaseOrderItemUpdateWithoutPoInput, PurchaseOrderItemUncheckedUpdateWithoutPoInput>
    create: XOR<PurchaseOrderItemCreateWithoutPoInput, PurchaseOrderItemUncheckedCreateWithoutPoInput>
  }

  export type PurchaseOrderItemUpdateWithWhereUniqueWithoutPoInput = {
    where: PurchaseOrderItemWhereUniqueInput
    data: XOR<PurchaseOrderItemUpdateWithoutPoInput, PurchaseOrderItemUncheckedUpdateWithoutPoInput>
  }

  export type PurchaseOrderItemUpdateManyWithWhereWithoutPoInput = {
    where: PurchaseOrderItemScalarWhereInput
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyWithoutPoInput>
  }

  export type PurchaseOrderCreateWithoutItemsInput = {
    id?: string
    poNumber: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor: VendorCreateNestedOneWithoutPurchaseOrdersInput
  }

  export type PurchaseOrderUncheckedCreateWithoutItemsInput = {
    id?: string
    poNumber: string
    vendorId: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderCreateOrConnectWithoutItemsInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
  }

  export type MaterialCreateWithoutPoItemsInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemCreateNestedManyWithoutMaterialInput
    heatBatches?: HeatBatchCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateWithoutPoItemsInput = {
    id?: string
    code: string
    description: string
    category: string
    grade?: string | null
    size?: string | null
    unit: string
    unitCost?: number | null
    qtyOnHand?: number
    qtyReserved?: number
    reorderPoint?: number | null
    preferredVendor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bomItems?: BomItemUncheckedCreateNestedManyWithoutMaterialInput
    heatBatches?: HeatBatchUncheckedCreateNestedManyWithoutMaterialInput
    stockMoves?: StockMovementUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialCreateOrConnectWithoutPoItemsInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutPoItemsInput, MaterialUncheckedCreateWithoutPoItemsInput>
  }

  export type PurchaseOrderUpsertWithoutItemsInput = {
    update: XOR<PurchaseOrderUpdateWithoutItemsInput, PurchaseOrderUncheckedUpdateWithoutItemsInput>
    create: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
    where?: PurchaseOrderWhereInput
  }

  export type PurchaseOrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: PurchaseOrderWhereInput
    data: XOR<PurchaseOrderUpdateWithoutItemsInput, PurchaseOrderUncheckedUpdateWithoutItemsInput>
  }

  export type PurchaseOrderUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutPurchaseOrdersNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialUpsertWithoutPoItemsInput = {
    update: XOR<MaterialUpdateWithoutPoItemsInput, MaterialUncheckedUpdateWithoutPoItemsInput>
    create: XOR<MaterialCreateWithoutPoItemsInput, MaterialUncheckedCreateWithoutPoItemsInput>
    where?: MaterialWhereInput
  }

  export type MaterialUpdateToOneWithWhereWithoutPoItemsInput = {
    where?: MaterialWhereInput
    data: XOR<MaterialUpdateWithoutPoItemsInput, MaterialUncheckedUpdateWithoutPoItemsInput>
  }

  export type MaterialUpdateWithoutPoItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUpdateManyWithoutMaterialNestedInput
    heatBatches?: HeatBatchUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateWithoutPoItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    qtyOnHand?: FloatFieldUpdateOperationsInput | number
    qtyReserved?: FloatFieldUpdateOperationsInput | number
    reorderPoint?: NullableFloatFieldUpdateOperationsInput | number | null
    preferredVendor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bomItems?: BomItemUncheckedUpdateManyWithoutMaterialNestedInput
    heatBatches?: HeatBatchUncheckedUpdateManyWithoutMaterialNestedInput
    stockMoves?: StockMovementUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type CustomerCreateWithoutQuotesInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    company?: CompanyCreateNestedOneWithoutCustomersInput
    jobs?: JobCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutQuotesInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutQuotesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutQuotesInput, CustomerUncheckedCreateWithoutQuotesInput>
  }

  export type QuoteItemCreateWithoutQuoteInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type QuoteItemUncheckedCreateWithoutQuoteInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type QuoteItemCreateOrConnectWithoutQuoteInput = {
    where: QuoteItemWhereUniqueInput
    create: XOR<QuoteItemCreateWithoutQuoteInput, QuoteItemUncheckedCreateWithoutQuoteInput>
  }

  export type QuoteItemCreateManyQuoteInputEnvelope = {
    data: QuoteItemCreateManyQuoteInput | QuoteItemCreateManyQuoteInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutQuoteInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutQuoteInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutQuoteInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutQuoteInput, JobUncheckedCreateWithoutQuoteInput>
  }

  export type JobCreateManyQuoteInputEnvelope = {
    data: JobCreateManyQuoteInput | JobCreateManyQuoteInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutQuotesInput = {
    update: XOR<CustomerUpdateWithoutQuotesInput, CustomerUncheckedUpdateWithoutQuotesInput>
    create: XOR<CustomerCreateWithoutQuotesInput, CustomerUncheckedCreateWithoutQuotesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutQuotesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutQuotesInput, CustomerUncheckedUpdateWithoutQuotesInput>
  }

  export type CustomerUpdateWithoutQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutCustomersNestedInput
    jobs?: JobUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type QuoteItemUpsertWithWhereUniqueWithoutQuoteInput = {
    where: QuoteItemWhereUniqueInput
    update: XOR<QuoteItemUpdateWithoutQuoteInput, QuoteItemUncheckedUpdateWithoutQuoteInput>
    create: XOR<QuoteItemCreateWithoutQuoteInput, QuoteItemUncheckedCreateWithoutQuoteInput>
  }

  export type QuoteItemUpdateWithWhereUniqueWithoutQuoteInput = {
    where: QuoteItemWhereUniqueInput
    data: XOR<QuoteItemUpdateWithoutQuoteInput, QuoteItemUncheckedUpdateWithoutQuoteInput>
  }

  export type QuoteItemUpdateManyWithWhereWithoutQuoteInput = {
    where: QuoteItemScalarWhereInput
    data: XOR<QuoteItemUpdateManyMutationInput, QuoteItemUncheckedUpdateManyWithoutQuoteInput>
  }

  export type QuoteItemScalarWhereInput = {
    AND?: QuoteItemScalarWhereInput | QuoteItemScalarWhereInput[]
    OR?: QuoteItemScalarWhereInput[]
    NOT?: QuoteItemScalarWhereInput | QuoteItemScalarWhereInput[]
    id?: StringFilter<"QuoteItem"> | string
    quoteId?: StringFilter<"QuoteItem"> | string
    description?: StringFilter<"QuoteItem"> | string
    quantity?: FloatFilter<"QuoteItem"> | number
    unit?: StringFilter<"QuoteItem"> | string
    unitPrice?: FloatFilter<"QuoteItem"> | number
    totalPrice?: FloatFilter<"QuoteItem"> | number
    createdAt?: DateTimeFilter<"QuoteItem"> | Date | string
  }

  export type JobUpsertWithWhereUniqueWithoutQuoteInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutQuoteInput, JobUncheckedUpdateWithoutQuoteInput>
    create: XOR<JobCreateWithoutQuoteInput, JobUncheckedCreateWithoutQuoteInput>
  }

  export type JobUpdateWithWhereUniqueWithoutQuoteInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutQuoteInput, JobUncheckedUpdateWithoutQuoteInput>
  }

  export type JobUpdateManyWithWhereWithoutQuoteInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutQuoteInput>
  }

  export type QuoteCreateWithoutItemsInput = {
    id?: string
    quoteNumber: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutQuotesInput
    jobs?: JobCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateWithoutItemsInput = {
    id?: string
    quoteNumber: string
    customerId: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteCreateOrConnectWithoutItemsInput = {
    where: QuoteWhereUniqueInput
    create: XOR<QuoteCreateWithoutItemsInput, QuoteUncheckedCreateWithoutItemsInput>
  }

  export type QuoteUpsertWithoutItemsInput = {
    update: XOR<QuoteUpdateWithoutItemsInput, QuoteUncheckedUpdateWithoutItemsInput>
    create: XOR<QuoteCreateWithoutItemsInput, QuoteUncheckedCreateWithoutItemsInput>
    where?: QuoteWhereInput
  }

  export type QuoteUpdateToOneWithWhereWithoutItemsInput = {
    where?: QuoteWhereInput
    data: XOR<QuoteUpdateWithoutItemsInput, QuoteUncheckedUpdateWithoutItemsInput>
  }

  export type QuoteUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutQuotesNestedInput
    jobs?: JobUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type CustomerCreateWithoutInvoicesInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    company?: CompanyCreateNestedOneWithoutCustomersInput
    jobs?: JobCreateNestedManyWithoutCustomerInput
    quotes?: QuoteCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutInvoicesInput = {
    id?: string
    companyId?: string | null
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutCustomerInput
    quotes?: QuoteUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutInvoicesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
  }

  export type JobCreateWithoutInvoicesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutInvoicesInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutInvoicesInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutInvoicesInput, JobUncheckedCreateWithoutInvoicesInput>
  }

  export type InvoiceItemCreateWithoutInvoiceInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type InvoiceItemUncheckedCreateWithoutInvoiceInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type InvoiceItemCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemCreateManyInvoiceInputEnvelope = {
    data: InvoiceItemCreateManyInvoiceInput | InvoiceItemCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutInvoiceInput = {
    id?: string
    amount: number
    paymentMethod: $Enums.PaymentMethod
    reference?: string | null
    paidAt?: Date | string
    createdAt?: Date | string
  }

  export type PaymentUncheckedCreateWithoutInvoiceInput = {
    id?: string
    amount: number
    paymentMethod: $Enums.PaymentMethod
    reference?: string | null
    paidAt?: Date | string
    createdAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput>
  }

  export type PaymentCreateManyInvoiceInputEnvelope = {
    data: PaymentCreateManyInvoiceInput | PaymentCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutInvoicesInput = {
    update: XOR<CustomerUpdateWithoutInvoicesInput, CustomerUncheckedUpdateWithoutInvoicesInput>
    create: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutInvoicesInput, CustomerUncheckedUpdateWithoutInvoicesInput>
  }

  export type CustomerUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutCustomersNestedInput
    jobs?: JobUpdateManyWithoutCustomerNestedInput
    quotes?: QuoteUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutCustomerNestedInput
    quotes?: QuoteUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type JobUpsertWithoutInvoicesInput = {
    update: XOR<JobUpdateWithoutInvoicesInput, JobUncheckedUpdateWithoutInvoicesInput>
    create: XOR<JobCreateWithoutInvoicesInput, JobUncheckedCreateWithoutInvoicesInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutInvoicesInput, JobUncheckedUpdateWithoutInvoicesInput>
  }

  export type JobUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceItemScalarWhereInput = {
    AND?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    OR?: InvoiceItemScalarWhereInput[]
    NOT?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    id?: StringFilter<"InvoiceItem"> | string
    invoiceId?: StringFilter<"InvoiceItem"> | string
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: FloatFilter<"InvoiceItem"> | number
    unit?: StringFilter<"InvoiceItem"> | string
    unitPrice?: FloatFilter<"InvoiceItem"> | number
    totalPrice?: FloatFilter<"InvoiceItem"> | number
    createdAt?: DateTimeFilter<"InvoiceItem"> | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutInvoiceInput, PaymentUncheckedUpdateWithoutInvoiceInput>
    create: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutInvoiceInput, PaymentUncheckedUpdateWithoutInvoiceInput>
  }

  export type PaymentUpdateManyWithWhereWithoutInvoiceInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    invoiceId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    reference?: StringNullableFilter<"Payment"> | string | null
    paidAt?: DateTimeFilter<"Payment"> | Date | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type InvoiceCreateWithoutItemsInput = {
    id?: string
    invoiceNumber: string
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    job?: JobCreateNestedOneWithoutInvoicesInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutItemsInput = {
    id?: string
    invoiceNumber: string
    customerId: string
    jobId?: string | null
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutItemsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
  }

  export type InvoiceUpsertWithoutItemsInput = {
    update: XOR<InvoiceUpdateWithoutItemsInput, InvoiceUncheckedUpdateWithoutItemsInput>
    create: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutItemsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutItemsInput, InvoiceUncheckedUpdateWithoutItemsInput>
  }

  export type InvoiceUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    job?: JobUpdateOneWithoutInvoicesNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateWithoutPaymentsInput = {
    id?: string
    invoiceNumber: string
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    job?: JobCreateNestedOneWithoutInvoicesInput
    items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutPaymentsInput = {
    id?: string
    invoiceNumber: string
    customerId: string
    jobId?: string | null
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutPaymentsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
  }

  export type InvoiceUpsertWithoutPaymentsInput = {
    update: XOR<InvoiceUpdateWithoutPaymentsInput, InvoiceUncheckedUpdateWithoutPaymentsInput>
    create: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutPaymentsInput, InvoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type InvoiceUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    job?: JobUpdateOneWithoutInvoicesNestedInput
    items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type ServiceLogCreateWithoutEquipmentInput = {
    id?: string
    serviceType: $Enums.ServiceType
    description: string
    cost?: number | null
    servicedAt: Date | string
    nextDue?: Date | string | null
    createdAt?: Date | string
  }

  export type ServiceLogUncheckedCreateWithoutEquipmentInput = {
    id?: string
    serviceType: $Enums.ServiceType
    description: string
    cost?: number | null
    servicedAt: Date | string
    nextDue?: Date | string | null
    createdAt?: Date | string
  }

  export type ServiceLogCreateOrConnectWithoutEquipmentInput = {
    where: ServiceLogWhereUniqueInput
    create: XOR<ServiceLogCreateWithoutEquipmentInput, ServiceLogUncheckedCreateWithoutEquipmentInput>
  }

  export type ServiceLogCreateManyEquipmentInputEnvelope = {
    data: ServiceLogCreateManyEquipmentInput | ServiceLogCreateManyEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type ServiceLogUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: ServiceLogWhereUniqueInput
    update: XOR<ServiceLogUpdateWithoutEquipmentInput, ServiceLogUncheckedUpdateWithoutEquipmentInput>
    create: XOR<ServiceLogCreateWithoutEquipmentInput, ServiceLogUncheckedCreateWithoutEquipmentInput>
  }

  export type ServiceLogUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: ServiceLogWhereUniqueInput
    data: XOR<ServiceLogUpdateWithoutEquipmentInput, ServiceLogUncheckedUpdateWithoutEquipmentInput>
  }

  export type ServiceLogUpdateManyWithWhereWithoutEquipmentInput = {
    where: ServiceLogScalarWhereInput
    data: XOR<ServiceLogUpdateManyMutationInput, ServiceLogUncheckedUpdateManyWithoutEquipmentInput>
  }

  export type ServiceLogScalarWhereInput = {
    AND?: ServiceLogScalarWhereInput | ServiceLogScalarWhereInput[]
    OR?: ServiceLogScalarWhereInput[]
    NOT?: ServiceLogScalarWhereInput | ServiceLogScalarWhereInput[]
    id?: StringFilter<"ServiceLog"> | string
    equipmentId?: StringFilter<"ServiceLog"> | string
    serviceType?: EnumServiceTypeFilter<"ServiceLog"> | $Enums.ServiceType
    description?: StringFilter<"ServiceLog"> | string
    cost?: FloatNullableFilter<"ServiceLog"> | number | null
    servicedAt?: DateTimeFilter<"ServiceLog"> | Date | string
    nextDue?: DateTimeNullableFilter<"ServiceLog"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceLog"> | Date | string
  }

  export type EquipmentCreateWithoutServiceLogsInput = {
    id?: string
    name: string
    category: $Enums.EquipmentType
    manufacturer?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type EquipmentUncheckedCreateWithoutServiceLogsInput = {
    id?: string
    name: string
    category: $Enums.EquipmentType
    manufacturer?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type EquipmentCreateOrConnectWithoutServiceLogsInput = {
    where: EquipmentWhereUniqueInput
    create: XOR<EquipmentCreateWithoutServiceLogsInput, EquipmentUncheckedCreateWithoutServiceLogsInput>
  }

  export type EquipmentUpsertWithoutServiceLogsInput = {
    update: XOR<EquipmentUpdateWithoutServiceLogsInput, EquipmentUncheckedUpdateWithoutServiceLogsInput>
    create: XOR<EquipmentCreateWithoutServiceLogsInput, EquipmentUncheckedCreateWithoutServiceLogsInput>
    where?: EquipmentWhereInput
  }

  export type EquipmentUpdateToOneWithWhereWithoutServiceLogsInput = {
    where?: EquipmentWhereInput
    data: XOR<EquipmentUpdateWithoutServiceLogsInput, EquipmentUncheckedUpdateWithoutServiceLogsInput>
  }

  export type EquipmentUpdateWithoutServiceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumEquipmentTypeFieldUpdateOperationsInput | $Enums.EquipmentType
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentUncheckedUpdateWithoutServiceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumEquipmentTypeFieldUpdateOperationsInput | $Enums.EquipmentType
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateWithoutWorkOrdersInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutJobsInput
    createdBy: UserCreateNestedOneWithoutCreatedJobsInput
    quote?: QuoteCreateNestedOneWithoutJobsInput
    phases?: JobPhaseCreateNestedManyWithoutJobInput
    drawings?: DrawingCreateNestedManyWithoutJobInput
    bomItems?: BomItemCreateNestedManyWithoutJobInput
    timecards?: TimecardCreateNestedManyWithoutJobInput
    invoices?: InvoiceCreateNestedManyWithoutJobInput
    Inspection?: InspectionCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: JobPhaseUncheckedCreateNestedManyWithoutJobInput
    drawings?: DrawingUncheckedCreateNestedManyWithoutJobInput
    bomItems?: BomItemUncheckedCreateNestedManyWithoutJobInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutJobInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutJobInput
    Inspection?: InspectionUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutWorkOrdersInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutWorkOrdersInput, JobUncheckedCreateWithoutWorkOrdersInput>
  }

  export type TruckTripCreateWithoutWorkOrderInput = {
    id?: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
    driver: UserCreateNestedOneWithoutTruckTripsInput
  }

  export type TruckTripUncheckedCreateWithoutWorkOrderInput = {
    id?: string
    driverId: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type TruckTripCreateOrConnectWithoutWorkOrderInput = {
    where: TruckTripWhereUniqueInput
    create: XOR<TruckTripCreateWithoutWorkOrderInput, TruckTripUncheckedCreateWithoutWorkOrderInput>
  }

  export type TruckTripCreateManyWorkOrderInputEnvelope = {
    data: TruckTripCreateManyWorkOrderInput | TruckTripCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutWorkOrdersInput = {
    update: XOR<JobUpdateWithoutWorkOrdersInput, JobUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<JobCreateWithoutWorkOrdersInput, JobUncheckedCreateWithoutWorkOrdersInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutWorkOrdersInput, JobUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type JobUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type TruckTripUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: TruckTripWhereUniqueInput
    update: XOR<TruckTripUpdateWithoutWorkOrderInput, TruckTripUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<TruckTripCreateWithoutWorkOrderInput, TruckTripUncheckedCreateWithoutWorkOrderInput>
  }

  export type TruckTripUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: TruckTripWhereUniqueInput
    data: XOR<TruckTripUpdateWithoutWorkOrderInput, TruckTripUncheckedUpdateWithoutWorkOrderInput>
  }

  export type TruckTripUpdateManyWithWhereWithoutWorkOrderInput = {
    where: TruckTripScalarWhereInput
    data: XOR<TruckTripUpdateManyMutationInput, TruckTripUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderCreateWithoutTruckTripsInput = {
    id?: string
    woNumber: string
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job?: JobCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderUncheckedCreateWithoutTruckTripsInput = {
    id?: string
    woNumber: string
    jobId?: string | null
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateOrConnectWithoutTruckTripsInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutTruckTripsInput, WorkOrderUncheckedCreateWithoutTruckTripsInput>
  }

  export type UserCreateWithoutTruckTripsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertCreateNestedManyWithoutWelderInput
    role: RoleCreateNestedOneWithoutUsersInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    timecards?: TimecardCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassCreateNestedManyWithoutWelderInput
    inspections?: InspectionCreateNestedManyWithoutInspectorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdJobs?: JobCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutTruckTripsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    welderCerts?: WelderCertUncheckedCreateNestedManyWithoutWelderInput
    timecards?: TimecardUncheckedCreateNestedManyWithoutUserInput
    weldPasses?: WeldPassUncheckedCreateNestedManyWithoutWelderInput
    inspections?: InspectionUncheckedCreateNestedManyWithoutInspectorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdJobs?: JobUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutTruckTripsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTruckTripsInput, UserUncheckedCreateWithoutTruckTripsInput>
  }

  export type WorkOrderUpsertWithoutTruckTripsInput = {
    update: XOR<WorkOrderUpdateWithoutTruckTripsInput, WorkOrderUncheckedUpdateWithoutTruckTripsInput>
    create: XOR<WorkOrderCreateWithoutTruckTripsInput, WorkOrderUncheckedCreateWithoutTruckTripsInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutTruckTripsInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutTruckTripsInput, WorkOrderUncheckedUpdateWithoutTruckTripsInput>
  }

  export type WorkOrderUpdateWithoutTruckTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutWorkOrdersNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutTruckTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTruckTripsInput = {
    update: XOR<UserUpdateWithoutTruckTripsInput, UserUncheckedUpdateWithoutTruckTripsInput>
    create: XOR<UserCreateWithoutTruckTripsInput, UserUncheckedCreateWithoutTruckTripsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTruckTripsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTruckTripsInput, UserUncheckedUpdateWithoutTruckTripsInput>
  }

  export type UserUpdateWithoutTruckTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTruckTripsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type WelderCertCreateManyWelderInput = {
    id?: string
    wpsId: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
  }

  export type TimecardCreateManyUserInput = {
    id?: string
    jobId?: string | null
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
  }

  export type WeldPassCreateManyWelderInput = {
    id?: string
    timecardId: string
    wpsId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type InspectionCreateManyInspectorInput = {
    id?: string
    jobId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type JobCreateManyCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TruckTripCreateManyDriverInput = {
    id?: string
    workOrderId: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type WelderCertUpdateWithoutWelderInput = {
    id?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wps?: WpsSpecUpdateOneRequiredWithoutWelderCertsNestedInput
  }

  export type WelderCertUncheckedUpdateWithoutWelderInput = {
    id?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelderCertUncheckedUpdateManyWithoutWelderInput = {
    id?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimecardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutTimecardsNestedInput
    task?: TaskUpdateOneWithoutTimecardsNestedInput
    wps?: WpsSpecUpdateOneWithoutTimecardsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldPasses?: WeldPassUncheckedUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassUpdateWithoutWelderInput = {
    id?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timecard?: TimecardUpdateOneRequiredWithoutWeldPassesNestedInput
    wps?: WpsSpecUpdateOneRequiredWithoutWeldPassesNestedInput
  }

  export type WeldPassUncheckedUpdateWithoutWelderInput = {
    id?: StringFieldUpdateOperationsInput | string
    timecardId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassUncheckedUpdateManyWithoutWelderInput = {
    id?: StringFieldUpdateOperationsInput | string
    timecardId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspectionUpdateWithoutInspectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutInspectionNestedInput
    weldLogs?: WeldLogUpdateManyWithoutInspectionNestedInput
    repairLogs?: RepairLogUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionUncheckedUpdateWithoutInspectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldLogs?: WeldLogUncheckedUpdateManyWithoutInspectionNestedInput
    repairLogs?: RepairLogUncheckedUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionUncheckedUpdateManyWithoutInspectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckTripUpdateWithoutDriverInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutTruckTripsNestedInput
  }

  export type TruckTripUncheckedUpdateWithoutDriverInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckTripUncheckedUpdateManyWithoutDriverInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyRoleInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    companyId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    roleId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerCreateManyCompanyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    gstHst?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type VendorCreateManyCompanyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    province?: string | null
    postal?: string | null
    terms?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type UserUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUpdateManyWithoutWelderNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    timecards?: TimecardUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdJobs?: JobUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welderCerts?: WelderCertUncheckedUpdateManyWithoutWelderNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutUserNestedInput
    weldPasses?: WeldPassUncheckedUpdateManyWithoutWelderNestedInput
    inspections?: InspectionUncheckedUpdateManyWithoutInspectorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdJobs?: JobUncheckedUpdateManyWithoutCreatedByNestedInput
    truckTrips?: TruckTripUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUpdateManyWithoutCustomerNestedInput
    quotes?: QuoteUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutCustomerNestedInput
    quotes?: QuoteUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    gstHst?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrders?: PurchaseOrderUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    terms?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobPhaseCreateManyJobInput = {
    id?: string
    name: string
    sequence: number
    status?: $Enums.PhaseStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DrawingCreateManyJobInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    revision?: string
    isApproved?: boolean
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
  }

  export type BomItemCreateManyJobInput = {
    id?: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
  }

  export type TimecardCreateManyJobInput = {
    id?: string
    userId: string
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
  }

  export type InvoiceCreateManyJobInput = {
    id?: string
    invoiceNumber: string
    customerId: string
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateManyJobInput = {
    id?: string
    woNumber: string
    customerId?: string | null
    title: string
    description?: string | null
    address: string
    city: string
    province: string
    postal?: string | null
    priority?: $Enums.Priority
    status?: $Enums.WorkOrderStatus
    scheduledAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InspectionCreateManyJobInput = {
    id?: string
    inspectorId?: string | null
    inspectionType: $Enums.InspectionType
    jointNumbers?: InspectionCreatejointNumbersInput | string[]
    result: string
    notes?: string | null
    reportUrl?: string | null
    inspectedAt: Date | string
    createdAt?: Date | string
  }

  export type JobPhaseUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutPhaseNestedInput
  }

  export type JobPhaseUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type JobPhaseUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DrawingUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    revision?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DrawingUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    revision?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DrawingUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    revision?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: MaterialUpdateOneRequiredWithoutBomItemsNestedInput
  }

  export type BomItemUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimecardUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimecardsNestedInput
    task?: TaskUpdateOneWithoutTimecardsNestedInput
    wps?: WpsSpecUpdateOneWithoutTimecardsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldPasses?: WeldPassUncheckedUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckTrips?: TruckTripUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckTrips?: TruckTripUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    woNumber?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postal?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InspectionUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inspector?: UserUpdateOneWithoutInspectionsNestedInput
    weldLogs?: WeldLogUpdateManyWithoutInspectionNestedInput
    repairLogs?: RepairLogUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldLogs?: WeldLogUncheckedUpdateManyWithoutInspectionNestedInput
    repairLogs?: RepairLogUncheckedUpdateManyWithoutInspectionNestedInput
  }

  export type InspectionUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionType?: EnumInspectionTypeFieldUpdateOperationsInput | $Enums.InspectionType
    jointNumbers?: InspectionUpdatejointNumbersInput | string[]
    result?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyPhaseInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    estimatedHours?: number | null
    actualHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timecards?: TimecardUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timecards?: TimecardUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimecardCreateManyTaskInput = {
    id?: string
    userId: string
    jobId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    wpsId?: string | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
  }

  export type TimecardUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimecardsNestedInput
    job?: JobUpdateOneWithoutTimecardsNestedInput
    wps?: WpsSpecUpdateOneWithoutTimecardsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldPasses?: WeldPassUncheckedUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    wpsId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemCreateManyMaterialInput = {
    id?: string
    jobId: string
    description: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    isOrdered?: boolean
    createdAt?: Date | string
  }

  export type HeatBatchCreateManyMaterialInput = {
    id?: string
    heatNumber: string
    mtrUrl?: string | null
    quantity: number
    unit: string
    receivedAt: Date | string
    createdAt?: Date | string
  }

  export type StockMovementCreateManyMaterialInput = {
    id?: string
    fromLocationId?: string | null
    toLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type PurchaseOrderItemCreateManyMaterialInput = {
    id?: string
    poId: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
  }

  export type BomItemUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutBomItemsNestedInput
  }

  export type BomItemUncheckedUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemUncheckedUpdateManyWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    isOrdered?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeatBatchUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    heatNumber?: StringFieldUpdateOperationsInput | string
    mtrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeatBatchUncheckedUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    heatNumber?: StringFieldUpdateOperationsInput | string
    mtrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeatBatchUncheckedUpdateManyWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    heatNumber?: StringFieldUpdateOperationsInput | string
    mtrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromLocation?: StockLocationUpdateOneWithoutMovementsFromNestedInput
    toLocation?: StockLocationUpdateOneWithoutMovementsToNestedInput
  }

  export type StockMovementUncheckedUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    toLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUncheckedUpdateManyWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    toLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    po?: PurchaseOrderUpdateOneRequiredWithoutItemsNestedInput
  }

  export type PurchaseOrderItemUncheckedUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    poId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    poId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementCreateManyFromLocationInput = {
    id?: string
    materialId: string
    toLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type StockMovementCreateManyToLocationInput = {
    id?: string
    materialId: string
    fromLocationId?: string | null
    quantity: number
    unit: string
    movementType: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type StockMovementUpdateWithoutFromLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: MaterialUpdateOneRequiredWithoutStockMovesNestedInput
    toLocation?: StockLocationUpdateOneWithoutMovementsToNestedInput
  }

  export type StockMovementUncheckedUpdateWithoutFromLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    toLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUncheckedUpdateManyWithoutFromLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    toLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUpdateWithoutToLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: MaterialUpdateOneRequiredWithoutStockMovesNestedInput
    fromLocation?: StockLocationUpdateOneWithoutMovementsFromNestedInput
  }

  export type StockMovementUncheckedUpdateWithoutToLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    fromLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUncheckedUpdateManyWithoutToLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    fromLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassCreateManyTimecardInput = {
    id?: string
    welderId: string
    wpsId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type WeldPassUpdateWithoutTimecardInput = {
    id?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welder?: UserUpdateOneRequiredWithoutWeldPassesNestedInput
    wps?: WpsSpecUpdateOneRequiredWithoutWeldPassesNestedInput
  }

  export type WeldPassUncheckedUpdateWithoutTimecardInput = {
    id?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassUncheckedUpdateManyWithoutTimecardInput = {
    id?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    wpsId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PqrTestCreateManyWpsInput = {
    id?: string
    testType: string
    result: string
    value?: number | null
    unit?: string | null
    testDate: Date | string
    labName?: string | null
    certUrl?: string | null
    createdAt?: Date | string
  }

  export type WelderCertCreateManyWpsInput = {
    id?: string
    welderId: string
    certNumber: string
    issuedAt: Date | string
    expiresAt: Date | string
    isActive?: boolean
    certPdfUrl?: string | null
    createdAt?: Date | string
  }

  export type TimecardCreateManyWpsInput = {
    id?: string
    userId: string
    jobId?: string | null
    taskId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    totalHours?: number | null
    notes?: string | null
    isApproved?: boolean
    createdAt?: Date | string
  }

  export type WeldPassCreateManyWpsInput = {
    id?: string
    timecardId: string
    welderId: string
    jointNumber?: string | null
    passNumber: number
    amps?: number | null
    volts?: number | null
    wireFeed?: number | null
    travelSpeed?: number | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type PqrTestUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    testType?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    testDate?: DateTimeFieldUpdateOperationsInput | Date | string
    labName?: NullableStringFieldUpdateOperationsInput | string | null
    certUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PqrTestUncheckedUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    testType?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    testDate?: DateTimeFieldUpdateOperationsInput | Date | string
    labName?: NullableStringFieldUpdateOperationsInput | string | null
    certUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PqrTestUncheckedUpdateManyWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    testType?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    testDate?: DateTimeFieldUpdateOperationsInput | Date | string
    labName?: NullableStringFieldUpdateOperationsInput | string | null
    certUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelderCertUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welder?: UserUpdateOneRequiredWithoutWelderCertsNestedInput
  }

  export type WelderCertUncheckedUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelderCertUncheckedUpdateManyWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    certNumber?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certPdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimecardUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimecardsNestedInput
    job?: JobUpdateOneWithoutTimecardsNestedInput
    task?: TaskUpdateOneWithoutTimecardsNestedInput
    weldPasses?: WeldPassUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weldPasses?: WeldPassUncheckedUpdateManyWithoutTimecardNestedInput
  }

  export type TimecardUncheckedUpdateManyWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timecard?: TimecardUpdateOneRequiredWithoutWeldPassesNestedInput
    welder?: UserUpdateOneRequiredWithoutWeldPassesNestedInput
  }

  export type WeldPassUncheckedUpdateWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    timecardId?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldPassUncheckedUpdateManyWithoutWpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    timecardId?: StringFieldUpdateOperationsInput | string
    welderId?: StringFieldUpdateOperationsInput | string
    jointNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passNumber?: IntFieldUpdateOperationsInput | number
    amps?: NullableFloatFieldUpdateOperationsInput | number | null
    volts?: NullableFloatFieldUpdateOperationsInput | number | null
    wireFeed?: NullableFloatFieldUpdateOperationsInput | number | null
    travelSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldLogCreateManyInspectionInput = {
    id?: string
    weldNumber: string
    jointId?: string | null
    process: string
    position: string
    welderId?: string | null
    length?: number | null
    defects?: WeldLogCreatedefectsInput | string[]
    createdAt?: Date | string
  }

  export type RepairLogCreateManyInspectionInput = {
    id?: string
    weldNumber: string
    defectType: string
    repairMethod: string
    repairedBy?: string | null
    repairedAt?: Date | string | null
    isCompleted?: boolean
    notes?: string | null
    createdAt?: Date | string
  }

  export type WeldLogUpdateWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    jointId?: NullableStringFieldUpdateOperationsInput | string | null
    process?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    welderId?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: WeldLogUpdatedefectsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldLogUncheckedUpdateWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    jointId?: NullableStringFieldUpdateOperationsInput | string | null
    process?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    welderId?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: WeldLogUpdatedefectsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeldLogUncheckedUpdateManyWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    jointId?: NullableStringFieldUpdateOperationsInput | string | null
    process?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    welderId?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: WeldLogUpdatedefectsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairLogUpdateWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    defectType?: StringFieldUpdateOperationsInput | string
    repairMethod?: StringFieldUpdateOperationsInput | string
    repairedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repairedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairLogUncheckedUpdateWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    defectType?: StringFieldUpdateOperationsInput | string
    repairMethod?: StringFieldUpdateOperationsInput | string
    repairedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repairedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairLogUncheckedUpdateManyWithoutInspectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    weldNumber?: StringFieldUpdateOperationsInput | string
    defectType?: StringFieldUpdateOperationsInput | string
    repairMethod?: StringFieldUpdateOperationsInput | string
    repairedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repairedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateManyCustomerInput = {
    id?: string
    title: string
    description?: string | null
    quoteId?: string | null
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuoteCreateManyCustomerInput = {
    id?: string
    quoteNumber: string
    title: string
    subtotal?: number
    tax?: number
    total?: number
    validUntil?: Date | string | null
    status?: $Enums.QuoteStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateManyCustomerInput = {
    id?: string
    invoiceNumber: string
    jobId?: string | null
    subtotal?: number
    gstHst?: number
    pst?: number
    total?: number
    status?: $Enums.InvoiceStatus
    issuedAt?: Date | string | null
    dueAt?: Date | string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    quote?: QuoteUpdateOneWithoutJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quoteId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: QuoteItemUpdateManyWithoutQuoteNestedInput
    jobs?: JobUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: QuoteItemUncheckedUpdateManyWithoutQuoteNestedInput
    jobs?: JobUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumQuoteStatusFieldUpdateOperationsInput | $Enums.QuoteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutInvoicesNestedInput
    items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    gstHst?: FloatFieldUpdateOperationsInput | number
    pst?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderCreateManyVendorInput = {
    id?: string
    poNumber: string
    status?: $Enums.PoStatus
    orderDate?: Date | string
    requiredBy?: Date | string | null
    subtotal?: number
    tax?: number
    total?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PurchaseOrderItemUpdateManyWithoutPoNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PurchaseOrderItemUncheckedUpdateManyWithoutPoNestedInput
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    poNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumPoStatusFieldUpdateOperationsInput | $Enums.PoStatus
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subtotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemCreateManyPoInput = {
    id?: string
    materialId: string
    description: string
    quantity: number
    unit: string
    unitCost: number
    totalCost: number
    qtyReceived?: number
    createdAt?: Date | string
  }

  export type PurchaseOrderItemUpdateWithoutPoInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: MaterialUpdateOneRequiredWithoutPoItemsNestedInput
  }

  export type PurchaseOrderItemUncheckedUpdateWithoutPoInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutPoInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: FloatFieldUpdateOperationsInput | number
    totalCost?: FloatFieldUpdateOperationsInput | number
    qtyReceived?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteItemCreateManyQuoteInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type JobCreateManyQuoteInput = {
    id?: string
    title: string
    description?: string | null
    customerId: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    startDate?: Date | string | null
    completedAt?: Date | string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuoteItemUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteItemUncheckedUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteItemUncheckedUpdateManyWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutJobsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedJobsNestedInput
    phases?: JobPhaseUpdateManyWithoutJobNestedInput
    drawings?: DrawingUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUpdateManyWithoutJobNestedInput
    timecards?: TimecardUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: JobPhaseUncheckedUpdateManyWithoutJobNestedInput
    drawings?: DrawingUncheckedUpdateManyWithoutJobNestedInput
    bomItems?: BomItemUncheckedUpdateManyWithoutJobNestedInput
    timecards?: TimecardUncheckedUpdateManyWithoutJobNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutJobNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutJobNestedInput
    Inspection?: InspectionUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateManyInvoiceInput = {
    id?: string
    description: string
    quantity: number
    unit: string
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
  }

  export type PaymentCreateManyInvoiceInput = {
    id?: string
    amount: number
    paymentMethod: $Enums.PaymentMethod
    reference?: string | null
    paidAt?: Date | string
    createdAt?: Date | string
  }

  export type InvoiceItemUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceLogCreateManyEquipmentInput = {
    id?: string
    serviceType: $Enums.ServiceType
    description: string
    cost?: number | null
    servicedAt: Date | string
    nextDue?: Date | string | null
    createdAt?: Date | string
  }

  export type ServiceLogUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    servicedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceLogUncheckedUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    servicedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceLogUncheckedUpdateManyWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    servicedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckTripCreateManyWorkOrderInput = {
    id?: string
    driverId: string
    truckId?: string | null
    startTime?: Date | string | null
    endTime?: Date | string | null
    odometerStart?: number | null
    odometerEnd?: number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripCreatephotosInput | string[]
    signature?: string | null
    notes?: string | null
    createdAt?: Date | string
  }

  export type TruckTripUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    driver?: UserUpdateOneRequiredWithoutTruckTripsNestedInput
  }

  export type TruckTripUncheckedUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    driverId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckTripUncheckedUpdateManyWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    driverId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    odometerStart?: NullableIntFieldUpdateOperationsInput | number | null
    odometerEnd?: NullableIntFieldUpdateOperationsInput | number | null
    gpsStart?: NullableJsonNullValueInput | InputJsonValue
    gpsEnd?: NullableJsonNullValueInput | InputJsonValue
    photos?: TruckTripUpdatephotosInput | string[]
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}