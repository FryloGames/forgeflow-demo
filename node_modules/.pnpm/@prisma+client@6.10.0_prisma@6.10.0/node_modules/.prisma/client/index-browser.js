
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
Prisma.prismaVersion = {
  client: "6.10.0",
  engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  roleId: 'roleId',
  companyId: 'companyId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  permissions: 'permissions'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  province: 'province',
  postal: 'postal',
  phone: 'phone',
  email: 'email',
  gstHst: 'gstHst',
  pst: 'pst'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  customerId: 'customerId',
  quoteId: 'quoteId',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  startDate: 'startDate',
  completedAt: 'completedAt',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobPhaseScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  name: 'name',
  sequence: 'sequence',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  phaseId: 'phaseId',
  title: 'title',
  description: 'description',
  status: 'status',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DrawingScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  filename: 'filename',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  revision: 'revision',
  isApproved: 'isApproved',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt'
};

exports.Prisma.BomItemScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  materialId: 'materialId',
  description: 'description',
  quantity: 'quantity',
  unit: 'unit',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  isOrdered: 'isOrdered',
  createdAt: 'createdAt'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  category: 'category',
  grade: 'grade',
  size: 'size',
  unit: 'unit',
  unitCost: 'unitCost',
  qtyOnHand: 'qtyOnHand',
  qtyReserved: 'qtyReserved',
  reorderPoint: 'reorderPoint',
  preferredVendor: 'preferredVendor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HeatBatchScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  heatNumber: 'heatNumber',
  mtrUrl: 'mtrUrl',
  quantity: 'quantity',
  unit: 'unit',
  receivedAt: 'receivedAt',
  createdAt: 'createdAt'
};

exports.Prisma.StockLocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  fromLocationId: 'fromLocationId',
  toLocationId: 'toLocationId',
  quantity: 'quantity',
  unit: 'unit',
  movementType: 'movementType',
  reference: 'reference',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.TimecardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  taskId: 'taskId',
  startTime: 'startTime',
  endTime: 'endTime',
  totalHours: 'totalHours',
  wpsId: 'wpsId',
  notes: 'notes',
  isApproved: 'isApproved',
  createdAt: 'createdAt'
};

exports.Prisma.WeldPassScalarFieldEnum = {
  id: 'id',
  timecardId: 'timecardId',
  welderId: 'welderId',
  wpsId: 'wpsId',
  jointNumber: 'jointNumber',
  passNumber: 'passNumber',
  amps: 'amps',
  volts: 'volts',
  wireFeed: 'wireFeed',
  travelSpeed: 'travelSpeed',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.WpsSpecScalarFieldEnum = {
  id: 'id',
  code: 'code',
  title: 'title',
  process: 'process',
  materialGroup: 'materialGroup',
  positions: 'positions',
  thickness: 'thickness',
  pdfUrl: 'pdfUrl',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parameters: 'parameters'
};

exports.Prisma.PqrTestScalarFieldEnum = {
  id: 'id',
  wpsId: 'wpsId',
  testType: 'testType',
  result: 'result',
  value: 'value',
  unit: 'unit',
  testDate: 'testDate',
  labName: 'labName',
  certUrl: 'certUrl',
  createdAt: 'createdAt'
};

exports.Prisma.WelderCertScalarFieldEnum = {
  id: 'id',
  welderId: 'welderId',
  wpsId: 'wpsId',
  certNumber: 'certNumber',
  issuedAt: 'issuedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  certPdfUrl: 'certPdfUrl',
  createdAt: 'createdAt'
};

exports.Prisma.InspectionScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  inspectorId: 'inspectorId',
  inspectionType: 'inspectionType',
  jointNumbers: 'jointNumbers',
  result: 'result',
  notes: 'notes',
  reportUrl: 'reportUrl',
  inspectedAt: 'inspectedAt',
  createdAt: 'createdAt'
};

exports.Prisma.WeldLogScalarFieldEnum = {
  id: 'id',
  inspectionId: 'inspectionId',
  weldNumber: 'weldNumber',
  jointId: 'jointId',
  process: 'process',
  position: 'position',
  welderId: 'welderId',
  length: 'length',
  defects: 'defects',
  createdAt: 'createdAt'
};

exports.Prisma.RepairLogScalarFieldEnum = {
  id: 'id',
  inspectionId: 'inspectionId',
  weldNumber: 'weldNumber',
  defectType: 'defectType',
  repairMethod: 'repairMethod',
  repairedBy: 'repairedBy',
  repairedAt: 'repairedAt',
  isCompleted: 'isCompleted',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  province: 'province',
  postal: 'postal',
  gstHst: 'gstHst',
  terms: 'terms',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  province: 'province',
  postal: 'postal',
  terms: 'terms',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  poNumber: 'poNumber',
  vendorId: 'vendorId',
  status: 'status',
  orderDate: 'orderDate',
  requiredBy: 'requiredBy',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  poId: 'poId',
  materialId: 'materialId',
  description: 'description',
  quantity: 'quantity',
  unit: 'unit',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  qtyReceived: 'qtyReceived',
  createdAt: 'createdAt'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  quoteNumber: 'quoteNumber',
  customerId: 'customerId',
  title: 'title',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  validUntil: 'validUntil',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuoteItemScalarFieldEnum = {
  id: 'id',
  quoteId: 'quoteId',
  description: 'description',
  quantity: 'quantity',
  unit: 'unit',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  customerId: 'customerId',
  jobId: 'jobId',
  subtotal: 'subtotal',
  gstHst: 'gstHst',
  pst: 'pst',
  total: 'total',
  status: 'status',
  issuedAt: 'issuedAt',
  dueAt: 'dueAt',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  quantity: 'quantity',
  unit: 'unit',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  reference: 'reference',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  manufacturer: 'manufacturer',
  model: 'model',
  serialNumber: 'serialNumber',
  purchaseDate: 'purchaseDate',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceLogScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  serviceType: 'serviceType',
  description: 'description',
  cost: 'cost',
  servicedAt: 'servicedAt',
  nextDue: 'nextDue',
  createdAt: 'createdAt'
};

exports.Prisma.WorkOrderScalarFieldEnum = {
  id: 'id',
  woNumber: 'woNumber',
  jobId: 'jobId',
  customerId: 'customerId',
  title: 'title',
  description: 'description',
  address: 'address',
  city: 'city',
  province: 'province',
  postal: 'postal',
  priority: 'priority',
  status: 'status',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TruckTripScalarFieldEnum = {
  id: 'id',
  workOrderId: 'workOrderId',
  driverId: 'driverId',
  truckId: 'truckId',
  startTime: 'startTime',
  endTime: 'endTime',
  odometerStart: 'odometerStart',
  odometerEnd: 'odometerEnd',
  gpsStart: 'gpsStart',
  gpsEnd: 'gpsEnd',
  photos: 'photos',
  signature: 'signature',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.JobStatus = exports.$Enums.JobStatus = {
  QUOTED: 'QUOTED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.PhaseStatus = exports.$Enums.PhaseStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  BLOCKED: 'BLOCKED'
};

exports.InspectionType = exports.$Enums.InspectionType = {
  VT: 'VT',
  UT: 'UT',
  RT: 'RT',
  PT: 'PT',
  MT: 'MT'
};

exports.PoStatus = exports.$Enums.PoStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  CONFIRMED: 'CONFIRMED',
  PARTIAL: 'PARTIAL',
  RECEIVED: 'RECEIVED',
  CANCELLED: 'CANCELLED'
};

exports.QuoteStatus = exports.$Enums.QuoteStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  PARTIAL: 'PARTIAL',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CHEQUE: 'CHEQUE',
  CREDIT_CARD: 'CREDIT_CARD',
  ACH: 'ACH',
  WIRE: 'WIRE'
};

exports.EquipmentType = exports.$Enums.EquipmentType = {
  WELDER: 'WELDER',
  CRANE: 'CRANE',
  TRUCK: 'TRUCK',
  COMPRESSOR: 'COMPRESSOR',
  GRINDER: 'GRINDER',
  TORCH: 'TORCH'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  MAINTENANCE: 'MAINTENANCE',
  REPAIR: 'REPAIR',
  INSPECTION: 'INSPECTION',
  CALIBRATION: 'CALIBRATION'
};

exports.WorkOrderStatus = exports.$Enums.WorkOrderStatus = {
  ASSIGNED: 'ASSIGNED',
  EN_ROUTE: 'EN_ROUTE',
  ON_SITE: 'ON_SITE',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Session: 'Session',
  Company: 'Company',
  Job: 'Job',
  JobPhase: 'JobPhase',
  Task: 'Task',
  Drawing: 'Drawing',
  BomItem: 'BomItem',
  Material: 'Material',
  HeatBatch: 'HeatBatch',
  StockLocation: 'StockLocation',
  StockMovement: 'StockMovement',
  Timecard: 'Timecard',
  WeldPass: 'WeldPass',
  WpsSpec: 'WpsSpec',
  PqrTest: 'PqrTest',
  WelderCert: 'WelderCert',
  Inspection: 'Inspection',
  WeldLog: 'WeldLog',
  RepairLog: 'RepairLog',
  Customer: 'Customer',
  Vendor: 'Vendor',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  Quote: 'Quote',
  QuoteItem: 'QuoteItem',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Payment: 'Payment',
  Equipment: 'Equipment',
  ServiceLog: 'ServiceLog',
  WorkOrder: 'WorkOrder',
  TruckTrip: 'TruckTrip'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
