// packages/database/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // Prisma will read the .env you created
}

generator client {
  provider = "prisma-client-js"
}

// ============================================================================
// 1. AUTH & ROLES
// ============================================================================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  roleId      String
  companyId   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  welderCerts WelderCert[]

  role        Role     @relation(fields: [roleId], references: [id])
  company     Company? @relation(fields: [companyId], references: [id])
  
  // Relations
  timecards   Timecard[]
  weldPasses  WeldPass[]
  inspections Inspection[]
  sessions    Session[]
  createdJobs Job[]     @relation("JobCreatedBy")
  truckTrips  TruckTrip[]

  @@map("users")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique // Owner, PM, ShopLead, Welder, Apprentice, Inspector, Customer
  permissions Json   // Array of permission strings
  
  users User[]

  @@map("roles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Company {
  id       String @id @default(cuid())
  name     String
  address  String?
  city     String?
  province String? // AB, BC, ON, etc.
  postal   String?
  phone    String?
  email    String?
  gstHst   String? // GST/HST number
  pst      String? // PST number

  users     User[]
  customers Customer[]
  vendors   Vendor[]

  @@map("companies")
}

// ============================================================================
// 2. JOBS & PHASES
// ============================================================================

model Job {
  id          String    @id @default(cuid())
  title       String
  description String?
  customerId  String
  quoteId     String?
  status      JobStatus @default(QUOTED)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inspections Inspection[]

  customer    Customer    @relation(fields: [customerId], references: [id])
  createdBy   User        @relation("JobCreatedBy", fields: [createdById], references: [id])
  quote       Quote?      @relation(fields: [quoteId], references: [id])
  
  // Relations
  phases      JobPhase[]
  drawings    Drawing[]
  bomItems    BomItem[]
  timecards   Timecard[]
  invoices    Invoice[]
  workOrders  WorkOrder[]

  @@map("jobs")
}

model JobPhase {
  id          String      @id @default(cuid())
  jobId       String
  name        String      // Cut, FitUp, Weld, Grind, Paint, QA, Delivery
  sequence    Int
  status      PhaseStatus @default(PENDING)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@unique([jobId, sequence])
  @@map("job_phases")
}

model Task {
  id          String     @id @default(cuid())
  phaseId     String
  title       String
  description String?
  status      TaskStatus @default(TODO)
  estimatedHours Float?
  actualHours    Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  phase     JobPhase   @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  timecards Timecard[]

  @@map("tasks")
}

// ============================================================================
// 3. DRAWINGS & BOM
// ============================================================================

model Drawing {
  id           String  @id @default(cuid())
  jobId        String
  filename     String
  fileUrl      String
  fileType     String  // DWG, DXF, PDF
  revision     String  @default("A")
  isApproved   Boolean @default(false)
  approvedAt   DateTime?
  approvedBy   String?
  createdAt    DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("drawings")
}

model BomItem {
  id          String  @id @default(cuid())
  jobId       String
  materialId  String
  description String
  quantity    Float
  unit        String  // kg, m, pcs
  unitCost    Float?
  totalCost   Float?
  isOrdered   Boolean @default(false)
  createdAt   DateTime @default(now())

  job      Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@map("bom_items")
}

// ============================================================================
// 4. MATERIALS & INVENTORY
// ============================================================================

model Material {
  id              String @id @default(cuid())
  code            String @unique
  description     String
  category        String // Plate, Pipe, Rod, Consumable
  grade           String? // A36, 316SS, 6061-T6
  size            String? // 12x1/2, 4"SCH40
  unit            String  // kg, m, pcs
  unitCost        Float?
  qtyOnHand       Float   @default(0)
  qtyReserved     Float   @default(0)
  reorderPoint    Float?
  preferredVendor String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  bomItems     BomItem[]
  heatBatches  HeatBatch[]
  stockMoves   StockMovement[]
  poItems      PurchaseOrderItem[]

  @@map("materials")
}

model HeatBatch {
  id         String @id @default(cuid())
  materialId String
  heatNumber String
  mtrUrl     String? // MTR PDF URL
  quantity   Float
  unit       String
  receivedAt DateTime
  createdAt  DateTime @default(now())

  material Material @relation(fields: [materialId], references: [id])

  @@unique([materialId, heatNumber])
  @@map("heat_batches")
}

model StockLocation {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  isActive    Boolean @default(true)

  /// reverse sides of the two relations â€”
  /// one array for moves that LEFT here, one for moves that ARRIVED here
  movementsFrom StockMovement[] @relation("LocationFrom")
  movementsTo   StockMovement[] @relation("LocationTo")

  @@map("stock_locations")
}

model StockMovement {
  id             String   @id @default(cuid())
  materialId     String
  fromLocationId String?
  toLocationId   String?
  quantity       Float
  unit           String
  movementType   String   // RECEIVE, ISSUE, TRANSFER, ADJUST
  reference      String?
  notes          String?
  createdAt      DateTime @default(now())

  material     Material       @relation(fields: [materialId], references: [id])
  fromLocation StockLocation? @relation("LocationFrom", fields: [fromLocationId], references: [id])
  toLocation   StockLocation? @relation("LocationTo",   fields: [toLocationId],   references: [id])

  @@map("stock_movements")
}

// ============================================================================
// 5. LABOUR & TIME TRACKING
// ============================================================================

model Timecard {
  id         String    @id @default(cuid())
  userId     String
  jobId      String?
  taskId     String?
  startTime  DateTime
  endTime    DateTime?
  totalHours Float?
  wpsId      String?
  notes      String?
  isApproved Boolean   @default(false)
  createdAt  DateTime  @default(now())

  user User  @relation(fields: [userId], references: [id])
  job  Job?  @relation(fields: [jobId], references: [id])
  task Task? @relation(fields: [taskId], references: [id])
  wps  WpsSpec? @relation(fields: [wpsId], references: [id])

  weldPasses WeldPass[]

  @@map("timecards")
}

model WeldPass {
  id           String @id @default(cuid())
  timecardId   String
  welderId     String
  wpsId        String
  jointNumber  String?
  passNumber   Int
  amps         Float?
  volts        Float?
  wireFeed     Float?
  travelSpeed  Float?
  notes        String?
  createdAt    DateTime @default(now())

  timecard Timecard @relation(fields: [timecardId], references: [id], onDelete: Cascade)
  welder   User     @relation(fields: [welderId], references: [id])
  wps      WpsSpec  @relation(fields: [wpsId], references: [id])

  @@map("weld_passes")
}

// ============================================================================
// 6. WPS / PQR & CERTIFICATIONS
// ============================================================================

model WpsSpec {
  id            String   @id @default(cuid())
  code          String   @unique // W47.1-GMAW-Flat
  title         String
  process       String   // GMAW, SMAW, GTAW
  materialGroup String   // Steel, SS, Aluminum
  positions     String[] // 1G, 2G, 3G, 4G
  thickness     String?  // 6-25mm
  pdfUrl        String?
  isActive      Boolean  @default(true)
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Parameters as JSON
  parameters Json? // { amps: [100,150], volts: [18,22], wireFeed: 200 }

  // Relations
  pqrTests     PqrTest[]
  welderCerts  WelderCert[]
  timecards    Timecard[]
  weldPasses   WeldPass[]

  @@map("wps_specs")
}

model PqrTest {
  id        String   @id @default(cuid())
  wpsId     String
  testType  String   // Tensile, Bend, Impact, Macro
  result    String   // PASS, FAIL
  value     Float?
  unit      String?
  testDate  DateTime
  labName   String?
  certUrl   String?
  createdAt DateTime @default(now())

  wps WpsSpec @relation(fields: [wpsId], references: [id])

  @@map("pqr_tests")
}

model WelderCert {
  id          String   @id @default(cuid())
  welderId    String   @map("welder_id")
  wpsId       String   @map("wps_id")
  certNumber  String   @unique
  issuedAt    DateTime
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  certPdfUrl  String?
  createdAt   DateTime @default(now())

  welder User    @relation(fields: [welderId], references: [id])
  wps    WpsSpec @relation(fields: [wpsId], references: [id])

  @@unique([welderId, wpsId])
  @@map("welder_certs")
}

// ============================================================================
// 7. QUALITY & NDT
// ============================================================================

model Inspection {
  id           String         @id @default(cuid())
  jobId        String?
  inspectorId  String?
  inspectionType InspectionType
  jointNumbers String[]
  result       String         // ACCEPT, REJECT, REPAIR
  notes        String?
  reportUrl    String?
  inspectedAt  DateTime
  createdAt    DateTime       @default(now())

  job       Job?  @relation(fields: [jobId], references: [id])
  inspector User? @relation(fields: [inspectorId], references: [id])

  weldLogs  WeldLog[]
  repairLogs RepairLog[]

  @@map("inspections")
}

model WeldLog {
  id           String @id @default(cuid())
  inspectionId String
  weldNumber   String
  jointId      String?
  process      String // GMAW, SMAW, etc.
  position     String // 1G, 2G, etc.
  welderId     String?
  length       Float?
  defects      String[]
  createdAt    DateTime @default(now())

  inspection Inspection @relation(fields: [inspectionId], references: [id])

  @@map("weld_logs")
}

model RepairLog {
  id           String   @id @default(cuid())
  inspectionId String
  weldNumber   String
  defectType   String
  repairMethod String
  repairedBy   String?
  repairedAt   DateTime?
  isCompleted  Boolean  @default(false)
  notes        String?
  createdAt    DateTime @default(now())

  inspection Inspection @relation(fields: [inspectionId], references: [id])

  @@map("repair_logs")
}

// ============================================================================
// 8. CUSTOMERS & VENDORS
// ============================================================================

model Customer {
  id        String  @id @default(cuid())
  companyId String?
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  province  String?
  postal    String?
  gstHst    String?
  terms     Int     @default(30) // Payment terms in days
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())

  company Company? @relation(fields: [companyId], references: [id])
  jobs    Job[]
  quotes  Quote[]
  invoices Invoice[]

  @@map("customers")
}

model Vendor {
  id        String  @id @default(cuid())
  companyId String?
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  province  String?
  postal    String?
  terms     Int     @default(30)
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())

  company        Company? @relation(fields: [companyId], references: [id])
  purchaseOrders PurchaseOrder[]

  @@map("vendors")
}

// ============================================================================
// 9. PURCHASING
// ============================================================================

model PurchaseOrder {
  id          String    @id @default(cuid())
  poNumber    String    @unique
  vendorId    String
  status      PoStatus  @default(DRAFT)
  orderDate   DateTime  @default(now())
  requiredBy  DateTime?
  subtotal    Float     @default(0)
  tax         Float     @default(0)
  total       Float     @default(0)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  vendor Vendor              @relation(fields: [vendorId], references: [id])
  items  PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id           String @id @default(cuid())
  poId         String
  materialId   String
  description  String
  quantity     Float
  unit         String
  unitCost     Float
  totalCost    Float
  qtyReceived  Float  @default(0)
  createdAt    DateTime @default(now())

  po       PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  material Material      @relation(fields: [materialId], references: [id])

  @@map("purchase_order_items")
}

// ============================================================================
// 10. BILLING & INVOICING
// ============================================================================

model Quote {
  id         String      @id @default(cuid())
  quoteNumber String     @unique
  customerId String
  title      String
  subtotal   Float       @default(0)
  tax        Float       @default(0)
  total      Float       @default(0)
  validUntil DateTime?
  status     QuoteStatus @default(DRAFT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer Customer    @relation(fields: [customerId], references: [id])
  items    QuoteItem[]
  jobs     Job[]

  @@map("quotes")
}

model QuoteItem {
  id          String @id @default(cuid())
  quoteId     String
  description String
  quantity    Float
  unit        String
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())

  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_items")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  customerId    String
  jobId         String?
  subtotal      Float         @default(0)
  gstHst        Float         @default(0)
  pst           Float         @default(0)
  total         Float         @default(0)
  status        InvoiceStatus @default(DRAFT)
  issuedAt      DateTime?
  dueAt         DateTime?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  customer Customer      @relation(fields: [customerId], references: [id])
  job      Job?          @relation(fields: [jobId], references: [id])
  items    InvoiceItem[]
  payments Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String @id @default(cuid())
  invoiceId   String
  description String
  quantity    Float
  unit        String
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  amount        Float
  paymentMethod PaymentMethod
  reference     String?       // Cheque #, Stripe ID
  paidAt        DateTime      @default(now())
  createdAt     DateTime      @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// ============================================================================
// 11. EQUIPMENT & MAINTENANCE
// ============================================================================

model Equipment {
  id           String          @id @default(cuid())
  name         String
  category     EquipmentType
  manufacturer String?
  model        String?
  serialNumber String?
  purchaseDate DateTime?
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())

  serviceLogs ServiceLog[]

  @@map("equipment")
}

model ServiceLog {
  id          String      @id @default(cuid())
  equipmentId String
  serviceType ServiceType
  description String
  cost        Float?
  servicedAt  DateTime
  nextDue     DateTime?
  createdAt   DateTime    @default(now())

  equipment Equipment @relation(fields: [equipmentId], references: [id])

  @@map("service_logs")
}

// ============================================================================
// 12. DISPATCH & FIELD WORK
// ============================================================================

model WorkOrder {
  id          String         @id @default(cuid())
  woNumber    String         @unique
  jobId       String?
  customerId  String?
  title       String
  description String?
  address     String
  city        String
  province    String
  postal      String?
  priority    Priority       @default(MEDIUM)
  status      WorkOrderStatus @default(ASSIGNED)
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  job        Job?        @relation(fields: [jobId], references: [id])
  truckTrips TruckTrip[]

  @@map("work_orders")
}

model TruckTrip {
  id             String    @id @default(cuid())
  workOrderId    String
  driverId       String
  truckId        String?
  startTime      DateTime?
  endTime        DateTime?
  odometerStart  Int?
  odometerEnd    Int?
  gpsStart       Json?     // { lat: number, lng: number }
  gpsEnd         Json?
  photos         String[]  // Array of photo URLs
  signature      String?   // Customer signature image URL
  notes          String?
  createdAt      DateTime  @default(now())

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id])
  driver    User      @relation(fields: [driverId], references: [id])

  @@map("truck_trips")
}

// ============================================================================
// ENUMS
// ============================================================================

enum JobStatus {
  QUOTED
  CONFIRMED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum PhaseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InspectionType {
  VT  // Visual
  UT  // Ultrasonic
  RT  // Radiographic
  PT  // Penetrant
  MT  // Magnetic
}

enum PoStatus {
  DRAFT
  SENT
  CONFIRMED
  PARTIAL
  RECEIVED
  CANCELLED
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHEQUE
  CREDIT_CARD
  ACH
  WIRE
}

enum EquipmentType {
  WELDER
  CRANE
  TRUCK
  COMPRESSOR
  GRINDER
  TORCH
}

enum ServiceType {
  MAINTENANCE
  REPAIR
  INSPECTION
  CALIBRATION
}

enum WorkOrderStatus {
  ASSIGNED
  EN_ROUTE
  ON_SITE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}